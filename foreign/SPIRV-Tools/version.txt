commit f508896d6487d09f5c9a2a3835595446fec0791a
Author: David Neto <dneto@google.com>
Date:   Sun Jul 8 12:50:46 2018 -0400

    Finalize SPIRV-Tools v2018.4

commit 9de00c95f76f85d6c76dcd24c474020f3fab4ce0
Author: David Neto <dneto@google.com>
Date:   Sun Jul 8 12:49:51 2018 -0400

    Update CHANGES

commit 3dad1cda1168b56e5326305b395c25afa06feff2
Author: dan sinclair <dj2@everburning.com>
Date:   Sat Jul 7 09:38:00 2018 -0400

    Change libspirv to spvtools namespace (#1678)
    
    This CL changes all of the libspirv namespace code to spvtools to match
    the rest of the code base.

commit 76e0bde19633fc8c45f7de52029e3d517b2e1561
Author: dan sinclair <dj2@everburning.com>
Date:   Fri Jul 6 13:25:17 2018 -0400

    Move utils/ to spvtools::utils
    
    Currently the utils/ folder uses both spvutils:: and spvtools::utils.
    This CL changes the namespace to consistenly be spvtools::utils to match
    the rest of the codebase.

commit 9836b05acd9db0088d86f4e1c7bf01f8fc0c5e80
Author: dan sinclair <dj2@everburning.com>
Date:   Fri Jul 6 07:32:39 2018 -0400

    Move comp code into comp namespace
    
    This CL moves the code in the comp/ directories into the comp namespace.

commit 5e0276bdc93e3ab696f9f36298d09a50f6a77a97
Author: David Neto <dneto@google.com>
Date:   Wed Jul 4 15:50:42 2018 -0400

    validator: use RowMajor, ArrayStride, MatrixStride
    
    Implement rules for row-major matrices
    
    Use ArrayStride and MatrixStride to compute sizes
    
    Propagate matrix stride and RowMajor/ColumnMajor through array members of structs.
    
    Fixes #1637
    Fixes #1668

commit 1a283f41ed09e31cd720744f904af3d823ceddbf
Author: David Neto <dneto@google.com>
Date:   Wed Jul 4 12:42:47 2018 -0400

    Layout validation: Permit {vec3; float} tight packing
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/1666

commit 9795137c44206d993f7ae3e97496f1ac57d49f6a
Author: Ehsan <ehsann@google.com>
Date:   Fri Jul 6 13:01:22 2018 -0400

    Enable Kokoro buildbots. (#1625)

commit c460f44fbcc49f88e92959a3be540fe38b7dc793
Author: Alan Baker <alanbaker@google.com>
Date:   Fri Jun 29 11:01:13 2018 -0400

    Add a check for invalid exits from case construct.
    
    Fixes #1618.
    
    Adds a check that validates acceptable exits from case constructs. Case
    constructs may only exit to another case construct, the corresponding
    merge, an outer loop continue or outer loop merge.

commit fa78d3bec9fa8d0e11543ec6f7023a016ac3fd86
Author: dan sinclair <dj2@everburning.com>
Date:   Fri Jul 6 07:32:58 2018 -0400

    Update SPIRV-Headers

commit a0694990324b358a0c3e94147ad2b265ead97c82
Author: David Neto <dneto@google.com>
Date:   Wed Jul 4 11:13:25 2018 -0400

    Fix layout checks for StorageBuffer and PushConstant storage classes
    
    Fixes #1664 :  PushConstant with Block follows storage buffer rules
      PushConstant variables were being checked with block rules, which are
      too strict.
    Fixes #1606 :  StorageBuffer with Block layout follows buffer rules
      StorageBuffer variables were not being checked before.
    
    Fix layout messages: say storage class and decoration
      We need to provide more information about storage class and decoration.

commit a45d4cac61278e26fe9e352962d03d2b15bc08c5
Author: Steven Perron <stevenperron@google.com>
Date:   Thu Jul 5 14:19:50 2018 -0400

    Move folding routines into a class
    
    The folding routines are currently global functions.  They also rely on
    data in an std::map that holds the folding rules for each opcode.  This
    causes that map to not have a clear owner, and therefore never gets
    deleted.
    
    There has been a request to delete this map.  To implement this, we will
    create a InstructionFolder class that owns the maps.  The IRContext will
    own the InstructionFolder instance.  Then the global functions will
    become public memeber functions of the InstructionFolder.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/1659.

commit 9ecbcf5fc87db00d3d6275522c735b5667007647
Author: Steven Perron <stevenperron@google.com>
Date:   Wed Jul 4 13:17:30 2018 -0400

    Make sure the constant folder get the correct type.
    
    There are a few locations where we need to handle duplicate types.  We
    cannot merge them because they may be needed for reflection.  When this
    happens we need do some extra lookups in the type manager.
    
    The specific fixes are:
    
    1) When generating a constant through `GetDefiningInstruction` accept
    and use an id for the desired type of the constant.  This will make sure
    you get the type that is needed.
    
    2) In Private-to-local, make sure we to update the def-use chains when a
    new pointer type is created.
    
    3) In the type manager, make sure that `FindPointerToType` returns a
    pointer that points to the given type and not a duplicate type.
    
    4) In scalar replacment, make sure the null constants that are created
    are the correct type.

commit 101a9bcbb0b2b65fbf4115240ea6d6b5132ecabe
Author: Steven Perron <stevenperron@google.com>
Date:   Wed Jul 4 15:26:32 2018 -0400

    Add private to local to optimization and size passes.
    
    Many optimization will run on function scope symbols only.  When symbols
    are moved from private scope to function scople, then these optimizations
    can do more.
    
    I believe it is a good idea to run this pass with both -O and -Os.  To
    get the most out of it it should be run ASAP after inlining and something
    that remove all of the dead functions.

commit 4926f295b1c5eba553fc953936f30ba00ce74eb8
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Jul 4 14:20:52 2018 -0400

    Let symbol export tests respect SPIRV_SKIP_TESTS

commit 30a9cefa1de970ea6bc862530a3b95f85e948abc
Author: David Neto <dneto@google.com>
Date:   Fri Jun 1 15:19:11 2018 -0400

    Support SPV_KHR_8bit_storage
    
    - Add asm/dis test for SPV_KHR_8bit_storage
    - validator: SPV_KHR_8bit_storage capabilities enable declaration of 8bit int
    
    TODO:
    - validator: ban arithmetic on 8bit unless Int8 is enabled
      Covered by https://github.com/KhronosGroup/SPIRV-Tools/issues/1595

commit 51091045fe30e6d77e1350683f79a15e73f8a318
Author: dan sinclair <dj2@everburning.com>
Date:   Tue Jul 3 15:06:54 2018 -0400

    Produce better error diagnostics in the CFG validation. (#1660)
    
    Produce better error diagnostics in the CFG validation.
    
    This CL fixes up several issues with the diagnostic error line output
    in the CFG validation code. For the cases where we can determine a
    better line it has been output. For other cases, we removed the
    diagnostic line and the error line number from the results.
    
    Fixes #1657

commit 465f2815cb1e011d926419c34333ea98dfa6b72e
Author: Steven Perron <stevenperron@google.com>
Date:   Fri Jun 29 10:21:56 2018 -0400

    Revert change and stop running remove duplicates.
    
    Revert "Don't merge types of resources"
    
    This reverts commit f393b0e48014867eaada2044841cd7e0140b3d0d, but leaves
    the tests that were added.  Added new test. These test are the so that,
    if someone tries the same change I made, they will see the test that
    they need to handle.
    
    Don't run remove duplicates in -O and -Os
    
    Romve duplicates was run to help reduce compile time when looking for
    types in the type manager.  I've run compile time test on three sets
    of shaders, and the compile time does not seem to change.
    
    It should be safe to remove it.

commit 2eb9bfb5b6fcad2923fe4d0196c469a67bb6111f
Author: Steven Perron <stevenperron@google.com>
Date:   Mon Jun 25 11:35:19 2018 -0400

    Remove stores of undef.
    
    When storing an undef, any value is valid, including the one already in
    that memory location.  So we can avoid the store.

commit b67beca7230f6aa7879810c6cf6ae7bd544af85d
Author: David Neto <dneto@google.com>
Date:   Wed Jun 27 17:41:06 2018 -0400

    GLSL.std.450 Refract Eta can be any float scalar
    
    This is a decision from Khronos-internal SPIR-V spec issue 337.

commit 7cc9f36283085ca5f028993e2fadbcca666132f4
Author: Greg Roth <goyoroth@gmail.com>
Date:   Wed Jun 27 20:29:53 2018 -0600

    Add test for CFG alteration by compact IDs
    
    The Compact IDs pass can corrupt the CFG, but first the CFG has to
    be setup. To do this, a test that builds the CFG, then performs the
    compact IDs pass, then checks context consistency.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/1648

commit 4717d24e249fc8c6ab54c874768de18b6e77228a
Author: Greg Roth <goyoroth@gmail.com>
Date:   Wed Jun 27 17:29:08 2018 -0600

    Fix assert during compact IDs pass (#1649)
    
    During the compact IDs optimization pass, the result IDs of some
    basic blocks can change. In spite of this, GetPreservedAnalyses
    indicated that the CFG was preserved. But the CFG relies on
    the basic blocks having the same IDs. Simply removing this flag
    resolves the issue by preventing the CFG check.
    
    Also Removes combinators and namemap preserved analyses from
    compact IDs pass.

commit 878b3b400b2f690547842de2832af24905c2dcb6
Author: Greg Roth <goyoroth@gmail.com>
Date:   Wed Jun 27 11:47:38 2018 -0600

    check_symbol_exports on Python3, Mac
    
    subprocess.Popen returns byte data by default. Python2 was happy
    to try to execute string operations on such data and hope for the
    best, but python3 is more persnickety. Luckily, there's a simple
    way to indicate to the Popen class that text data is wanted that
    benefits the script. Just specifying universal_newlines will cause
    the returned data to be text and also convert any system-specific
    newlines to '\n' which the script relies on anyway.
    
    Enabled on Mac as an incidental change after confirming that the
    script works there just as well as it does on Linux.
    
    It probably works on FreeBSD too, but I retired my BSD system years
    ago. So I have no way to check.
    
    Don't run it on Windows.
    - It didn't work after all. It was just detecting non-posix and
      returning success.

commit f393b0e48014867eaada2044841cd7e0140b3d0d
Author: Steven Perron <stevenperron@google.com>
Date:   Tue Jun 26 12:10:53 2018 -0400

    Don't merge types of resources
    
    When doing reflection users care about the names of the variable, the
    name of the type, and the name of the members.  Remove duplicates breaks
    this because it removes the names one of the types when merging.
    
    To fix this we have to keep the different types around for each
    resource.  This commit adds code to remove duplicates to look for the
    types uses to describe resources, and make sure they do not get merged.
    
    However, allow merging of a type used in a resource with something not
    used in a resource.  Was done when the non resource type came second.
    
    This could have a negative effect on compile time, but it was not
    expected to be much.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/1372.

commit c2e3e67c31ceed694fec5aa2294365190f3eabed
Author: David Neto <dneto@google.com>
Date:   Wed Jun 27 09:54:40 2018 -0400

    validator: Fix storage buffer layout message

commit 8ecd833dbc20447bcd7041596fc71050ed0d4ed5
Author: David Neto <dneto@google.com>
Date:   Tue Jun 26 15:53:23 2018 -0400

    Block-decorated structs must list members in offset-order
    
    Additionally, implmentes code review feedback.
    
    Adds more detailed messages for Block and BufferBlock layout errors.
    
    Fixes #1638

commit 29923409e9a3cf6ed9b1e444f62bf354afe2ef39
Author: Ari Suonpaa <ari.suonpaa@siru.fi>
Date:   Thu May 17 10:49:19 2018 +0300

    Add validation for structs decorated as Block or BufferBlock.
    
    Fixes #937
    
    Stop std140/430 validation when runtime array is encountered.
    
    Check for standard uniform/storage buffer layout instead of std140/430.
    
    Added validator command line switch to skip block layout checking.
    
    Validate structs decorated as Block/BufferBlock only when they
    are used as variable with storage class of uniform or push
    constant.
    
    Expose --relax-block-layout to command line.
    
    dneto0 modification:
    - Use integer arithmetic instead of floor.

commit 0d43e10b4aa8c9468e3502d080e18e35e2c18d47
Author: Alan Baker <alanbaker@google.com>
Date:   Mon Jun 25 09:47:29 2018 -0400

    Use type id when looking up vector type
    
    Fixes #1634
    
    * Vector components of composite constructs used wrong accessor

commit 4d99fcba9d9915eb3d8a923f2906aa66ef354dac
Author: David Neto <dneto@google.com>
Date:   Thu Jun 21 14:53:01 2018 -0400

    Validator test: artificially lower limit on local var limit
    
    We need this to reduce the test time on Visual Studio debug builds.
    AppVeyor times out at 300s for a process.
    
    Artificially lower the local variable limit check for testing purposes.
    We don't get much value from using the full 500K+ variables.
    Use a limit of 5000 instead.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/1632

commit 185406439fda58a4e6e0dc3534f8e6abb9772826
Author: dan sinclair <dj2@everburning.com>
Date:   Tue Jun 5 21:36:50 2018 -0400

    Setup gclient and presubmit file.
    
    This CL adds the necessary files to use gclient and the depot_tools with
    the SPIRV-Tools directory. This allows doing things like `git cl format`
    to format code pre-upload and `git cl presubmit -uf` to run presubmit
    checks over the code.
    
    The dependencies are all added to the DEPS file and will be
    auto-downloaded. They are all pin'd to specific revisions so everyone
    has the same checkout. Clang is included in the checkout so it will be
    consistent over usages.
    
    Use clang-format

commit ba602c90593f570019e4eac3a32ed5dbf1f02b59
Author: Corentin Wallez <cwallez@google.com>
Date:   Wed Jun 20 13:29:38 2018 -0400

    Add a WIP WebGPU environment. It disallows OpUndef
    
    Add SPV_ENV_WEBGPU_0 for work-in-progress WebGPU.
    
    val: Disallow OpUndef in WebGPU env
    
    Silence unused variable warnings when !defined(SPIRV_EFFCE)
    
    Limit visibility of validate_instruction.cpp's symbols
      Only InstructionPass needs to be visible so all other functions are put
      in an anonymous namespace inside the libspirv namespace.

commit e7ace1b28021750f7ee01f8641a978caad3a9406
Author: Alan Baker <alanbaker@google.com>
Date:   Wed Jun 20 14:35:09 2018 -0400

    Add Vulkan 1.1 capability sets
    
    Fixes #1597
    
    * Classifies useable capabilities for Vulkan 1.1
    * Updates tests

commit 8d65c89678b8136102405db10a0814118db016d2
Author: David Neto <dneto@google.com>
Date:   Tue Jun 19 09:54:33 2018 -0400

    Instruction lookup succeeds if it's enabled by a capability
    
    Also add a corresponding check for capabilities in the validator.
    
    Update previously existing test cases where an instruction used to fail
    assembling because of a version check, but now they succeed because the
    instruction is also guarded by a capability.  Now it should assemble.
    Add tests to ensure that capabilities are checked appropriately.
    
    The explicitly reserved instructions OpImageSparseSampleProj*
    now assemble, but they fail validation.
    
    Fixes #1624

commit f80696eaf64298ab60e545086a6a5ab8be2c5ac1
Author: dan sinclair <dj2@everburning.com>
Date:   Tue Jun 19 16:02:44 2018 -0400

    [val] Add extra context to error messages. (#1600)
    
    [val] Add extra context to error messages.
    
    This CL extends the error messages produced by the validator to output the
    disassembly of the errored line.
    
    The validation_id messages have also been updated to print the line number of
    the error instead of the word number. Note, the error number is from the start
    of the SPIR-V, it does not include any headers printed in the disassembled code.
    
    Fixes #670, #1581

commit 356193ea8cc9aa05c89bc67c10c6cd072ce97b8d
Author: dan sinclair <dj2@everburning.com>
Date:   Tue Jun 19 16:01:45 2018 -0400

    Reland "Disallow array-of-arrays with DescriptorSets when validating. (#1586)" (#1621)
    
    This CL reverts the revert of 'Disallow array-of-arrays with DescriptorSets when
    validating." Other changes have been committed which should aleviate the
    AppVeryor resource constraints.
    
    This reverts commit f2c93c6e124836797311facb8449f9a0b76fefc2.
    
    This CL adds validation to disallow using an array-of-arrays when attached to a
    DescriptorSet.
    
    Fixes #1522

commit c4304ea0acc7bd82ce0b68b41df3c56083933c31
Author: dan sinclair <dsinclair@chromium.org>
Date:   Mon Jun 18 09:48:38 2018 -0400

    Reland "Disallow array-of-arrays with DescriptorSets when validating. (#1586)"
    
    This CL reverts the revert of 'Disallow array-of-arrays with DescriptorSets when
    validating." Other changes have been committed which should aleviate the
    AppVeryor resource constraints.
    
    This reverts commit f2c93c6e124836797311facb8449f9a0b76fefc2.
    
    This CL adds validation to disallow using an array-of-arrays when attached to a
    DescriptorSet.
    
    Fixes #1522

commit d3ed998222f36bed128f85dae6af8161d6799c6a
Author: dan sinclair <dj2@everburning.com>
Date:   Tue Jun 19 09:32:20 2018 -0400

    Validate Ids before DataRules. (#1622)
    
    Validate Ids before DataRules.
    
    The DataRule validators call FindDefs with the assumption that they
    definitions being looked at can be found. This may not be true if we
    have not validated identifiers first.
    
    This CL flips the IdPass and DataRulesPass to fix this issue.

commit ea7239fa73dfa0daa704d335673220e66e935cbd
Author: Alan Baker <alanbaker@google.com>
Date:   Fri Jun 8 15:49:50 2018 -0400

    Structured switch checks
    
    Fixes #491
    
    * Basic blocks now have a link to the terminator
    * Check all case sepecific rules
    * Missing check for branching into the middle of a case (#1618)

commit 4f866abfd850c4f04d7d1903fa4cdeef51e30110
Author: Alan Baker <alanbaker@google.com>
Date:   Thu May 31 09:07:09 2018 -0400

    Validate static uses of interfaces
    
    Fixes #1120
    
    Checks that all static uses of the Input and Output variables are listed
    as interfaces in each corresponding entry point declaration.
     * Changed validation state to track interface lists
     * updated many tests
    * Modified validation state to store entry point names
     * Combined with interface list and called EntryPointDescription
     * Updated uses
    * Changed interface validation error messages to output entry point name
    in addtion to ID

commit b49cbf09c27ac2f89c885699bcfcfe283f3bb2e8
Author: David Neto <dneto@google.com>
Date:   Tue Jun 12 16:27:47 2018 -0400

    Fix buffer read overrun in linker
    
    Fixes an ASAN failure.
    
    Was occuring when generating the OpModuleProcessed instruction declaring
    that this module was processed by the linker.

commit 1f7b1f1bf796bcb47955c449d76102fb3cbc9ec1
Author: Steven Perron <stevenperron@google.com>
Date:   Mon Jun 4 14:26:08 2018 -0400

    Small vector optimization for operands.
    
    We replace the std::vector in the Operand class by a new class that does
    a small size optimization.  This helps improve compile time on Windows.
    
    Tested on three sets of shaders.  Trying various values for the small
    vector.  The optimal value for the operand class was 2.  However, for
    the Instruction class, using an std::vector was optimal.  Size of "0"
    means that an std::vector was used.
    
                    Instruction size
                    0      4      8
    Operand Size
    
    0               489    544    684
    1               593    487
    2               469    570
    4               473
    8               505
    
    This is a single thread run of ~120 shaders.  For the multithreaded run
    the results were the similar.  The basline time was ~62sec.  The
    optimal configuration was an 2 for the OperandData and an
    std::vector for the OperandList with a compile time of ~38sec.  Similar
    expiriments were done with other sets of shaders.  The compile time still
    improved, but not as much.
    
    Contributes to https://github.com/KhronosGroup/SPIRV-Tools/issues/1609.

commit 700ebd3442d67e561d2d0d851755dfc81a640d62
Author: David Neto <dneto@google.com>
Date:   Mon Jun 11 18:53:45 2018 -0400

    Make fewer test executables
    
    Try to reduce the amount of disk space used by especially by debug builds,
    which may be contributing to AppVeyor failures.
    
    Collapses tests in categories:
    - validator
    - loop optimizations
    - dominator analysis
    - linker
    
    Contributes to #1615

commit 363bfca2ed888b501268e3e2bb748bbbbf5a32b5
Author: David Neto <dneto@google.com>
Date:   Tue Jun 5 23:07:51 2018 -0700

    Operand lookup succeeds if it's enabled by a capability
    
    - Fix tests for basic group operations (e.g. Reduce) to allow for
    new capabilities in SPIR-V 1.3 that enable them.
    - Refactor operand capability check to avoid code duplication and
    to put all checks that don't need table lookup before any table
    lookup.
    - Test round trip assembly/disassembly support for extension
    SPV_NV_viewport_array2
    - Test assembly and validation of decoration ViewportRelativeNV
    
    Fixes #1596

commit 06de86863bdbfc6e060e9e3cbec1ca4a57ae1e54
Author: Alan Baker <alanbaker@google.com>
Date:   Wed Apr 25 09:26:41 2018 -0400

    Check for invalid branches into construct body.
    
    Fixes #1281
    
    * New structured cfg check: all non-construct header blocks'
    predecessors must come from within the construct
    * New function to calculate blocks in a construct
    
    * Fixed a bug in BasicBlock type bitset
    
    Relaxing check to not consider unreachable predecessors
    
    * Fixing broken common uniform elim test

commit 035afb899ccf8ec3cf20baf31c1216dc52b752c5
Author: David Neto <dneto@google.com>
Date:   Mon Jun 11 11:08:52 2018 -0400

    Update CHANGES

commit 63c9bba59da4d626a872effba903e5fade05e7bd
Author: dan sinclair <dj2@everburning.com>
Date:   Wed Jun 6 22:08:27 2018 -0400

    [val] Output id names along with numbers in validate_id (#1601)
    
    This CL updates the validate_id code to output the name of the object along with
    the id number. There were a few instances which already output the name, this
    just extends to all of them. Now, the output should say 123[obj] instead of just
    123.
    
    Issue #1581

commit f2c93c6e124836797311facb8449f9a0b76fefc2
Author: dan sinclair <dj2@everburning.com>
Date:   Wed Jun 6 20:27:43 2018 -0400

    Revert "Disallow array-of-arrays with DescriptorSets when validating. (#1586)" (#1607)
    
    This reverts commit e3f1f3bda51387626094b054a19973c3d25b62dc.

commit e3f1f3bda51387626094b054a19973c3d25b62dc
Author: dan sinclair <dj2@everburning.com>
Date:   Tue Jun 5 09:11:35 2018 -0400

    Disallow array-of-arrays with DescriptorSets when validating. (#1586)
    
    * Disallow array-of-arrays with DescriptorSets when validating.
    
    This CL adds validation to disallow using an array-of-arrays when attached to a
    DescriptorSet.
    
    Fixes #1522

commit a1f9e1342e77e47251e2f001d95f8af8a523745a
Author: Steven Perron <stevenperron@google.com>
Date:   Fri Jun 1 13:04:46 2018 -0400

    Preserve inst-to-block and def-use in passes.
    
    The following passes are updated to preserve the inst-to-block and
    def-use analysies:
    
            private-to-local
            aggressive dead-code elimination
            dead branch elimination
            local-single-block elimination
            local-single-store elimination
            reduce load size
            compact ids (inst-to-block only)
            merge block
            dead-insert elimination
            ccp
    
    The one execption is that compact ids still kills the def-use manager.
    This is because it changes so many ids it is faster to kill and rebuild.
    
    Does everything in
    https://github.com/KhronosGroup/SPIRV-Tools/issues/1593 except for the
    changes to merge return.

commit fe2fbee294a8ad4434f828a8b4d99eafe9aac88c
Author: Steven Perron <stevenperron@google.com>
Date:   Wed May 30 23:50:07 2018 -0400

    Delete the insert-extract-elim pass.
    
    Replaces anything that creates an insert-extract-elim pass and create
    a simplifiation pass instead.  Then delete the implementation of the
    pass.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/1570.

commit 9a008835f47885fe76028fb08bfeefa4d6618f8f
Author: Steven Perron <stevenperron@google.com>
Date:   Thu May 31 20:28:19 2018 -0400

    Add store for var initializer in inlining.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/1591.

commit badcf73d00c2a83e5272ab85cfa0c31e6564b1c5
Author: Alan Baker <alanbaker@google.com>
Date:   Fri May 25 13:20:31 2018 -0400

    Allow duplicate pointer types
    
    Fixes #1577
    
    * Remove validation requiring unique pointer types unless variable
    pointers extension enabled
    * Modified scalar replacement to always look for an undecorated pointer

commit 93c4c184d57cc3483c5e75b52007b0760c478453
Author: Steven Perron <stevenperron@google.com>
Date:   Fri May 25 14:00:03 2018 -0400

    Handle types with self references.
    
    By using forward pointers, we are able to define a struct that has a
    pointer to itself.  This could be directly or indirectly.  The current
    implementation of the type manager did not handle this case.  There are
    three changes that are made in this commit inorder to handle this case:
    
    1) Change the handling of OpTypeForwardPointer
    
    The current handling of OpTypeForwardsPointer is broken if there is a
    reference to the pointer before the real definition.  When build the
    type that contain the forward delared pointer, the type manager will ask
    for the type for that ID, and will get a nullptr because it does not
    exists.  This nullptr is not handleded very well.
    
    The change is to keep track of the incomplete types the first time
    through all of the types.  An incomplete type is a ForwardPointer or any
    type that references an incomplete type.
    
    Then we implement a second pass through the incomplete types that will
    complete them.
    
    2) Hashing types.
    
    When hashing a type, we want to uses all of the subtypes as part of the
    hash.  However, with types that reference them selves, this creates an
    infinite recursion.  To get around this, we keep track of which types
    have been seen on the path from the root type.  If we have see the
    current type already then we can stop the recursion.
    
    3) Comparing types.
    
    In order to check if two types are the same, we must check that all of
    their subtypes are the same as well.  This also causes an infinit
    recursion.  The solution is to stop comparing the subtypes if we are
    trying to compare two pointer types that we are already in the middle of
    comparing.  The ideas is that if the two pointer are different, then in
    progress compare will return false itself.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/1578.

commit 6b83643cfe35a97145c72e5bdb724f88a8823769
Author: David Neto <dneto@google.com>
Date:   Fri May 25 22:14:30 2018 -0400

    Start v2018.4-dev

commit 545d6ca26d3beddcb8dc5dc363deb1544a2eeb87
Author: David Neto <dneto@google.com>
Date:   Fri May 25 22:12:25 2018 -0400

    Finalize v2018.3

commit 6a986d02a762736051a88fcb48f8d61ddd0d099e
Author: David Neto <dneto@google.com>
Date:   Fri May 25 21:58:26 2018 -0400

    Update CHANGES

commit 745dd00af9cf9bba79012cf24f5176a08c8fef1d
Author: Steven Perron <stevenperron@google.com>
Date:   Fri May 18 11:15:38 2018 -0400

    Fold FMix feeding Extract, and use the simplification pass.
    
    We add a new rule to the folding rules to fold an FMix feeding an
    extract when the alpha value for the element being extracted is either
    0 or 1.  In those case, we can simple extract from one of the operands
    to the FMix.
    
    With that change the simplification pass completely subsumes the
    insert-extract elimination pass.  So we remove the insert-extract
    elimination passes and replce them with calls to the simplification
    pass.
    
    In a follow up PR, we should delete the insert-extract elimination pass.
    
    Contributes to https://github.com/KhronosGroup/SPIRV-Tools/issues/1570.

commit f765d16bd901a451fdc23453071125b21a0e528c
Author: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>
Date:   Tue May 22 14:31:26 2018 -0700

    Add external interface for creating a pass token
    
    Currently it's impossible for external code to register a pass because
    the only source file that can create pass tokens is optimizer.cpp. This
    makes it hard to add passes that can't be upstreamed since you can't run
    them from the usual pass sequence without reimplementing Optimizer.
    
    This change adds a PassToken constructor that takes unique_ptr to
    opt::Pass; if out-of-tree code implements opt::Pass it can register a
    custom pass without having to add it to SPIRV-Tools source code.

commit 0a14a1f74840ebd172e4128a8789f44190d1e4e7
Author: dan sinclair <dsinclair@chromium.org>
Date:   Tue May 22 13:13:14 2018 -0400

    Validate that only a single OpMemoryModel is provided.
    
    This CL adds validation that only a single OpMemoryModel is provided in the
    SPIR-V binary.
    
    Fixes #1574

commit 3b87dac56b688d3541db870ddf6737f745efc34e
Author: dan sinclair <dsinclair@chromium.org>
Date:   Tue May 22 13:09:50 2018 -0400

    Validate presence of OpMemoryModel.
    
    According to the SPIR-V Spec, section 2.4 Logical Layout of a Module there
    should be a single required OpMemoryModel instruction provided. This CL adds
    validation that OpMemoryModel is provided to the SPIR-V validator.
    
    Fixes #1207

commit a579e720a8d7805ec9ebf657a4c6fa67ec268f7e
Author: Steven Perron <stevenperron@google.com>
Date:   Mon Apr 16 09:58:00 2018 -0400

    Remove the limit on struct size in SROA.
    
    Removes the limit on scalar replacement for the lagalization passes.
    This is done by adding an option to the pass (and command line option)
    to set the limit on maximum size of the composite that scalar
    replacement is willing to divide.
    
    Fixes #1494.

commit f1f7cc870e13e1ad1eb2f2e757c21aec4276c707
Author: Steven Perron <stevenperron@google.com>
Date:   Wed May 16 10:41:40 2018 -0400

    Get ADCE to handle OpCopyMemory
    
    ADCE does not treat OpCopyMemory as an instruction that references
    memory.  Because of that stores are removed that should not be.
    
    This change teaches ADCE that OpCopyMemory and OpCopyMemorySize both
    loads from and stores to memory.  This will keep other stores live when
    needed, and will allows ADCE to remove OpCopyMemory instructions as
    well.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/1556.

commit b09e3ce8427c7cfffcc4950f5bd05fa4c586b23c
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed May 16 13:16:27 2018 -0400

    Allow ViewportIndex & Layer to be used in VS/DS with extension
    
    SPV_EXT_shader_viewport_index_layer enables using ViewportIndex
    and Layer in vertex and tessellation shaders.
    
    Also, as per the Vulkan spec:
    
    > The ViewportIndex decoration must be used only within vertex,
    > tessellation evaluation, geometry, and fragment shaders.
    
    > In a vertex, tessellation evaluation, or geometry shader, any
    > variable decorated with ViewportIndex must be declared using
    > the Output storage class.
    
    > In a fragment shader, any variable decorated with ViewportIndex
    > must be declared using the Input storage class.
    
    Similarly for Layer.

commit 9b1a938ea1a587a4689c9c2a3dd0d23e30c59b44
Author: Steven Perron <stevenperron@google.com>
Date:   Fri May 11 17:02:57 2018 -0400

    SROA: Only create symbols that are loaded.
    
    Currently in scalar replacement, we create a new variable for every
    memeber of the composite being divided.  It is often overkill, because
    not all of those members will be used.  This change will check which
    elements are used and only create variable for the members that are
    used.
    
    This reduces the compile time for one set of shader from 248s to 165s.
    
    Part of https://github.com/KhronosGroup/SPIRV-Tools/issues/1494.

commit 0e1b7e5aefa89f6c7d5c289b22483b8d2a8c64ba
Author: Steven Perron <stevenperron@google.com>
Date:   Tue May 15 13:11:18 2018 -0400

    Fix getting operand without checking opcode.
    
    Fixes https://github.com/KhronosGhttps://github.com/KhronosGroup/SPIRV-Tools/issues/1559roup/SPIRV-Tools/issues/1559.
    
    There is an load of an operand of an instruction that was suppose to be
    only for the OpCompositeExtract case.  However, an error caused it to
    be loaded for every opcode, even those that do not have an operand in
    that position.
    
    We fix up that bug, and a couple other things noticed that the same
    time.

commit efcc33e8a97b9d67319a1397e53b2d06704e3336
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed May 16 08:43:50 2018 -0400

    Support SpvOpExecutionModeId in SPIR-V logical layout

commit 18ad1be7f9cabcbbfc75128d0381f44de0bc480a
Author: alan-baker <33432579+alan-baker@users.noreply.github.com>
Date:   Tue May 15 12:23:27 2018 -0400

    Fixing MacOS compiler error

commit f46f2d3e5d63a4ba5ee8e0d16b8756e788373d57
Author: Steven Perron <stevenperron@google.com>
Date:   Mon May 14 11:51:22 2018 -0400

    Remove redundant stores.
    
    The code patterns generated by DXC around function calls can cause many
    store to be storing the same value that was just loaded from the same
    location:
    
    ```
    %10 = OpLoad %type %var
    OpStore %var %10
    ```
    
    We want to clean these up very early on because they can cause other
    transformations to do a lot of work.  For the cases I see, they can be
    removed during local-single-block-elim.
    
    For one set of shaders the compile time goes from 248s to 182s.  A 26%
    improvement.
    
    Part of https://github.com/KhronosGroup/SPIRV-Tools/issues/1494.

commit af430ec822d63fe9e3448b0e57671e166e3ef01c
Author: Steven Perron <stevenperron@google.com>
Date:   Mon May 7 12:31:03 2018 -0400

    Add pass to fold a load feeding an extract.
    
    We have already disabled common uniform elimination because it created
    sequences of loads an entire uniform object, then we extract just a
    single element.  This caused problems in some drivers, and is just
    generally slow because it loads more memory than needed.
    
    However, there are other way to get into this situation, so I've added
    a pass that looks specifically for this pattern and removes it when only
    a portion of the load is used.
    
    Fixes #1547.

commit 804e8884c483515e4b9fd2bcd5d0535462aa8f52
Author: Steven Perron <stevenperron@google.com>
Date:   Wed May 2 16:42:20 2018 -0400

    Fold fclamp feeding compare.
    
    An FClamp instruction forces a values to be within a certain interval.
    When the upper or lower bound of the FClamp is a constant and the value
    being compared with is a constant, then in some case we can fold the
    compared because the entire range is say less than the value.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/1549.

commit e9cda702618e9c966ebdf9f5b3af8544c822ed4e
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu May 10 16:32:13 2018 -0400

    Adjust tests according to grammar change
    
    * ConstOffsets now requires ImageGatherExtended
    * Int8 does not require Kernel anymore

commit 9ec3f81e5c5de63b864c1d568ee9b125dffc3367
Author: Steven Perron <stevenperron@google.com>
Date:   Tue May 8 14:02:03 2018 -0400

    Remove dead Workgroup variables in ADCE.
    
    If there is a shader with a variable in the workgroup storage class that
    is stored to, but not loadeds, then we know nothing will read those
    loads.  It should be safe to remove them.
    
    This is implemented in ADCE by treating workgroup variables the same
    way that private variables are treated.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/1550.

commit 0856997df6f6a53364b0f257824e12298871cefb
Author: Steven Perron <stevenperron@google.com>
Date:   Wed May 2 14:54:26 2018 -0400

    Allow ADCE to remove more instructions.
    
    At this time, DCE will only remove an instruction if it is a combinator.
    However, there are certain non-combinator instructions that can be
    safely removed if their results are not used.  The derivative
    instructions are on example.
    
    We are also missing some instructions from the list of combinators
    those are added as the same time.

commit 7d01643132de0b7ce74202fd56f9fcd7633a9fc7
Author: Steven Perron <stevenperron@google.com>
Date:   Thu Apr 26 15:07:48 2018 -0400

    Allow hoisting code in if-conversion.
    
    When doing if-conversion, we do not currently move code out of the side
    nodes.  The reason for this is that it can increase the number of
    instructions that get executed because both side nods will have to be
    executed now.
    
    In this commit, we add code to move an instruction, and all of the
    instructions it depends on, out of a side node and into the header of
    the selection construct.  However to keep the cost down, we only do it
    when the two values in the OpPhi node compute the same value.  This way
    we have to move only one of the instructions and the other becomes
    unused most of the time.  So no real extra cost.
    
    Makes the value number table an alalysis in the ir context.
    
    Added more opcodes to list of code motion safe opcodes.
    
    Fixes #1526.

commit 1c2cbaf569ab6688c6c548148e74ba898460a4c7
Author: Stephen McGroarty <stephen@codeplay.com>
Date:   Wed May 2 18:01:24 2018 +0100

    Add GetContinueBlock to loop class.
    
    Previously, the loop class used the terms latch and continue block
    interchangeably. This patch splits the two and corrects and tests some
    uses of the old uses of GetLatchBlock.

commit 70bb3c1cc2778509da468321cb55713f11b66403
Author: Steven Perron <stevenperron@google.com>
Date:   Mon Apr 30 15:37:53 2018 -0400

    Fold divide and multiply by same value.
    
    We want to fold code like (x*y)/x and other permutations of this.
    
    Fixes #1531.

commit 98434847368d445febefa881e5d5b9b217aca08b
Author: Diego Novillo <dnovillo@google.com>
Date:   Tue May 1 17:46:47 2018 -0400

    Fix build.

commit 1dc245806082c4f4e79fec7e1aef57720f0e1221
Author: Toomas Remmelg <toomas.remmelg@codeplay.com>
Date:   Fri Apr 20 15:14:45 2018 +0100

    Add a loop fusion pass.
    
    This pass will look for adjacent loops that are compatible and legal to
    be fused.
    
    Loops are compatible if:
    
    - they both have one induction variable
    - they have the same upper and lower bounds
        - same initial value
        - same condition
    - they have the same update step
    - they are adjacent
    - there are no break/continue in either of them
    
    Fusion is legal if:
    
    - fused loops do not have any dependencies with dependence distance
      greater than 0 that did not exist in the original loops.
    - there are no function calls in the loops (could have side-effects)
    - there are no barriers in the loops
    
    It will fuse all such loops as long as the number of registers used for
    the fused loop stays under the threshold defined by
    max_registers_per_loop.

commit 9a5dd6fe88882005ea0433857e688581608bb210
Author: Stephen McGroarty <stephen@codeplay.com>
Date:   Mon Apr 23 21:01:12 2018 +0100

    Support loop fission.
    
    Adds support for spliting loops whose register pressure exceeds a user
    provided level. This pass will split a loop into two or more loops given
    that the loop is a top level loop and that spliting the loop is legal.
    Control flow is left intact for dead code elimination to remove.
    
    This pass is enabled with the --loop-fission flag to spirv-opt.

commit 9ba0879ddf00cc2462e581772cd6869e2a2dc984
Author: Steven Perron <stevenperron@google.com>
Date:   Fri Apr 27 13:52:05 2018 -0400

    Improve Vector DCE
    
    Track live scalars in VDCE as if they were single element vectors.
    
    Handle the extended instructions for GLSL in VDCE.
    
    Handle composite construct instructions in VDCE.

commit a00a0a09ae5dab8ef15073ceb40542c162767798
Author: Steven Perron <stevenperron@google.com>
Date:   Fri Apr 27 10:33:19 2018 -0400

    Revert "Improvements to vector dce."
    
    This reverts commit 2813722993d17a827497b8f627858e687adebbda.
    
    A regression was found.  Undoing the change until it is fixed.

commit 4246abdc74a18c60b49316d5d9863ca2be61127a
Author: Alan Baker <alanbaker@google.com>
Date:   Thu Apr 26 12:22:08 2018 -0400

    Fixes handling of kill and unreachable ops in inlining.
    
    Fixes #1527
    
    * Adds handling for copying OpKill and OpUnreachable and forces the
    generation of a new basic block
    * Adds tests to check

commit e1bcd2b2d8fd67a005e9e0e7981044da7e672750
Author: Steven Perron <stevenperron@google.com>
Date:   Wed Apr 25 09:51:18 2018 -0400

    Fold OpVectorTimesScalar and OpPhi better.
    
    If one of the operands to an OpVectorTimesScalar instruction is zero,
    then the result will be the 0 vector. Currently we do not fold the
    insturction unless both operands are constants. This change fixes that.
    
    We also allow folding of OpPhi instructions where the incoming values
    are either an OpUndef or the OpPhi instruction itself. As with other
    cases, this can be simplified to the OpUndef.

commit 2813722993d17a827497b8f627858e687adebbda
Author: Steven Perron <stevenperron@google.com>
Date:   Tue Apr 24 10:06:53 2018 -0400

    Improvements to vector dce.
    
    Track live scalars in VDCE as if they were single element vectors.
    
    Handle the extended instructions for GLSL in VDCE.
    
    Handle composite construct instructions in VDCE.
    
    Fixes #1511.

commit 72524db2dec0cf13a98c4b3e75ff10fcbdd86ac8
Author: Cort Stratton <cort@google.com>
Date:   Tue Apr 24 14:14:00 2018 -0700

    Fixes #1521: PadToWord() should use std::move() in && variant

commit 268be6143d76bb413db6b279b90e92f3dc817e54
Author: Greg Fischer <greg@lunarg.com>
Date:   Thu Apr 19 14:05:47 2018 -0600

    LocalSingleBlockElim: Add store-store elimination
    
    Eliminate unused store to variable if followed by store to same
    variable in same block.
    
    Most significantly, this cleans up stores made unused by this pass.
    These useless stores can inhibit subsequent optimizations, specifically
    LocalSingleStoreElim. Eliminating them makes subsequent optimization more
    effective.
    
    The main effect of this pass is to simplify the work done by the SSA
    rewriter.  It catches many local loads/stores that help speeding up the
    work done by the main rewriter.

commit ee8cd5c847a81306cb10d0cfdec08d2bec84780e
Author: Steven Perron <stevenperron@google.com>
Date:   Mon Apr 23 11:17:07 2018 -0400

    Add Dead insert elmination back in.

commit 2c0ce872103d676bf8de5dc87a03ad2c32e215a2
Author: Steven Perron <31666470+s-perron@users.noreply.github.com>
Date:   Mon Apr 23 11:13:07 2018 -0400

    Vector DCE (#1512)
    
    Introduce a pass that does a DCE type analysis for vector elements
    instead of the whole vector as a single element.
    
    It will then rewrite instructions that are not used with something else.
    For example, an instruction whose value are not used, even though it is
    referenced, is replaced with an OpUndef.

commit 7a5928358753dc0433bdf83d8f3021991c88840f
Author: David Neto <dneto@google.com>
Date:   Fri Apr 20 15:55:22 2018 -0400

    Another fix for old XCode: std::set explicit ctor in test code

commit efc506192943262551728cbc8e6394e36ca2e348
Author: Victor Lomuller <victor@codeplay.com>
Date:   Fri Apr 20 17:28:40 2018 +0100

    Dominator analysis interface clean.
    
    Remove the CFG requirement when querying a dominator/post-dominator from an IRContext.
    
    Updated all uses of the function and tests.

commit 48802bad7271334001f44a03f1188bacd4ceaa49
Author: Jaebaek Seo <jaebaek@google.com>
Date:   Thu Apr 19 10:00:09 2018 -0400

    Constant folding for OpVectorTimesScalar

commit 0ec08c28c1f6eedd7ba7fabb42e16d9a754cb281
Author: Victor Lomuller <victor@codeplay.com>
Date:   Tue Apr 17 15:31:09 2018 +0100

    Add register liveness analysis.
    
    For each function, the analysis determine which SSA registers are live
    at the beginning of each basic block and which one are killed at
    the end of the basic block.
    
    It also includes utilities to simulate the register pressure for loop
    fusion and fission.
    
    The implementation is based on the paper "A non-iterative data-flow
    algorithm for computing liveness sets in strict ssa programs" from
    Boissinot et al.

commit 09c206b6fb79ae1c2c542e30225739b938c880a5
Author: Alan Baker <alanbaker@google.com>
Date:   Tue Apr 17 10:18:59 2018 -0400

    Fixes #1480. Validate group non-uniform scopes.
    
    * Adds new pass for validating non-uniform group instructions
     * Currently on checks execution scope for Vulkan 1.1 and SPIR-V 1.3
    * Added test framework

commit e7c2e91ded337c69091be6baf093f02a7de47cc8
Author: David Neto <dneto@google.com>
Date:   Thu Apr 19 16:33:12 2018 -0400

    Fix for old XCode: std::set has explicit ctor

commit 1c89da46ff48a20ffc60ccdfad5c1f8b44f123b5
Author: GregF <greg@LunarG.com>
Date:   Wed Apr 18 11:55:10 2018 -0600

    Test/DependencyAnalysis: Fix uninitialized variables

commit df7f00f60ed61f9bf88e51c9af2a9bd05b8ef930
Author: Greg Fischer <greg@lunarg.com>
Date:   Wed Apr 18 10:24:41 2018 -0600

    DeadInsertElim: Don't revisit select phi nodes during MarkInsertChain
    
    Fixes #1487.

commit 430a29335e7757f7e14be0f645228c7419d0e000
Author: Jaebaek Seo <jaebaek@google.com>
Date:   Mon Apr 16 11:58:59 2018 -0400

    Fix broken pointer of CommonUniformElimPass

commit c20a718e00876a91c868858e367b8f150a8d595a
Author: Steven Perron <stevenperron@google.com>
Date:   Wed Apr 11 11:58:47 2018 -0400

    Rewrite local-single-store-elim to not create large data structures.
    
    The local-single-store-elim algorithm is not fundamentally bad.
    However, when there are a large number of variables, some of the
    maps that are used can become very large.  These large data structures
    then take a very long time to be destroyed.  I've seen cases around 40%
    if the time.
    
    I've rewritten that algorithm to not use as much memory.  This give a
    significant improvement when running a large number of shader through
    DXC.
    
    I've also made a small change to local-single-block-elim to delete the
    loads that is has replaced.  That way local-single-store-elim will not
    have to look at those.  local-single-store-elim now does the same thing.
    
    The time for one set goes from 309s down to 126s.  For another set, the
    time goes from 102s down to 88s.

commit 0fa42996b5123b8bd7029795e95fa24458e573f4
Merge: 0f335cf8 3c5bd266
Author: Jaebaek Seo <duke.acacia@gmail.com>
Date:   Wed Apr 18 13:46:10 2018 -0400

    Merge pull request #1461 from jaebaek/fnegate
    
    Add constant folding for OpFNegate
    
    Contributes to #709

commit 3c5bd26668e9809477ea4a8abd990f5cc13a2dc0
Author: Jaebaek Seo <jaebaek@google.com>
Date:   Tue Apr 17 14:13:19 2018 -0400

    Typo

commit 0f335cf87e7a42e45b1a06958c4bc2d8a57e3978
Author: Toomas Remmelg <toomas.remmelg@codeplay.com>
Date:   Wed Apr 11 16:02:04 2018 +0100

    Add support for MIV and Delta test dependence analysis.
    
    GCD MIV test as described in Chapter 3 of "Optimizing Compilers for
    Modern Architectures: A Dependence-Based Approach" by Randy Allen, and
    Ken Kennedy.
    
    Delta test as described in Figure 3 of "Practical Dependence Testing" by
    Gina Goff, Ken Kennedy, and Chau-Wen Tseng from PLDI '91.

commit ff92339fffc045f1deb7ad58222ec0db1cb8672b
Author: Jaebaek Seo <jaebaek@google.com>
Date:   Tue Apr 17 12:12:48 2018 -0400

    Format

commit d8b9306a4fe0a026fed698a052485c5c3f9ab0d2
Author: Jaebaek Seo <jaebaek@google.com>
Date:   Tue Apr 17 12:08:25 2018 -0400

    Add more unit tests

commit 79491259e02a4398f5e6265f0c687c59cb5b74ff
Author: Jaebaek Seo <jaebaek@google.com>
Date:   Fri Apr 6 11:44:17 2018 -0400

    Add constant folding for FNegate

commit 38359ba80006569e540035133852122e348201e1
Author: Alan Baker <alanbaker@google.com>
Date:   Mon Apr 16 13:58:11 2018 -0400

    Fixes #1483. Validating Vulkan 1.1 barrier execution scopes
    
    * Reworked how execution model limitations are checked
     * Now OpFunction checks which entry points call it and checks its
     registered limitations instead of building a call stack in the entry
     point
    * New tests
    * Moving function to entry point mapping into VState

commit 152b9a681ebec0aab3f3d83c7b775e2dc2e1df36
Author: David Neto <dneto@google.com>
Date:   Mon Apr 16 11:33:13 2018 -0400

    ADCE: Remove OpDecorateStringGOOGLE
    
    Also fix a few failures to set "modified" status when removing
    global values.
    
    Add OpDecorateStringGOOGLE to decoration ordering
    
    Fixes #1492

commit 0e80b86dbe1b6317bf3ea809df2cf0bc7f8064d5
Author: Alan Baker <alanbaker@google.com>
Date:   Mon Apr 16 10:05:11 2018 -0400

    Fixes #1472. Per-vertex variable validation fixes.
    
    Relaxs checks for per-vertex builtin variables. If the builtin
    decoration is applied to a variable, then those checks now allow a level
    of arraying on the variable before checking the type consistency.
    
    * Allows arrays of variables to be present for the per-vertex variables:
     * Position
     * PointSize
     * ClipDistance
     * CullDistance
    * Updated tests

commit 7fe186476ac57f49badf46237dff39360c7f4c19
Author: Rex Xu <rex.xu@amd.com>
Date:   Wed Apr 11 21:29:22 2018 +0800

    Fix validation issues relevant to SPV_AMD_gpu_shader_int16.
    
    Frexp/FrexpStruct allows exp to be either 16-bit or 32 bit integer if
    SPV_AMD_gpu_shader_int16 is enabled.

commit a3bb78274562f6838441137358b29a3fc8b966ad
Author: Lei Zhang <antiagainst@google.com>
Date:   Sun Apr 15 09:55:54 2018 -0400

    Travis CI: change to use the default email notification behavior

commit e8814be73284e55399e67a8e27c9e034b937d2e3
Author: David Neto <dneto@google.com>
Date:   Thu Apr 12 14:47:53 2018 -0400

    Add validator test for OpBranch
    
    Add test for case where OpBranch branches to a value (a function value).
    Previous tests only checked a label value (name of a block.).
    
    Update validate_id.cpp to remove the TODO for OpBranch and say that it
    is already checked in validate_cfg.cpp

commit d42f65e7c1db970608a24cff1ea4ccf063bff5af
Author: Steven Perron <stevenperron@google.com>
Date:   Thu Apr 12 11:00:58 2018 -0400

    Use a bit vector in ADCE
    
    The unordered_set in ADCE that holds all of the live instructions takes
    a very long time to be destroyed.  In some shaders, it takes over 40% of
    the time.
    
    If we look at the unique ids of the live instructions, I believe they
    are dense enough make a simple bit vector a good choice for to hold that
    data.  When I check the density of the bit vector for larger shaders, we
    are usually using less than 4 bytes per element in the vector, and
    almost always less than 16.
    
    So, in this commit, I introduce a simple bit vector class, and
    use it in ADCE.
    
    This help improve the compile time for some shaders on windows by the
    40% mentioned above.
    
    Contributes to https://github.com/KhronosGroup/SPIRV-Tools/issues/1328.

commit 8190c26270792560f9d83904cb6f737b4f484984
Author: Steven Perron <stevenperron@google.com>
Date:   Thu Apr 12 13:50:36 2018 -0400

    Change parameter to Mempass::RemovePhiOperands
    
    Pass a hashtable by const ref instead of by value.  Big impact on
    compile time.

commit e805d1f8d7146391c613b43c8e9d64756afac6fd
Author: Alan Baker <alanbaker@google.com>
Date:   Thu Apr 12 11:11:24 2018 -0400

    Fixes #1469. Allow subgroup memory scope for Vulkan 1.1
    
    * New error that prevents CrossDevice memory scope for all vulkan
    * Old error specifically references Vulkan 1.0
    * New tests

commit c3ee21056398c24d4efcd5f94233aa678a1ffea4
Author: Alan Baker <alanbaker@google.com>
Date:   Thu Apr 12 09:33:33 2018 -0400

    Fixes #1471. Adds missing environments to spriv-val help
    
    * spirv-val: Added environments referenced in --version,
      but not mentioned in --help

commit c522b697bfe59aeb119c65fa8c759ae0f580c65d
Author: Alan Baker <alanbaker@google.com>
Date:   Thu Apr 12 09:22:34 2018 -0400

    Fixes #1470. Don't restrict WGS storage class
    
    * Removed restriction that workgroup size can only be on Input storage
    class
    * added test

commit bc648fd76a34ba77ec65c0db6724d72937d148c1
Author: Steven Perron <stevenperron@google.com>
Date:   Tue Apr 10 16:32:47 2018 -0400

    Delete unused code in MemPass
    
    Since the SSA rewriter was added, the code old phi insertion code is no
    longer used.  It is going stale and should be deleted.

commit c584ac4fc60f7bd5085c3bc4982e7106eb242697
Author: Steven Perron <stevenperron@google.com>
Date:   Tue Apr 10 13:38:33 2018 -0400

    Don't allow an instance of a pass to be run multiple times.

commit 10e5d7cf13bfda1e6857663d0d70bec5ce56943a
Author: Victor Lomuller <victor@codeplay.com>
Date:   Thu Mar 29 12:22:42 2018 +0100

    Add a loop peeling pass.
    
    For each loop in a function, the pass walks the loops from inner to outer most loop
    and tries to peel loop for which a certain amount of iteration can be done before or after the loop.
    
    To limit code growth, peeling will not happen if the growth in code size goes above a configurable threshold.

commit 61b50b3bfa680392808dba6aa258874cc75e3abb
Author: Alexander Johnston <alexander@codeplay.com>
Date:   Thu Mar 29 13:39:54 2018 +0100

    ZIV and SIV loop dependence analysis.
    
    Provides functionality to perform ZIV and SIV dependency analysis tests
    between a load and store within the same loop.
    
    Dependency tests rely on scalar analysis to prove and disprove dependencies
    with regard to the loop being analysed.
    
    Based on the 1990 paper Practical Dependence Testing by Goff, Kennedy, Tseng
    
    Adds support for marking loops in the loop nest as IRRELEVANT.
    Loops are marked IRRELEVANT if the analysed instructions contain
    no induction variables for the loops, i.e. the loops induction
    variable is not relevent to the dependence of the store and load.

commit 53bc1623ecd3cc304d0d6feed8385e70c7ab30d3
Author: Steven Perron <stevenperron@google.com>
Date:   Thu Apr 5 15:01:10 2018 -0400

    Fold OpDot
    
    Adding three rules to fold OpDot (implemented as two).
    
    - When an OpDot has two constants, then fold to the resulting const.
    
    - When one of the inputs is the 0 vector, then fold to zero.
    
    - When one of the inputs is a single 1 with 0s, then rewrite to an
    OpCompositeExtract of the appropriate element.  This will help find
    even more folding opportunities.
    
    Contributes to #709.

commit 3020104ff25a0f661e7818bd49fbf5f23e0b0e98
Author: Alan Baker <alanbaker@google.com>
Date:   Mon Apr 9 09:02:50 2018 -0400

    Adding tests for OpenCL 1.2 and embedded profiles

commit 42840d15e4bf5cba4a7345639b409c6e962b96c2
Author: Alan Baker <alanbaker@google.com>
Date:   Fri Apr 6 14:15:27 2018 -0400

    Fixes #1433. Validate binary version
    
    * Validates SPIR-V binary version against target environment

commit 26a698c34788bb69123a1f3789970a16cf4d9641
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Apr 6 21:04:35 2018 -0400

    Fix PrimitiveId builtin check for Vulkan
    
    According to Vulkan spec 1.1.72:
    
    > The PrimitiveId decoration must be used only within fragment,
    > tessellation control, tessellation evaluation, and geometry shaders.
    
    > In a tessellation control or tessellation evaluation shader, any
    > variable decorated with PrimitiveId must be declared using the Input
    > storage class.
    
    We were enforcing that PrimitiveId can only be used with Output
    storage class for TCS and TES before.

commit 5f53c42a1e24e329c6e02e41cfd24a1cc0f8d22f
Author: David Neto <dneto@google.com>
Date:   Fri Apr 6 16:42:56 2018 -0400

    Update CHANGES

commit a91cbfbf7569cac2aa144284dd2162eae4556b5a
Author: David Neto <dneto@google.com>
Date:   Fri Apr 6 10:18:34 2018 -0400

    Optimizer: update extension whitelists
    
    Add two new extensions:
    - SPV_NV_shader_subgroup_partitioned
    - SPV_EXT_descriptor_indexing

commit 6fbfe1c016bd8ffaf8f59db75e660d7d9a447843
Author: GregF <greg@LunarG.com>
Date:   Wed Apr 4 18:15:48 2018 -0600

    Fix SSA rewrite for nested loops.
    
    From the test case, the slice of the CFG that is interesting for the bug
    is
    
    25
    |
    v
    30
    |
    v
    31<-+
    |   |
    v   |
    34--+
    
    1. In block 25, we have a Phi candidate for %f with arguments
       %47 = Phi[%float_0, %0]. This merges %float_0 and a yet unknown
       argument from the external loop backedge.
    2. We are now processing block 34:
       i. The load %35 = OpLoad %f triggers a Phi candidate to be placed in
          block 31.
      ii. The Phi candidate %50 = Phi needs two arguments. The one coming
          from block 30 is %47. But the one coming from block 34 (which we
          are now processing and have marked sealed), finds %50 itself as
          the reaching def for %f.
    3. This wrongfully marks %50 as a copy-of Phi, which ultimately makes
       both %47 and %50 copy-of Phis that get eliminated.

commit e025145c5de058d4b7b938480e730ea6541b23ea
Author: David Neto <dneto@google.com>
Date:   Thu Apr 5 17:10:57 2018 -0400

    Test asm/dis support for SPV_EXT_descriptor_indexing

commit 6f80608b8a17524de68ae325a13cfa7c180ea791
Author: David Neto <dneto@google.com>
Date:   Thu Apr 5 15:09:38 2018 -0400

    Test asm/dis support for SPV_NV_shader_subgroup_partitioned

commit e66e305b46cdaf49fbb3c6b5de8fb65543d7dad9
Author: Alan Baker <alanbaker@google.com>
Date:   Fri Apr 6 09:36:08 2018 -0400

    Re-enabled checks for UConvert

commit caf7da87e1f97f3394073152df41e802d45b5934
Author: Pierre Moreau <dev@pmoreau.org>
Date:   Wed Apr 4 18:19:43 2018 +0200

    linker: Properly remove FuncParamAttr from imported symbols
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/898

commit 082b8b08f16a79841948c75b667c807d82ff8ca8
Author: David Neto <dneto@google.com>
Date:   Thu Apr 5 18:04:27 2018 -0400

    More automatic extension support
    
    Update grammar table generation:
    - Get extensions from instructions, not just operand-kinds
    - Don't explicitly list extensions that come from the SPIR-V core
      grammar or from a KHR extended instruction set grammar.
    
    This makes it easier to support new extensions since the recommended
    extension strategy is to add instructions to the core grammar file.
    
    Also, test the validator has trivial support for passing through
    the extensions SPV_NV_shader_subgroup_partitioned and
    SPV_EXT_descriptor_indexing.

commit 43ca2112b8fb3269a78ce0b9807ca6925adc222d
Author: Lei Zhang <antiagainst@google.com>
Date:   Tue Mar 27 14:07:11 2018 -0400

    Stop asking for extensions if feature avaiable in core SPIR-V
    
    Migrating to unified grammar means we sometimes have two fields
    for a certain feature: version and extensions. It means the feature
    in question can be used either in SPIR-V of advanced-enough
    versions or in any SPIR-V with with the specified extensions.
    
    Validator now respects the above rules.

commit d7fff408e3081697e286b54b0f5535b06b361dd8
Author: Andrey Tuganov <andreyt@google.com>
Date:   Tue Apr 3 17:52:32 2018 -0400

    Fix bug validate_builtins (additional def checks)
    
    At every definition of a builtin id, run at-reference-check rules on the
    defining instruction as well.
    
    Previosly the validation was missing the case when invalid storage class
    was defined in the instruction which defines the built-in, and not in
    the instruction which references the built-in.

commit 691eed92cb6300efd2fdd71e4ec156b73e89886b
Author: Andrey Tuganov <andreyt@google.com>
Date:   Tue Apr 3 16:07:55 2018 -0400

    Fix major bug in validate_builtins
    
    Fixed an early return in the loop, resulting in only one decoration
    being checked.

commit da332cf332c795d3b21b44e76d972c6d3b16a3d9
Author: Andrey Tuganov <andreyt@google.com>
Date:   Tue Mar 27 11:13:39 2018 -0400

    Execution mode/model available in validation state
    
    Refactored validate built-ins to make
    GetExecutionModels(entry_point)
    and
    GetExecutionModes(entry_point)
    available in validation state.
    
    Entry points are allowed to have multiple execution modes and execution
    models.
    
    Finished the last missing feature in Vulkan built-ins validation:
    FragDepth requires DepthReplacing.

commit 742454968db1da529f54050bac9e6cc40d0611fb
Author: Steven Perron <stevenperron@google.com>
Date:   Wed Apr 4 10:34:46 2018 -0400

    OpName and decorations should not stop array copy prop.

commit 7c5d49bf2ac8fd0b3351eb7f8dab06b9b6c60b62
Author: Steven Perron <stevenperron@google.com>
Date:   Mon Apr 2 13:40:53 2018 -0400

    Teach ADCE about OpImageTexelPointer
    
    Currently OpImageTexelPointer operations are treat like a use of the
    pointer, but it does
    not look for the memory being referenced to make sure stores are not
    removed.
    
    This change teaches it so identify the memory being accessed, and
    treats it as if that memory is loaded.
    
    Fixes to #1445.

commit c33af632642a63584a94190cef44c8c066ff51de
Author: Steven Perron <stevenperron@google.com>
Date:   Mon Apr 2 16:13:25 2018 -0400

    Teach array copy propagation about OpImageTexelPointer.
    
    OpImageTexelPointer acts like a special kind of load.  It is not an
    array load, but it also cannot be removed the same way a regular
    load can.  The type of propagation that needs to be done is similar
    to what we do for arrays, so I want to merge that code into that
    optmization.
    
    Contributers to #1445.

commit e64a4656b35202a0084667aa44af2307a9ef93b9
Author: Steven Perron <stevenperron@google.com>
Date:   Mon Apr 2 16:24:44 2018 -0400

    Teach the private to local about OpImageTexelPointer.
    
    OpImageTexelPointer acts like a special kind of load.  It is still
    safe to change the storage class of a variable used in a
    OpImageTexalPointer instruction.
    
    Contributes to #1445.

commit efb41541c3aafdff1dfc1e7a6325a2b2035f854d
Author: Jeff Bolz <jbolz@nvidia.com>
Date:   Fri Mar 30 15:03:08 2018 -0500

    Add SPV_NV_shader_subgroup_partitioned to EXTENSIONS_FROM_SPIRV_REGISTRY

commit 57a2441791846dbbcc1ad2fcc6271a5984ec90a4
Author: Neil Roberts <nroberts@igalia.com>
Date:   Sat Mar 31 01:35:45 2018 +0200

    hex_float: Use max_digits10 for the float precision
    
    CPPreference.com has this description of digits10:
    
    “The value of std::numeric_limits<T>::digits10 is the number of
     base-10 digits that can be represented by the type T without change,
     that is, any number with this many significant decimal digits can be
     converted to a value of type T and back to decimal form, without
     change due to rounding or overflow.”
    
    This means that any number with this many digits can be represented
    accurately in the corresponding type. A change in any digit in a
    number after that may or may not cause it a different bitwise
    representation. Therefore this isn’t necessarily enough precision to
    accurately represent the value in text. Instead we need max_digits10
    which has the following description:
    
    “The value of std::numeric_limits<T>::max_digits10 is the number of
     base-10 digits that are necessary to uniquely represent all distinct
     values of the type T, such as necessary for
     serialization/deserialization to text.”
    
    The patch includes a test case in hex_float_test which tries to do a
    round-robin conversion of a number that requires more than 6 decimal
    places to be accurately represented. This would fail without the
    patch.
    
    Sadly this also breaks a bunch of other tests. Some of the tests in
    hex_float_test use ldexp and then compare it with a value which is not
    the same as the one returned by ldexp but instead is the value rounded
    to 6 decimals. Others use values that are not evenly representable as
    a binary floating fraction but then happened to generate the same
    value when rounded to 6 decimals. Where the actual value didn’t seem
    to matter these have been changed with different values that can be
    represented as a binary fraction.

commit 6dd5e955f503e2ece39a6738e8f14fb16cb398ba
Author: James Jones <jajones@nvidia.com>
Date:   Fri Mar 23 13:17:52 2018 -0700

    Add missing function parameters in libspirv.h
    
    When building C code with gcc and the
    -Wstrict-prototypes option, function declarations
    and definitions that don't specify their argument
    types generate warnings.  Functions that don't
    take parameters need to specify (void) as their
    parameter list, rather than leaving it empty.
    
    Note this only applies to C, so only the functions
    exported in C-compatible headers need fixing.  In
    C++ functions can't be declared/defined without a
    parameter list, so C++ can safely allow an empty
    parameter list to imply (void).

commit fc9f621e8bb2c1fe18d3c3d18e0fb4e0e69fecb1
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Mar 30 10:00:32 2018 -0400

    Add missing <iterator> header for std::back_inserter

commit ddbaf32460582b2b23451b225c30df3902f0afda
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Mar 28 16:42:44 2018 -0400

    Use standard SPIR-V version scheme for version requirement
    
    Previously we use symbols in spv_target_env as the minimum version
    requirements for features. That makes version check implicitly
    relies on the order of entries in the spv_target_env enum, which
    also contains client APIs. Instead, we should use the standard
    scheme for constructing SPIR-V version; and by doing that we can
    also map client API entries to universial SPIR-V versions.

commit cbceeceab44580e30ae27c58db3755b40990ea69
Author: Steven Perron <stevenperron@google.com>
Date:   Wed Mar 28 12:27:19 2018 -0400

    In copy-prop-arrays, indentify copies via OpCompositeInsert
    
    When the original code copies an entire array or struct one element at a
    time, this turns into a series of OpCompositeInsert instruction followed
    by a store of the whole array.  We currently miss opportunities in copy
    propagate arrays because we do not recognize this as a copy.
    
    This commit adds code to copy propagate arrays to identify this code
    pattern.
    
    Also updates the performance passed to run array copy propagation.

commit d8ca09821db1f1cf9ceab61300798861cad81512
Author: Steven Perron <stevenperron@google.com>
Date:   Tue Mar 27 15:23:53 2018 -0400

    Handle non-constant accesses in memory objects (copy prop arrays)
    
    The first implementation of MemroyObject, which is used in copy
    propagate arrays, forced the access chain to be like the access chains
    in OpCompositeExtract.  This excluded the possibility of the memory
    object from representing an array element that was extracted with a
    variable index.   Looking at the code, that restriction is not
    neccessary.  I also see some opportunities for doing this in some real
    shaders.
    
    Contributes to #1430.

commit ad7e4b8401f04b695f6d0bea7293e783e4ca3a52
Author: Stephen McGroarty <stephen@codeplay.com>
Date:   Wed Mar 28 14:19:55 2018 +0100

    Initial patch for scalar evolution analysis
    
    This patch adds support for the analysis of scalars in loops. It works
    by traversing the defuse chain to build a DAG of scalar operations and
    then simplifies the DAG by folding constants and grouping like terms.
    It represents induction variables as recurrent expressions with respect
    to a given loop and can simplify DAGs containing recurrent expression by
    rewritting the entire DAG to be a recurrent expression with respect to
    the same loop.

commit c26866ee741d6674e43f74f3eb779ebcf958d5bc
Author: Steven Perron <stevenperron@google.com>
Date:   Tue Mar 27 14:09:53 2018 -0400

    Preserve analyses after copy propagate arrays
    
    Contributes to #1430.

commit 0a2ee65f57726ad8f7c24420bdb7166e5b1e4ba3
Author: Alan Baker <alanbaker@google.com>
Date:   Fri Mar 23 14:18:54 2018 -0400

    Fixes #1403.
    
    Don't validate composite insert, extract and construct instructions
    against spec constant sized arrays.
    * Added predicate for spec constant opcodes
    * Added tests

commit 97c8fdccd2daf824ee030b6371ed521de0ac0496
Author: Alan Baker <alanbaker@google.com>
Date:   Fri Mar 23 10:10:10 2018 -0400

    Adding OpPhi validation rules.
    
    * Added tests
    * Fixes SSA check for unreachable phi parents
    * Fixes invalid cfg cleanup test

commit 95843d7bd0c49c1076b601893cac4b5589030d12
Author: Andrey Tuganov <andreyt@google.com>
Date:   Tue Mar 27 12:01:21 2018 -0400

    New spirv-1.3 rules for control barrier
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/1427
    
    Adjusting validation to the new rule:
    "Before version 1.3, it is only valid to use this instruction with
    TessellationControl, GLCompute, or Kernel execution models.
    There is no such restriction starting with version 1.3."
    
    Also fixed wrong version numbers in source/spirv_target_env.cpp.

commit 5e07ab1358dcb1593656b256bc49cf13905940bd
Author: Steven Perron <stevenperron@google.com>
Date:   Mon Mar 26 14:43:24 2018 -0400

    Handle more cases in copy propagate arrays.
    
    When we change the type of an object that gets stored, we do not want to
    change the type of the memory location being stored to.  In order to
    still be able to do the rewrite, we will decompose and rebuild the
    object so it is the type that can be stored.
    
    Fixes #1416.

commit c4dc04639904479f4418a86d2d1641514047bbff
Author: Steven Perron <stevenperron@google.com>
Date:   Tue Mar 20 23:33:24 2018 -0400

    Copy propagate arrays
    
    The sprir-v generated from HLSL code contain many copyies of very large
    arrays.  Not only are these time consumming, but they also cause
    problems for drivers because they require too much space.
    
    To work around this, we will implement an array copy propagation.  Note
    that we will not implement a complete array data flow analysis in order
    to implement this.  We will be looking for very simple cases:
    
    1) The source must never be stored to.
    2) The target must be stored to exactly once.
    3) The store to the target must be a store to the entire array, and be a
    copy of the entire source.
    4) All loads of the target must be dominated by the store.
    
    The hard part is keeping all of the types correct.  We do not want to
    have to do too large a search to update everything, which may not be
    possible, do we give up if we see any instruction that might be hard to
    update.
    
    Also in types.h, the element decorations are not stored in an std::map.
    This change was done so the hashing algorithm for a Struct is
    consistent.  With the std::unordered_map, the traversal order was
    non-deterministic leading to the same type getting hashed to different
    values.  See |Struct::GetExtraHashWords|.
    
    Contributes to #1416.

commit 0a8b6a96e162d1a1c57968a09f4ff22197ecc258
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Mon Mar 26 10:05:18 2018 -0400

    Replace an undefined double->float cast with infinity.
    
    This was caught by UBSan. The given double would overflow
    the underlying float, which is undefined. Instead test
    with an explicit float::infinity.

commit 9cf87ecbc8372c0bcba2cf73fbb2a1267d86eb57
Author: Andrey Tuganov <andreyt@google.com>
Date:   Fri Mar 23 16:15:03 2018 -0400

    Add Vulkan specific atomic result type restriction
    
    Atomic instructions must declare a scalar 32-bit integer type for the “Result Type”.

commit fe9121f72144f1e1657cd21a55a1fec07c940e56
Author: Andrey Tuganov <andreyt@google.com>
Date:   Wed Feb 7 11:50:26 2018 -0500

    Add Vulkan validation rules for BuiltIn variables
    
    Added a framework for validation of BuiltIn variables. The framework
    allows implementation of flexible abstract rules which are required for
    built-ins as the information (decoration, definition, reference) is not
    in one place, but is scattered all over the module.
    
    Validation rules are implemented as a map
    id -> list<functor(instrution)>
    
    Ids which are dependent on built-in types or objects receive a task
    list, such as "this id cannot be referenced from function which is
    called from entry point with execution model X; propagate this rule
    to your descendants in the global scope".
    
    Also refactored test/val/val_fixtures.
    
    All built-ins covered by tests

commit 045cc8f75b5679fa148a77801a5a9a59e3f2bc0a
Author: Eleni Maria Stea <estea@igalia.com>
Date:   Wed Mar 21 11:15:56 2018 +0200

    Fixes compile errors generated with -Wpedantic
    
    This patch fixes the compile errors generated when the options
    SPIRV_WARN_EVERYTHING and SPIRV_WERROR (that force -Wpedantic) are
    set to cmake.

commit dbb35c4260cf41a1f36bbc401c33d2524ee03e3e
Author: Steven Perron <stevenperron@google.com>
Date:   Wed Mar 21 12:52:13 2018 -0400

    Fixed remaining review comments from #1380

commit 2e644e45785bb221294c32bf02a4ac867de49dc4
Author: Diego Novillo <dnovillo@google.com>
Date:   Tue Mar 20 21:19:07 2018 -0400

    Fix VS2013 build failures.

commit 3b594e163009cb224e80155ff17971a4b2fc0cd4
Author: Jaebaek Seo <duke.acacia@gmail.com>
Date:   Wed Mar 7 09:25:51 2018 -0500

    Add --time-report to spirv-opt
    
    This patch adds a new option --time-report to spirv-opt.  For each pass
    executed by spirv-opt, the flag prints resource utilization for the pass
    (CPU time, wall time, RSS and page faults)
    
    This fixes issue #1378

commit 735d8a579ecb6c5b5d41c2a81d695b49f7bd3248
Author: Diego Novillo <dnovillo@google.com>
Date:   Thu Feb 22 16:18:29 2018 -0500

    SSA rewrite pass.
    
    This pass replaces the load/store elimination passes.  It implements the
    SSA re-writing algorithm proposed in
    
         Simple and Efficient Construction of Static Single Assignment Form.
         Braun M., Buchwald S., Hack S., Leißa R., Mallon C., Zwinkau A. (2013)
         In: Jhala R., De Bosschere K. (eds)
         Compiler Construction. CC 2013.
         Lecture Notes in Computer Science, vol 7791.
         Springer, Berlin, Heidelberg
    
         https://link.springer.com/chapter/10.1007/978-3-642-37051-9_6
    
    In contrast to common eager algorithms based on dominance and dominance
    frontier information, this algorithm works backwards from load operations.
    
    When a target variable is loaded, it queries the variable's reaching
    definition.  If the reaching definition is unknown at the current location,
    it searches backwards in the CFG, inserting Phi instructions at join points
    in the CFG along the way until it finds the desired store instruction.
    
    The algorithm avoids repeated lookups using memoization.
    
    For reducible CFGs, which are a superset of the structured CFGs in SPIRV,
    this algorithm is proven to produce minimal SSA.  That is, it inserts the
    minimal number of Phi instructions required to ensure the SSA property, but
    some Phi instructions may be dead
    (https://en.wikipedia.org/wiki/Static_single_assignment_form).

commit bdf421cf406f82366065e06d38d9e6dff2b7fcab
Author: Victor Lomuller <victor@codeplay.com>
Date:   Wed Mar 7 18:21:11 2018 +0000

    Add loop peeling utility
    
    The loop peeler util takes a loop as input and create a new one before.
    The iterator of the duplicated loop then set to accommodate the number
    of iteration required for the peeling.
    
    The loop peeling pass that decided to do the peeling and profitability
    analysis is left for a follow-up PR.

commit b3daa93b46625a8122585d508a953fce868b6ee3
Author: Steven Perron <stevenperron@google.com>
Date:   Tue Mar 6 11:20:28 2018 -0500

    Change merge return pass to handle structured cfg.
    
    We are seeing shaders that have multiple returns in a functions.  These
    functions must get inlined for legalization purposes; however, the
    inliner does not know how to inline functions that have multiple
    returns.
    
    The solution we will go with it to improve the merge return pass to
    handle structured control flow.
    
    Note that the merge return pass will assume the cfg has been cleanedup
    by dead branch elimination.
    
    Fixes #857.

commit 1ef6b192602129d112112eb2e611a27e7b3cc6e7
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Mar 14 13:06:18 2018 -0400

    Migrate to use unified grammar tables
    
    Previously we keep a separate static grammar table for opcodes/
    operands per SPIR-V version. This commit changes that to use a
    single unified static grammar table for opcodes/operands.
    
    This essentially changes how grammar facts are queried against
    a certain target environment. There are only limited filtering
    according to the desired target environment; a symbol is
    considered as available as long as:
    
    1. The target environment satisfies the minimal requirement of
       the symbol; or
    2. There is at least one extension enabling this symbol.
    
    Note that the second rule assumes the extension enabling the
    symbol is indeed requested in the SPIR-V code; checking that
    should be the validator's work.
    
    Also fixed a few grammar related issues:
    * Rounding mode capability requirements are moved to client APIs.
    * Reserved symbols not available in any extension is no longer
      recognized by assembler.

commit 844e186cf7382df84684bf6afbf5b412641d8e47
Author: David Neto <dneto@google.com>
Date:   Fri Mar 9 16:08:57 2018 -0500

    Add --strip-reflect pass
    
    Strips reflection info. This is limited to decorations and
    decoration instructions related to the SPV_GOOGLE_hlsl_functionality1
    extension.
    It will remove the OpExtension for SPV_GOOGLE_hlsl_functionality1.
    It will also remove the OpExtension for SPV_GOOGLE_decorate_string
    if there are no further remaining uses of OpDecorateStringGOOGLE.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/1398

commit 2e3aec23cac907c661bf6a0a612a653e3f76cea0
Author: David Neto <dneto@google.com>
Date:   Thu Mar 8 15:33:28 2018 -0500

    Add recent Google extensions to optimizer whitelists
    
    Optimizations should work in the presence of recent
    SPV_GOOGLE_decorate_string and SPV_GOOGLE_hlsl_functionality1
    
    SPV_GOOGLE_decorate_string:
    - Adds operation OpDecorateStringGOOGLE to decorate an object with decorations
      having string operands.
    
    SPV_GOOGLE_hlsl_functionality1:
    - Adds HlslSemanticGOOGLE, used to decorate an interface variable with
      an HLSL semantic string.  Optimizations already preserve those variables
      as required because they are interface variables (with uses), independent
      of whether they have HLSL decorations.
    
    - Adds HlslCounterBufferGOOGLE, used to associate a buffer with a
      counter variable.
    
    Fixes #1391

commit 9f3a1c85cc1fae31d51cb4041237f2a879a9feda
Author: Alan Baker <alanbaker@google.com>
Date:   Wed Mar 14 17:45:47 2018 -0400

    NFC: Speed up dead insert phi traversal on Windows.

commit 884933366ba1f7b05de38b4186d9e78210b2e974
Author: David Neto <dneto@google.com>
Date:   Tue Mar 13 13:52:53 2018 -0400

    Teach DecorationManager about OpDecorateStringGOOGLE
    
    Also add more decoration manager test coverage for OpDecorateId.
    
    Fixes #1396

commit 7e03e76a5f918c67c90f135df33c5b81ce7a7ca2
Author: Alan Baker <alanbaker@google.com>
Date:   Tue Mar 13 16:38:16 2018 -0400

    Fixes #1402. Don't merge non-branch terminators into loop header.
    
    Added tests

commit 43d1609183014b8cfb6ae1cf4b1172d3b4fd5330
Author: Alan Baker <alanbaker@google.com>
Date:   Tue Mar 13 12:02:29 2018 -0400

    Fixes #1407. Removing assertion against void pointer
    
    Added test

commit 4065adf05d6b0b6b28253ef83752f4fc8b6dfe3d
Author: Alan Baker <alanbaker@google.com>
Date:   Tue Mar 13 13:48:48 2018 -0400

    Fixes #1404. Don't DCE workgroup size
    
    Added test.

commit 077249b67f80bb6dfdb91a5aa872794299224c6d
Author: Greg Fischer <greg@lunarg.com>
Date:   Mon Mar 12 16:53:58 2018 -0600

    Fix InsertFeedingExtract rule when extract remains.

commit 5bd55f10cd17333bf0e5deec2471ab79389c0cc9
Author: Pierre Moreau <dev@pmoreau.org>
Date:   Tue Feb 20 19:19:57 2018 +0100

    Reimplement the DecorationManager
    
    This reimplementation fixes several issues when removing decorations associated
    to an ID (partially addresses #1174 and gives tools for fixing #898), as well
    as making it easier to remove groups; a few additional tests have been added.
    
    DecorationManager::RemoveDecoration() will still not delete dead decorations it
    created, but I do not think it is its job either; given the following input
    
    ```
    OpCapability Shader
    OpCapability Linkage
    OpMemoryModel Logical GLSL450
    OpDecorate %2 Restrict
    %2      = OpDecorationGroup
    OpGroupDecorate %2 %1 %3
    OpDecorate %4 Invariant
    %4      = OpDecorationGroup
    OpGroupDecorate %4 %2
    %uint   = OpTypeInt 32 0
    %1      = OpVariable %uint Uniform
    %3      = OpVariable %uint Uniform
    ```
    
    which of the following two outputs would you expect RemoveDecoration(2) to produce:
    
    ```
    OpCapability Shader
    OpCapability Linkage
    OpMemoryModel Logical GLSL450
    %uint = OpTypeInt 32 0
    %1 = OpVariable %uint Uniform
    %3 = OpVariable %uint Uniform
    ```
    
    or
    
    ```
    OpCapability Shader
    OpCapability Linkage
    OpMemoryModel Logical GLSL450
    OpDecorate %4 Invariant
    %4      = OpDecorationGroup
    %uint   = OpTypeInt 32 0
    %1      = OpVariable %uint Uniform
    %3      = OpVariable %uint Uniform
    ```
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/924
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/1174

commit 340370eddbb9f0e7d26b6a4f7e22c1b98150e5e1
Author: David Neto <dneto@google.com>
Date:   Thu Mar 8 12:17:52 2018 -0500

    Remove extension whitelist from some transforms
    
    Remove extension whitelists from transforms that are essentially
    combinatorial (and avoiding pointers) or which affect only control flow.
    It's very very unlikely an extension will add a new control flow construct.
    
    Remove from:
    - dead branch elimination
    - dead insertion elimination
    - insert extract elimination
    - block merge
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/1392

commit 314cfa29b20310b080ad0452b75c9aed1383cf33
Author: Rex Xu <rex.xu@amd.com>
Date:   Thu Mar 8 21:54:00 2018 +0800

    Add missing SPV extension strings

commit ac434668538e3f87952a253de549ec5e7fe8b996
Author: David Neto <dneto@google.com>
Date:   Wed Mar 7 17:13:18 2018 -0500

    Start v2018.3 development

commit 8d8a71278bf9e83dd0fb30d5474386d30870b74d
Author: David Neto <dneto@google.com>
Date:   Wed Mar 7 17:11:50 2018 -0500

    Finalize v2018.2

commit a0da44efbc605ea4f67ec36054f244a80d14199b
Author: David Neto <dneto@google.com>
Date:   Wed Mar 7 17:10:13 2018 -0500

    Update CHANGES

commit bc9cfee6faa67fe570312aa889596b96165a9e7f
Author: Alan Baker <alanbaker@google.com>
Date:   Wed Mar 7 12:58:10 2018 -0500

    Fixes #1385. Grab correct input to calculate indices.
    
    * Added tests to catch the bug

commit 03b8a3fe540e72794646195fe261a679203c13ac
Author: Andrey Tuganov <andreyt@google.com>
Date:   Tue Mar 6 15:44:05 2018 -0500

    AMD_gpu_shader_half_float enables float16
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/1375
    
    Hardcoded float16 feature enabling if extension
    SPV_AMD_gpu_shader_half_float is present.

commit 01f32ee001409893773219d1a0cc8e696287628e
Author: David Neto <dneto@google.com>
Date:   Thu Mar 1 16:54:09 2018 -0500

    Update README for SPIR-V 1.3

commit 00fa39318f8bef3c3a587c1fa4da086064166d16
Author: David Neto <dneto@google.com>
Date:   Fri Feb 9 14:29:02 2018 -0500

    Support SPIR-V 1.3 and Vulkan 1.1
    
    The default target is SPIR-V 1.3.
    
    For example, spirv-as will generate a SPIR-V 1.3 binary by default.
    Use command line option "--target-env spv1.0" if you want to make a SPIR-V
    1.0 binary or validate against SPIR-V 1.0 rules.
    
    Example:
            # Generate a SPIR-V 1.0 binary instead of SPIR-V 1.3
            spirv-as --target-env spv1.0 a.spvasm -o a.spv
            spirv-as --target-env vulkan1.0 a.spvasm -o a.spv
    
            # Validate as SPIR-V 1.0.
            spirv-val --target-env spv1.0 a.spv
            # Validate as Vulkan 1.0
            spirv-val --target-env vulkan1.0 a.spv

commit 5f50e6209c815e93733f4d58906b86a50ff2af32
Author: Alan Baker <alanbaker@google.com>
Date:   Mon Mar 5 15:02:34 2018 -0500

    Fixes #1376. Don't handle half folding gracefully.
    
    * Added early returns to folding rules to prevent half attempts
    * Added some tests

commit 5f69f7512695bd7b26f83ed9872be45159a46cf6
Author: David Neto <dneto@google.com>
Date:   Mon Mar 5 13:34:13 2018 -0500

    Support SPV_GOOGLE_decorate_string and SPV_GOOGLE_hlsl_functionality1
    
    This commit add assembling, disassembling, and basic validation for two
    Google extensions to better support HLSL translation.

commit 9ba50e34f26cac5e6baf19cef2b646c66f4db025
Author: Steven Perron <stevenperron@google.com>
Date:   Mon Mar 5 09:57:41 2018 -0500

    Avoid generating duplicate names when merging types
    
    The merging types we do not remove other information related to the
    types.  We simply leave it duplicated, and hope it is removed later.
    This is what happens with decorations.  They are removed in the next
    phase of remove duplicates.  However, for OpNames that is not the case.
    We end up with two different names for the same id, which does not make
    sense.
    
    The solution is to remove the names and decorations for the type being
    removed instead of rewriting them to refer to the other type.
    
    Note that it is possible that if the first type does not have a name,
    then the types will end up with no name.  That is fine because the names
    should not have any semantic significance anyway.
    
    The was identified in issue #1372, but this does not fix that issue.

commit 6cd6e5ebef0623a863ca2d8152edda75dd5001df
Author: Pierre Moreau <dev@pmoreau.org>
Date:   Fri Mar 2 22:27:26 2018 +0100

    Define Disassemble only when Effcee is used in fold_test

commit a942ff40f548cbd33dd3df11a14730ca9869af7f
Author: David Neto <dneto@google.com>
Date:   Fri Mar 2 15:24:15 2018 -0500

    Android.mk: Generate enum mappings from unified1 grammar
    
    Some tokens are only showing up in the unified1 grammar.
    So enum string mappings have to be generated from that grammar, not
    the grammar from the (deprecated) include/spirv/1.2 grammar.
    
    Example: capabilities FragmentFullyCovered, Float16ImageAMD

commit fe2192162916d4fad7e4547a6198850abaabb2cc
Author: David Neto <dneto@google.com>
Date:   Fri Mar 2 14:11:58 2018 -0500

    Start v2018.2 development

commit 6432a129f8fff3c262fc01a456aec81103b373a8
Author: David Neto <dneto@google.com>
Date:   Fri Mar 2 14:10:43 2018 -0500

    Finalize v2018.1

commit 52bceb3569fd36edc35275603ecb83a68ae81aa1
Author: Alan Baker <alanbaker@google.com>
Date:   Fri Mar 2 09:19:50 2018 -0500

    Handles more cases of redundant selects
    
    * Handles OpConstantNull and vector types
     * vector selects (except against a null) are converted to vector
     shuffles
    * Added tests

commit a7cec7843ca9f03733b453a4a22d793d215ab208
Author: David Neto <dneto@google.com>
Date:   Fri Mar 2 14:01:28 2018 -0500

    Update CHANGES

commit 824625760b7c95400205b3a0958cc2690a6aedcf
Author: Alan Baker <alanbaker@google.com>
Date:   Thu Mar 1 15:24:41 2018 -0500

    Fixes #1361. Mark all non-constant global values as varying in CCP
    
    * Also mark function parameters as varying
    * Conservatively mark assignment instructions as varying if any input is
    varying after attempting to fold
    * Added a test to catch this case

commit 8b27ba834da7347552eac56ace31e539c3c9084d
Author: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>
Date:   Wed Feb 21 23:28:45 2018 -0800

    Vulkan BuiltIn variables can't have Location/Component decorations
    
    As per Vulkan spec, BuiltIn variables can't have Location or Component
    decorations. On some drivers, these can lead to driver crashing when
    compiling the shader pipeline; for example, NVidia/AMD desktop drivers:
    https://github.com/KhronosGroup/glslang/issues/1182.
    
    This change adds validation and tests to catch this.

commit ce5941a6425e2b0f8128d02e830a9609b3f18709
Author: Alan Baker <alanbaker@google.com>
Date:   Wed Feb 28 15:23:19 2018 -0500

    Fixes #1357. Support null constants better in folding
    
    * getFloatConstantKind() now handles OpConstantNull
    * PerformOperation() now handles OpConstantNull for vectors
    * Fixed some instances where we would attempt to merge a division by 0
    * added tests

commit bdaf8d56fbe3fa22ee699e33306ffd5f77b7762f
Author: GregF <greg@LunarG.com>
Date:   Fri Feb 23 15:46:30 2018 -0700

    Opt: Add constant folding for FToI and IToF

commit 9457cabbcea2c092bdaab9c297e497045d41e81a
Author: Alan Baker <alanbaker@google.com>
Date:   Tue Feb 27 16:19:09 2018 -0500

    Fixes #1354. Do not merge integer division.
    
    * Removes merging of div with a div or mul for integers
    * Updated tests

commit 588f4fcc95b3ef926cd05b3378c8a90d3ba73f66
Author: Steven Perron <stevenperron@google.com>
Date:   Mon Feb 26 14:47:11 2018 -0500

    Add more folding rules for vector shuffle.
    
    Adds rule to fold OpVectorShuffle with constant inputs.
    
    Adds rules to fold OpCompositeExtrac being fed by an OpVectorShuffle.

commit 90e1637ce43a6f53a6961f640e5096c71a4dee76
Author: Victor Lomuller <victor@codeplay.com>
Date:   Tue Feb 27 18:34:10 2018 +0000

    Remove Function::GetBlocks pushed by accident

commit 2cb589cc14ac68c5769d3a70ce10d2917885121e
Author: Steven Perron <stevenperron@google.com>
Date:   Thu Feb 22 16:05:37 2018 -0500

    Remove uses DCEInst and call ADCE
    
    The algorithm used in DCEInst to remove dead code is very slow.  It is
    fine if you only want to remove a small number of instructions, but, if
    you need to remove a large number of instructions, then the algorithm in
    ADCE is much faster.
    
    This PR removes the calls to DCEInst in the load-store removal passes
    and adds a pass of ADCE afterwards.
    
    A number of different iterations of the order of optimization, and I
    believe this is the best I could find.
    
    The results I have on 3 sets of shaders are:
    
    Legalization:
    
    Set 1: 5.39 -> 5.01
    Set 2: 13.98 -> 8.38
    Set 3: 98.00 -> 96.26
    
    Performance passes:
    
    Set 1: 6.90 -> 5.23
    Set 2: 10.11 -> 6.62
    Set 3: 253.69 -> 253.74
    
    Size reduction passes:
    
    Set 1: 7.16 -> 7.25
    Set 2: 17.17 -> 16.81
    Set 3: 112.06 -> 107.71
    
    Note that the third set's compile time is large because of the large
    number of basic blocks, not so much because of the number of
    instructions.  That is why we don't see much gain there.

commit 0c13467161842389a5270e5a0e2a6c9e9be487a5
Author: David Neto <dneto@google.com>
Date:   Mon Feb 12 10:45:39 2018 -0500

    Consistently include latest spirv.h header file.
    
    Use indirection through latest_version_spirv.h
    
    Also, when generating enum tables, use the unified1 JSON grammar since
    it now has FragmentFullyCoveredEXT but the other JSON grammars don't.
    They are starting to fall behind.

commit 802cf053c797741008cc35bc3b2a2a926edd463d
Author: Alan Baker <alanbaker@google.com>
Date:   Fri Feb 16 16:07:33 2018 -0500

    Merge arithmetic with non-trivial constant operands
    
    Adding basis of arithmetic merging
    
    * Refactored constant collection in ConstantManager
    * New rules:
     * consecutive negates
     * negate of arithmetic op with a constant
     * consecutive muls
     * reciprocal of div
    
    * Removed IRContext::CanFoldFloatingPoint
     * replaced by Instruction::IsFloatingPointFoldingAllowed
    * Fixed some bad tests
    * added some header comments
    
    Added PerformIntegerOperation
    
    * minor fixes to constants and tests
    * fixed IntMultiplyBy1 to work with 64 bit ints
    * added tests for integer mul merging
    
    Adding test for vector integer multiply merging
    
    Adding support for merging integer add and sub through negate
    
    * Added tests
    
    Adding rules to merge mult with preceding divide
    
    * Has a couple tests, but needs more
    * Added more comments
    
    Fixed bug in integer division folding
    
    * Will no longer merge through integer division if there would be a
    remainder in the division
    * Added a bunch more tests
    
    Adding rules to merge divide and multiply through divide
    
    * Improved comments
    * Added tests
    
    Adding rules to handle mul or div of a negation
    
    * Added tests
    
    Changes for review
    
    * Early exit if no constants are involved in more functions
    * fixed some comments
    * removed unused declaration
    * clarified some logic
    
    Adding new rules for add and subtract
    
    * Fold adds of adds, subtracts or negates
    * Fold subtracts of adds, subtracts or negates
    * Added tests

commit 20b8cdb7c6e24e66650e204d28423e11fb0f2de5
Author: Stephen McGroarty <stephen@codeplay.com>
Date:   Tue Feb 27 14:22:59 2018 +0000

    Make IR builder use the type manager for constants
    
    This change makes the IR builder use the type manager to generate
    OpTypeInts when creating OpConstants. This avoids dangling references
    being stored by the created OpConstants.

commit 9394272c98e06b199c10395d647868c0a1042363
Author: Pierre Moreau <dev@pmoreau.org>
Date:   Wed Feb 14 19:12:05 2018 +0100

    linker: merge debug annotations from category c)
    
    Fixes: https://github.com/KhronosGroup/SPIRV-Tools/issues/1218

commit bdd6617faae5f9fa962ad73d36b70223c1dcf682
Author: Pierre Moreau <dev@pmoreau.org>
Date:   Tue Feb 13 22:47:15 2018 +0100

    linker: Allow modules to be partially linked
    
    Fixes: https://github.com/KhronosGroup/SPIRV-Tools/issues/1144

commit 64298bfd15ab1aa59328f3ffdccc861cbfc35ea7
Author: Pierre Moreau <dev@pmoreau.org>
Date:   Tue Feb 13 22:04:50 2018 +0100

    tools/linker: Allow setting --verify-ids on the command line

commit b08b94ec0a71939f55ec483ab50a5e3b8a07a7dd
Author: David Neto <dneto@google.com>
Date:   Tue Feb 27 11:48:40 2018 -0500

    Update CHANGES

commit 3497a94460ebd865c9d08483cdffac1fcde0c528
Author: Victor Lomuller <victor@codeplay.com>
Date:   Mon Feb 12 21:42:15 2018 +0000

    Add loop unswitch pass.
    
    It moves all conditional branching and switch whose conditions are loop
    invariant and uniform. Before performing the loop unswitch we check that
    the loop does not contain any instruction that would prevent it
    (barriers, group instructions etc.).

commit e354984b09624c7fa2200e40555c98ca1a8fa5c6
Author: Stephen McGroarty <stephen@codeplay.com>
Date:   Tue Feb 27 11:50:08 2018 +0000

    Unroller support for multiple induction variables
    
    Support for multiple induction variables within a loop and support for
    loop condition operands <= and >=.

commit 94af58a350b46f85422699e27ccbf22bf453149f
Author: Steven Perron <stevenperron@google.com>
Date:   Thu Feb 22 12:23:21 2018 -0500

    Clean up variables before sroa
    
    In some shaders there are a lot of very large and deeply nested
    structures.  This creates a lot of work for scalar replacement.  Also,
    since commit ca4457b we have been very aggressive as rewriting
    variables.  This has causes a large increase in compile time in creating
    and then deleting the instructions.
    
    To help low the costs, I want to run a cleanup of some of the easy loads
    and stores to remove.  This reduces the number of symbols sroa has to
    work on.  It also reduces the amount of code the simplifier has to
    simplify because it was not generated by sroa.
    
    To confirm the improvement, I ran numbers on three different sets of
    shaders:
    
    Time to run --legalize-hlsl:
    
    Set #1: 55.89s -> 12.0s
    Set #2: 1m44s -> 1m40.5s
    Set #3: 6.8s -> 5.7s
    
    Time to run -O
    
    Set #1: 18.8s -> 10.9s
    Set #2: 5m44s -> 4m17s
    Set #3: 7.8s -> 7.8s
    
    Contributes to #1328.

commit 3f19c2031a8684dce8d28de770d1a7e44c30c0b1
Author: Steven Perron <stevenperron@google.com>
Date:   Wed Feb 21 14:35:10 2018 -0500

    Preserve analysies in the simplification pass
    
    Fixes a bug at the same time.  In `UpdateDefUse`, if the definition
    already exists, we are not suppose to analyse it again.  When you do
    the entries for the definition are deleted, and we don't want that.
    The check for this was wrong.

commit 432dc40412d2f557e4c49867c9481adf7679d496
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Feb 22 15:16:01 2018 -0500

    Appveyor: remove VS2015 configuration to reduce build time
    
    We already have VS2013 and VS2017, which should be good guards.

commit 46a9ec9d2312bc8f2a87810614d06c721ea3121c
Author: GregF <greg@LunarG.com>
Date:   Wed Feb 21 16:43:33 2018 -0700

    Opt: Check for side-effects in DCEInst()
    
    This function now checks for side-effects before adding operand
    instructions to the dead instruction work list.
    
    Because this fix puts more pressure on IsCombinatorInstruction() to
    be correct, this commit adds all OpConstant* and OpType* instructions
    to combinator_ops_ set.
    
    Fixes #1341.

commit 01760d2f0f6422b330ea99dd67da72230ef2bbd7
Author: Alan Baker <alanbaker@google.com>
Date:   Wed Feb 21 08:51:21 2018 -0500

    Fixes #1338. Handle OpConstantNull in branch/switch conditions
    
    * No longer assume the branch/switch condition must be bool or int
    constants (respectively)
    * Added a couple unit tests for each case

commit 51ecc7318f7aea8472cf49be768eac7f3236eeaa
Author: Steven Perron <stevenperron@google.com>
Date:   Tue Feb 20 11:24:08 2018 -0500

    Reduce instruction create and deletion during inlining.
    
    When inlining a function call the instructions in the same basic block
    as the call get cloned.  The clone is added to the set of new blocks
    containing the inlined code, and the original instructions are deleted.
    
    This PR will change this so that we simply move the instructions to the
    new blocks.  This saves on the creation and deletion of the
    instructions.
    
    Contributes to #1328.

commit c1b936637e55e76d7e6bb398e11fe71d0b0ede74
Author: Steven Perron <stevenperron@google.com>
Date:   Tue Feb 20 18:24:06 2018 -0500

    Add Insert-extract elimination back into legalization passes.
    
    Fixes #1326.

commit 309be423cc469624cdbddb5fe6e4ceb1dfd1adca
Author: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>
Date:   Sat Feb 17 11:55:54 2018 -0800

    Add folding for redundant add/sub/mul/div/mix operations
    
    This change implements instruction folding for arithmetic operations
    that are redundant, specifically:
    
      x + 0 = 0 + x = x
      x - 0 = x
      0 - x = -x
      x * 0 = 0 * x = 0
      x * 1 = 1 * x = x
      0 / x = 0
      x / 1 = x
      mix(a, b, 0) = a
      mix(a, b, 1) = b
    
    Cache ExtInst import id in feature manager
    
    This allows us to avoid string lookups during optimization; for now we
    just cache GLSL std450 import id but I can imagine caching more sets as
    they become utilized by the optimizer.
    
    Add tests for add/sub/mul/div/mix folding
    
    The tests cover scalar float/double cases, and some vector cases.
    
    Since most of the code for floating point folding is shared, the tests
    for vector folding are not as exhaustive as scalar.
    
    To test sub->negate folding I had to implement a custom fixture.

commit fa3ac3cc335ede09ef57716de74f5ab84d3aef19
Author: Steven Perron <stevenperron@google.com>
Date:   Tue Feb 20 18:20:19 2018 -0500

    Revert "Preserve analysies in the simplification pass"
    
    This reverts commit ec3bbf093e686964d464e3a7c70e691d98ed82c1.

commit ec3bbf093e686964d464e3a7c70e691d98ed82c1
Author: Steven Perron <stevenperron@google.com>
Date:   Tue Feb 20 11:46:57 2018 -0500

    Preserve analysies in the simplification pass
    
    Building the def-use chains is very expensive, so we do not want to
    invalidate them it if is not necessary.  At the moment, it seems like
    most optimizatoins are good at not invalidating the def-use chains, but
    simplification does.
    
    This PR get the simlification pass to keep the analysies valid.
    
    Contributes to #1328.

commit 6c75050136a2657dac4501ca16d447852fc69e5f
Author: Diego Novillo <dnovillo@google.com>
Date:   Fri Feb 16 19:12:50 2018 -0500

    Speed up Phi insertion.
    
    On some shader code we have in our testsuite, Phi insertion is showing
    massive compile time slowdowns, particularly during destruction.  The
    specific shader I was looking at has about 600 variables to keep track
    of and around 3200 basic blocks.  The algorithm is currently O(var x
    blocks), which means maps with around 2M entries.  This was taking about
    8 minutes of compile time.
    
    This patch changes the tracking of stored variables to be more sparse.
    Instead of having every basic block contain all the tracked variables in
    the map, they now have only the variables actually stored in that block.
    
    This speeds up deallocation, which brings down compile time to about
    1m20s.
    
    Note that this is not the definite fix for this.  I will re-write Phi
    insertion to use a standard SSA rewriting algorithm
    (https://github.com/KhronosGroup/SPIRV-Tools/issues/893).
    
    This contributes to
    https://github.com/KhronosGroup/SPIRV-Tools/issues/1328.

commit ac9ab0dacf0d27529854f1844ccf63bae5615491
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Feb 14 11:13:34 2018 -0500

    Travis: require MacOS to build and test again

commit 9d95a91a9f3199e190c57a2e279b56dbddfc6518
Author: Steven Perron <stevenperron@google.com>
Date:   Sun Feb 18 20:58:05 2018 -0500

    Fix folding insert feeding extract
    
    I mixed up two cases when folding an OpCompositeExtract that is feed by
    and OpCompositeInsert.  The specific cases are demonstracted in the new
    test.  I mixed up the conditions for the cases, and treated one like the
    other.
    
    Fixes #1323.

commit c3f34d8bf3532040592a8bbb7f8079bcb7ae4c6b
Author: Alan Baker <alanbaker@google.com>
Date:   Wed Feb 14 16:56:43 2018 -0500

    Fixes #1300. Adding checks for bad CCP transitions and unsettled values
    
    * Now track propagation status and assert on bad statuses
     * Added helper methods to access instruction propagation status
    * Modified the phi meet operator to properly reflect the paper it is
    based on
    * Modified SSA edge addition so that all edge are added, but only on
    state changes
    * Fixed a bug in instruction simulation where interesting conditional
    branches would not mark the interesting edge as executed
     * Added a test to catch this bug
    * Added an ostream operator for SSAPropagator::PropStatus

commit e543b195dfe34ae99f9dec146cf8e17c2278e553
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Fri Feb 16 10:19:36 2018 -0500

    Removed warnings from hex_float.h
    
    Bitcasting FloatProxy<->uint_type was hitting a warning
    with g++8.0.1. Replace bitcasts with new casting traits for FloatProxy.

commit 04cd63e5b9c81b39906692cc635acfa2f4e1729f
Author: Steven Perron <stevenperron@google.com>
Date:   Thu Feb 15 12:14:39 2018 -0500

    Make better use of simplification pass
    
    The simplification pass works better after all of the dead branches are
    removed.  So swapping them around in the legalization passes.  Also
    adding the simplification pass to performance passes right after dead
    branch elimination.
    
    Added CCP to the legalization passes so we can propagate the constants
    into the branchs, and remove as many branches a possible.  CCP is
    designed to still get opportunities even if the branches are dead, so it
    is a good place for it.
    
    Fixes #1118

commit 105441360043248e91ec1c8b981f9541dab11083
Author: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>
Date:   Wed Feb 14 22:13:25 2018 -0800

    Add constant folding rules for floating-point comparison
    
    This change handles all 6 regular comparison types in two variations,
    ordered (true if values are ordered *and* comparison is true) and
    unordered (true if values are unordered *or* comparison is true).
    
    Ordered comparison matches the default floating-point behavior on host
    but we use std::isnan to check ordering explicitly anyway.
    
    This change also slightly reworks the floating-point folding support
    code to make it possible to define a folding operation that returns
    boolean instead of floating point.
    
    These tests exhaustively test ordered/unordered comparisons for
    float/double.
    
    Since for NaN inputs the comparison result doesn't depend on the
    comparison function, we just test == and !=; NaN inputs result in true
    unordered comparisons and false ordered comparisons.

commit 27d23a92a0e893aa60d9e93bc7a02204493cf70d
Author: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>
Date:   Thu Feb 15 12:27:38 2018 -0800

    Remove constants from constant manager in KillInst
    
    Registering a constant in constant manager establishes a relation
    between instruction that defined it and constant object. On complex
    shaders this could result in the constant definition getting removed as
    part of one of the DCE pass, and a subsequent simplification pass trying
    to use the defining instruction for the constant.
    
    To fix this, we now remove associated constant entries from constant
    manager when killing constant instructions; the constant object is still
    registered and can be remapped to a new instruction later.
    
    GetDefiningInstruction shouldn't ever return nullptr after this change
    so add an assertion to check for that.

commit 50f307f88978180add62087ebc5172cf739f647d
Author: Steven Perron <stevenperron@google.com>
Date:   Tue Feb 13 21:08:43 2018 -0500

    Simplify OpPhi instructions referencing unreachable continues
    
    In dead branch elimination, we already recognize unreachable continue
    blocks, and update OpPhi instruction accordingly.  This change adds an
    extra check: if the head block has exactly 1 other incoming edge, then
    replace the OpPhi with the value from that edge.
    
    Fixes #1314.

commit 3756b387f3c5c5e56d3c0d5983082f294f652eb0
Author: Steven Perron <stevenperron@google.com>
Date:   Thu Feb 15 10:41:01 2018 -0500

    Get CCP to use the constant floating point rules.
    
    Fixes #1311

commit efe286cd326e80f4a0a0a826cbf6be3be9814894
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Feb 15 19:40:47 2018 -0500

    SubgroupBallotKHR can enable SubgroupSize & SubgroupLocalInvocationId

commit 5d442fad2f00fcca8354aaaa9bfd36be8c418a1b
Author: Nerijus Baliūnas <nerijus@users.sourceforge.net>
Date:   Wed Feb 14 21:06:53 2018 +0200

    fix typo

commit d2c0fce361f6e32e4ba9ad29abcaa9d55eb0257c
Author: David Neto <dneto@google.com>
Date:   Wed Feb 14 18:27:22 2018 -0500

    Invoke cmake via CMAKE_COMMAND variable
    
    Need to do this in case cmake is not on the path.
    This should fix the Android NDK build, as in when building the NDK
    itself.

commit f3a10470d3426286d44ac471f45cd0a51be3e51c
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Feb 15 10:19:15 2018 -0500

    Avoid using static unordered_map (#1304)
    
    unordered_map is not POD. Using it as static may cause problems
    when operator new() and operator delete() is customized.
    
    Also changed some function signatures to use const char* instead
    of std::string, which will give caller the flexibility to avoid
    creating a std::string.

commit 32a8e04c7dd4dc7139d73b8e1081fd81e08cc66f
Author: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>
Date:   Wed Feb 14 20:45:36 2018 -0800

    Add folding of redundant OpSelect insns
    
    We can fold OpSelect into one of the operands in two cases:
    
    - condition is constant
    - both results are the same
    
    Even if the original shader doesn't have either of these, if-conversion
    pass sometimes ends up generating instructions like
    
       %7127 = OpSelect %int %3220 %7058 %7058
    
    And this optimization cleans them up.

commit 0e9f2f948a50c02c1675765c6f847cb64139305a
Author: Steven Perron <stevenperron@google.com>
Date:   Mon Feb 12 23:28:38 2018 -0500

    Add id to name map
    
    Adding a map from an id to it set of OpName and OpMemberName
    instructions.  This will be used in KillNameAndDecorates to kill the
    names for the ids that are being removed.
    
    In my test, the compile time for 50 shaders went from 1m57s to 55s.
    This was on linux using the release build.
    
    Fixes #1290.

commit 6669d8163dca26db521dfea477fd8589c47fb4c8
Author: Steven Perron <stevenperron@google.com>
Date:   Fri Feb 9 13:37:26 2018 -0500

    Fold binary floating point operators.
    
    Adds the floating rules for FAdd, FDiv, FMul, and FSub.
    
    Contributes to #1164.

commit dd8400e15077e640043b096d7634976d72fe2f8a
Author: Stephen McGroarty <stephen@codeplay.com>
Date:   Wed Feb 14 17:03:12 2018 +0000

    Initial support for loop unrolling.
    
    This patch adds initial support for loop unrolling in the form of a
    series of utility classes which perform the unrolling. The pass can
    be run with the command spirv-opt --loop-unroll. This will unroll
    loops within the module which have the unroll hint set. The unroller
    imposes a number of requirements on the loops it can unroll. These are
    documented in the comments for the LoopUtils::CanPerformUnroll method in
    loop_utils.h. Some of the restrictions will be lifted in future patches.

commit 229ebc06657c1c2186d2ec3dc0add54d82d93c98
Author: Alan Baker <alanbaker@google.com>
Date:   Wed Feb 14 09:39:11 2018 -0500

    Fixes #1295. Mark undef values as varying in ccp.
    
    * Undef now marked as varying in ccp
     * this prevents incorrect meet operations since phis were always not
     interesting
    * added a test to catch the bug

commit 08699920ad473913702948d6191897f21f96f197
Author: Diego Novillo <dnovillo@google.com>
Date:   Mon Feb 12 13:21:48 2018 -0500

    Cleanup.  Use proper #include guard.  NFC.

commit 06b437dedc86e0ac47ad34e3cd3e2e6ae174617a
Author: Steven Perron <stevenperron@google.com>
Date:   Fri Feb 9 20:33:06 2018 -0500

    Avoid using the def-use manager during inlining.
    
    There seems to only be a single location where the def-use manager is
    used.  It is to get information about a type.  We can do that with the
    type manager instead.
    
    Fixes #1285

commit 70bf3514e8316e5bb96a6f90492f9cfb475dfe0c
Author: Arseny Kapoulkine <arseny.kapoulkine@gmail.com>
Date:   Fri Feb 9 17:57:29 2018 -0800

    Fix spirv.h include to rely on include paths
    
    This is important when SPIRV-Headers are not checked out to external/
    folder and mirrors other places in the code where spirv.h is included.

commit 1d7b1423f939027da9a9524765a36fa71be265cd
Author: Steven Perron <stevenperron@google.com>
Date:   Thu Feb 8 10:59:03 2018 -0500

    Add folding of OpCompositeExtract and OpConstantComposite constant instructions.
    
    Create files for constant folding rules.
    
    Add the rules for OpConstantComposite and OpCompositeExtract.

commit 886859159e4a7854cc24cc47de7a03085641acd5
Author: David Neto <dneto@google.com>
Date:   Thu Feb 8 12:05:40 2018 -0500

    Fix generation of Vim syntax file

commit 4e4a254bc85ea41af93a048f1713ef27e04c01ab
Author: Józef Kucia <joseph.kucia@gmail.com>
Date:   Fri Feb 9 12:30:08 2018 +0100

    Do not hardcode libdir and includedir in pkg config files

commit 1a849ffb60b0c87da9a8aac8d4aa02ee8c03df2b
Author: Steven Perron <stevenperron@google.com>
Date:   Thu Feb 8 11:03:48 2018 -0500

    Add header files missing from CMakeLists.txt

commit 84ccd0b9ae1c4008bb3a36c527827fcabb354468
Author: Alexander Johnston <alexander@codeplay.com>
Date:   Mon Jan 29 10:39:55 2018 +0000

    Loop invariant code motion initial implementation

commit ca4457b4b6e20f8f37731a3cf086e963fa52ff31
Author: GregF <greg@LunarG.com>
Date:   Tue Feb 6 19:54:58 2018 -0700

    SROA: Do replacement on structs with no partial references.

commit 06cdb96984a347af5a670dc6b8bfc6533526eb11
Author: Steven Perron <stevenperron@google.com>
Date:   Fri Feb 2 11:55:05 2018 -0500

    Make use of the instruction folder.
    
    Implementation of the simplification pass.
    
    - Create pass that calls the instruction folder on each instruction and
      propagate instructions that fold to a copy.  This will do copy
      propagation as well.
    
    - Did not use the propagator engine because I want to modify the instruction
      as we go along.
    
    - Change folding to not allocate new instructions, but make changes in
      place.  This change had a big impact on compile time.
    
    - Add simplification pass to the legalization passes in place of
      insert-extract elimination.
    
    - Added test cases for new folding rules.
    
    - Added tests for the simplification pass
    
    - Added a method to the CFG to apply a function to the basic blocks in
      reverse post order.
    
    Contributes to #1164.

commit a61e4c13562ae65663eaa5d3b7539b80d9822084
Author: Andrey Tuganov <andreyt@google.com>
Date:   Tue Feb 6 15:25:03 2018 -0500

    Disable check which fails Vulkan CTS

commit 2f0c3aaa119960a38309598e7b77905d4e38d046
Author: Andrey Tuganov <andreyt@google.com>
Date:   Tue Feb 6 12:10:11 2018 -0500

    Add Vulkan-specific validation rules for atomics
    
    Added atomic instructions validation rules from
    https://www.khronos.org/registry/vulkan/specs/1.0/html/vkspec.html#spirvenv-module-validation

commit 30138975561d568010e39960401cccd815f55edd
Author: Józef Kucia <joseph.kucia@gmail.com>
Date:   Fri Feb 2 23:37:14 2018 +0100

    Build SPIRV-Tools as shared library
    
    Add pkg-config file for shared libraries
    
    Properly build SPIRV-Tools DLL
    
    Test C interface with shared library
    
    Set PATH to shared library file for c_interface_shared test
    
    Otherwise, the test won't find SPIRV-Tools-shared.dll.
    
    Do not use private functions when testing with shared library
    
    Make all symbols hidden by default for shared library target

commit b1c9c4e8c0f41c4f76e2e1c6f938982b03bd35ee
Author: David Neto <dneto@google.com>
Date:   Tue Feb 6 08:13:39 2018 -0800

    Enable Visual Studio 2013 again
    
    Disable use of Effcee and RE2 with MSVC compilers older than Visual
    Studio 2015 since RE2 doesn't support them.

commit e7fafdaa68a3775be5f2406e91db4b5d3fbc7b35
Author: David Neto <dneto@google.com>
Date:   Tue Feb 6 12:06:26 2018 -0500

    Fix test inclusion when Effcee is absent

commit c452bfd0542ff3033715f9e2895d093bf784cf5c
Author: David Neto <dneto@google.com>
Date:   Tue Feb 6 11:47:44 2018 -0500

    Update CHANGES

commit 871022772e865f314696d04b7180c3aca3e46590
Author: Alan Baker <alanbaker@google.com>
Date:   Mon Feb 5 09:47:05 2018 -0500

    Registering a type now rebuilds it out of memory owned by the manager.
    
    * Added TypeManager::RebuildType
     * rebuilds the type and its constituent types in terms of memory owned
     by the manager.
     * Used by TypeManager::RegisterType to properly allocate memory
    * Adding an unit test to expose the issue
    * Added some tests to provide coverage of RebuildType
    * Added an accessor to the target pointer for a forward pointer

commit 860b2ee5fc85021d813f0d5f2ce3981c68c3b197
Author: GregF <greg@LunarG.com>
Date:   Fri Feb 2 16:57:39 2018 -0700

    ADCE: Fix combinator initialization
    
    The combinator initialization was only looking at the capabilities
    in the shader and not the inferred capabilities. Geometry and tessellation
    shaders were not setting the Shader capability which is inferred. So the
    combinator set was not initialized correctly causing problems for ADCE.

commit 9e19fc0f31ceaf1f6bc907dbf17dcfded85f2ce8
Author: David Neto <dneto@ad.corp.google.com>
Date:   Mon Feb 5 07:56:45 2018 -0800

    VS2013: LoopDescriptor LoopContainerType can't contain unique_ptr
    
    The loop descriptor must explicitly manage the storage for contained
    Loop objects.
    
    Fixes #1262

commit 12e6860d073bfa5a88f7925b58d52450811144a5
Author: Andrey Tuganov <andreyt@google.com>
Date:   Wed Jan 31 16:29:54 2018 -0500

    Add barrier instructions validation pass

commit 3ef4bb600f2ac09fda73671617e7793b5891afea
Author: David Neto <dneto@google.com>
Date:   Fri Feb 2 10:28:52 2018 -0500

    Avoid vector copies in range-for loops in opt/types.cpp
    
    Also be more explicit about iterated types in other range-for loops.

commit 87f9cfaba3b6d98d6431e1abd630ca10e17ab688
Author: David Neto <dneto@ad.corp.google.com>
Date:   Fri Feb 2 14:17:42 2018 -0800

    Disambiguate between const and nonconst ForEachSuccessorLabel
    
    This helps VisualStudio 2013 compile the code.
    
    Contributes to #1262

commit bc1ec9418b89c996de85d68d28d070e6b2991a48
Author: Steven Perron <stevenperron@google.com>
Date:   Wed Jan 24 13:26:33 2018 -0500

    Add general folding infrastructure.
    
    Create the folding engine that will
    
    1) attempt to fold an instruction.
    2) iterates on the folding so small folding rules can be easily combined.
    3) insert new instructions when needed.
    
    I've added the minimum number of rules needed to test the features above.

commit 1c0056c339227ca9e337ce3d2f5b83b1f8ccb1e5
Author: David Neto <dneto@google.com>
Date:   Fri Feb 2 11:27:07 2018 -0500

    Start v2018.1-dev

commit c430a41ae32c24bfc0ea87aac1bb19526caafb4e
Author: David Neto <dneto@google.com>
Date:   Fri Feb 2 11:25:58 2018 -0500

    Finalize v2018.0

commit bcd4f23930e42be377fcaedb8c03fa4977f5cd0a
Author: David Neto <dneto@google.com>
Date:   Fri Feb 2 11:23:33 2018 -0500

    Update CHANGES

commit abe113219e2487fd5a648c7054786a49126b06f9
Author: Alan Baker <alanbaker@google.com>
Date:   Wed Jan 31 10:40:33 2018 -0500

    Reordering performance passes ordering to produce better opts
    
    * Moved initial insert/extract passes later to cover more opportunities
    * Added an extra set of passes to clean up opportunities exposed later
    in the pipeline

commit 50e85c865ca9c4b53e2724f36a84fb2566c1ce97
Author: Victor Lomuller <victor@codeplay.com>
Date:   Fri Jan 26 12:07:10 2018 +0000

    Add LoopUtils class to gather some loop transformation support.
    
    This patch adds LoopUtils class to handle some loop related transformations. For now it has 2 transformations that simplifies other transformations such as loop unroll or unswitch:
     - Dedicate exit blocks: this ensure that all exit basic block
       (out-of-loop basic blocks that have a predecessor in the loop)
       have all their predecessors in the loop;
     - Loop Closed SSA (LCSSA): this ensure that all definitions in a loop are used inside the loop
       or in a phi instruction in an exit basic block.
    
    It also adds the following capabilities:
     - Loop::IsLCSSA to test if the loop is in a LCSSA form
     - Loop::GetOrCreatePreHeaderBlock that can build a loop preheader if required;
     - New methods to allow on the fly updates of the loop descriptors.
     - New methods to allow on the fly updates of the CFG analysis.
     - Instruction::SetOperand to allow expression of the index relative to Instruction::NumOperands (to be compatible with the index returned by DefUseManager::ForEachUse)

commit 61d8c0384b8400e5a88febb457611d22e36a76c8
Author: Steven Perron <stevenperron@google.com>
Date:   Tue Jan 30 11:24:03 2018 -0500

    Add pass to reaplce invalid opcodes
    
    Creates a pass that will remove instructions that are invalid for the
    current shader stage.  For the instruction to be considered for replacement
    
    1) The opcode must be valid for a shader modules.
    2) The opcode must be invalid for the current shader stage.
    3) All entry points to the module must be for the same shader stage.
    4) The function containing the instruction must be reachable from an entry point.
    
    Fixes #1247.

commit d37869c8424582f84c0d4f38708751307ec1d67f
Author: Andrey Tuganov <andreyt@google.com>
Date:   Tue Jan 9 10:58:22 2018 -0500

    Added OpenCL ExtInst validation rules

commit cd68f2b17642a76ed8f76b233ffce76f777be55a
Author: Jeremy Hayes <jeremy@lunarg.com>
Date:   Thu Jan 25 16:32:01 2018 -0700

    Add adjacency validation pass
    
    Validate OpPhi predecessors.
    Validate OpLoopMerge successors.
    Validate OpSelectionMerge successors.
    Fix collateral damage to existing tests.
    Remove ValidateIdWithMessage.OpSampledImageUsedInOpPhiBad.

commit 905536c5195bf311a55b8e8d22757cdb31502660
Author: Andrey Tuganov <andreyt@google.com>
Date:   Wed Jan 31 16:59:55 2018 -0500

    Fixed harmless uninit var warning

commit ac537c71a89aded1fd214837b3a33268d6a5a7fd
Author: David Neto <dneto@google.com>
Date:   Tue Jan 23 17:50:54 2018 +0800

    Use SPIR-V headers from "unified1" directory

commit 2735e0851e8344c859757004d11999d67efa2366
Author: Alan Baker <alanbaker@google.com>
Date:   Tue Jan 30 16:43:55 2018 -0500

    Remove constexpr from Analysis operators
    
    * Had to remove templating from InstructionBuilder as a result
     * now preserved analyses are specified as a constructor argument
    * updated tests and uses
    * changed static_assert to a runtime assert
     * this should probably get further changes in the future

commit 0aa0ac52f773797a9bdf4b1b403757a68949de95
Author: GregF <greg@LunarG.com>
Date:   Tue Jan 30 18:13:30 2018 -0700

    Opt: Add ScalarReplacement to RegisterSizePasses

commit 44d88c8d9cac8dd11c8ea788383a040ef97c0779
Author: Andrey Tuganov <andreyt@google.com>
Date:   Thu Jan 25 13:39:43 2018 -0500

    Add memory semantics checks to validate atomics

commit 38f297c194f5eccc45c540362ebbdde11beeeee5
Author: David Neto <dneto@google.com>
Date:   Tue Jan 30 17:47:00 2018 -0500

    Update CHANGES

commit 16949236fe58d291cdc4c1197eae33401fabeb23
Author: Alan Baker <alanbaker@google.com>
Date:   Tue Jan 30 15:00:27 2018 -0500

    Prevent unnecessary changes to the IR in dead branch elim
    
    * When handling unreachable merges and continues, do not optimize to the
    same IR
     * pass did not check whether the unreachable blocks were in the
     optimized form before transforming them
    * added a test to catch this issue

commit c86cb76a226809554491a34534920508518d0deb
Author: Andrey Tuganov <andreyt@google.com>
Date:   Fri Jan 26 11:29:15 2018 -0500

    Improved error message in val capabilities

commit e661da7941e12cbc6a9100bd8cadbc0d61dd8b7a
Author: Alan Baker <alanbaker@google.com>
Date:   Thu Jan 25 14:40:06 2018 -0800

    Enhancements to block merging
    
    * Should handle all possibilities
     * Stricter checks for what is disallowed:
      * header and header
      * merge and merge
     * Allow header and merge blocks to be merged
      * Erases the structured control declaration if merging header and
        merge blocks together.

commit 6704233d399be6b9547fd5635348589d1a20ff8d
Author: Alan Baker <alanbaker@google.com>
Date:   Tue Jan 30 10:15:43 2018 -0500

    Fix dereference of possibly nullptr
    
    * If the dead branch elim is performed on a module without structured
    control flow, the OpSelectionMerge may not be present
     * Add a check for pointer validity before dereferencing
    * Added a test to catch the bug

commit f28b1061736a7034f66389f74408ce4955767a43
Author: GregF <greg@LunarG.com>
Date:   Fri Jan 26 17:05:33 2018 -0700

    InsertExtractElim: Split out DeadInsertElim as separate pass

commit 1b46f7ecad32f99e0b28702505a192d7bf680bd7
Author: Alan Baker <alanbaker@google.com>
Date:   Thu Jan 25 10:45:21 2018 -0800

    Fixes in CCP for #1228
    
    * Forces traversal of phis if the def has changed to varying
    * Mark a phi as varying if all incoming values are varying
    * added a test to catch the bug

commit 6018de81de5114e906a0098ac04a7cbc95aff500
Author: Victor Lomuller <victor@codeplay.com>
Date:   Thu Jan 25 10:33:06 2018 +0000

    Add LoopDescriptor as an IRContext analysis.
    
    Move some function definitions from header to source to avoid circular definition.

commit 684997eb7233fd6ad1a6ab52216f2a973003dd70
Author: Greg Fischer <greg@lunarg.com>
Date:   Thu Jan 11 16:23:58 2018 -0700

    DeadInsertElim: Detect and DCE dead Inserts
    
    This adds Dead Insert Elimination to the end of the
    --eliminate-insert-extract pass. See the new tests for examples of code
    that will benefit.
    
    Essentially, this removes OpCompositeInsert instructions which are not
    used, either because there is no instruction which uses the value at the
    index it is inserted, or because a subsequent insert intercepts any such
    use.
    
    This code has been seen to remove significant amounts of dead code from
    real-life HLSL shaders being ported to Vulkan. In fact, it is needed to
    remove dead texture samples which cause Vulkan validation layer errors
    (unbound textures and samplers) if not removed . Such DCE is thus
    required for fxc equivalence and legalization.
    
    This analysis operates across "chains" of Inserts which can also contain
    Phi instructions.

commit 2e93e806e454e2cfefabf217320038188c6c1fb6
Author: Alan Baker <alanbaker@google.com>
Date:   Tue Jan 16 11:15:06 2018 -0500

    Initial implementation of if conversion
    
    * Handles simple cases only
    * Identifies phis in blocks with two predecessors and attempts to
    convert the phi to an select
     * does not perform code motion currently so the converted values must
     dominate the join point (e.g. can't be defined in the branches)
     * limited for now to two predecessors, but can be extended to handle
     more cases
    * Adding if conversion to -O and -Os

commit b2eb8404689a38dfeeb3aad51715bec4b9faf6f2
Author: Andrey Tuganov <andreyt@google.com>
Date:   Wed Jan 24 12:48:55 2018 -0500

    Validator: restricted some atomic ops for shaders
    
    Ban floating point case for OpAtomicLoad, OpAtomicExchange,
    OpAtomicCompareExchange. In graphics (Shader) environments, these
    instructions only operate on scalar integers. Ban the floating point
    case. OpenCL supports atomic_float.

commit bdc78377bca30fb308d38277eb72eb3ffaa287b0
Author: Andrey Tuganov <andreyt@google.com>
Date:   Tue Jan 23 15:02:27 2018 -0500

    Added Vulkan-specifc checks to image validation
    
    Implemented Vulkan-specific rules:
    - OpTypeImage must declare a scalar 32-bit float or 32-bit integer type
    for the “Sampled Type”.
    - OpSampledImage must only consume an “Image” operand whose type has its
    “Sampled” operand set to 1.

commit c4835e1bd8f179f141b116725430a3b34b002667
Author: Steven Perron <stevenperron@google.com>
Date:   Mon Jan 22 14:48:43 2018 -0500

    Use id_map in Fold*ToConstant
    
    The folding routines are suppose to use the id_map provided to map the
    ids in the instruction.  The ones I just added are missing it.

commit 6c409e30a2e4410d5b8c7223aeda790284b160b8
Author: Steven Perron <stevenperron@google.com>
Date:   Tue Jan 9 12:45:46 2018 -0500

    Add generic folding function and use in CCP
    
    The current folding routines have a very cumbersome interface, make them
    harder to use, and not a obvious how to extend.
    
    This change is to create a new interface for the folding routines, and
    show how it can be used by calling it from CCP.
    
    This does not make a significant change to the behaviour of CCP.  In
    general it should produce the same code as before; however it is
    possible that an instruction that takes 32-bit integers as inputs and
    the result is not a 32-bit integer or bool will not be folded as before.
    
    It seems like andriod has a problem with INT32_MAX and the like.  I'll
    explicitly define those if the are not already defined.

commit 3b780db7f8fe81fc0f7446f32f4f604f3cf2485d
Author: Alan Baker <alanbaker@google.com>
Date:   Thu Jan 18 15:44:00 2018 -0500

    Fixes infinite loop in ADCE
    
    * Addresses how breaks are indentified to prevent infinite loops when
    back to back loop share a merge and header
    * Added test to catch the bug

commit cf3b2a58c417ed86a52191cf1924006e41e963c0
Author: Victor Lomuller <victor@codeplay.com>
Date:   Thu Jan 18 17:14:58 2018 +0000

    Introduce an instruction builder helper class.
    
    The class factorize the instruction building process.
    Def-use manager analysis can be updated on the fly to maintain coherency.
    To be updated to take into account more analysis.

commit 73940aba1b5c011fef84eab1a8f334146978813a
Author: Alan Baker <alanbaker@google.com>
Date:   Thu Jan 18 14:15:54 2018 -0500

    Simplifying code for adding instructions to worklist
    
    * AddToWorklist can now be called unconditionally
     * It will only add instructions that have not already been marked as
     live
     * Fixes a case where a merge was not added to the worklist because the
     branch was already marked as live
    * Added two similar tests that fail without the fix

commit 34d4294c2c610035e6e6bd10ef27e71692cbf85a
Author: Steven Perron <stevenperron@google.com>
Date:   Wed Jan 17 14:57:37 2018 -0500

    Create a pass to work around a driver bug related to OpUnreachable.
    
    We have come across a driver bug where and OpUnreachable inside a loop
    is causing the shader to go into an infinite loop.  This commit will try
    to avoid this bug by turning OpUnreachable instructions that are
    contained in a loop into branches to the loop merge block.
    
    This is not added to "-O" and "-Os" because it should only be used if
    the driver being targeted has this problem.
    
    Fixes #1209.

commit 18618061cb87652246d35b45b3c401d2f0510b04
Author: Alan Baker <alanbaker@google.com>
Date:   Thu Jan 18 11:02:57 2018 -0500

    Adding testcase for #1210

commit 0b1372a8cac7ef5d86d91ecef2a9c3de91d9fabd
Author: Victor Lomuller <victor@codeplay.com>
Date:   Thu Jan 18 08:51:12 2018 +0000

    CFG: force the creation of a predecessor entry for all basic block.
    
    This ensure that all basic blocks in a function have a valid entry the CFG object.
    
    The entry block has no predecessors but remains a valid basic block
    for which we might want to query the number of predecessors.
    Some unreachable basic blocks may not have predecessors as well.

commit 3604c0b71d1a5845895935502ebe663be3fd2b63
Author: David Neto <dneto@google.com>
Date:   Wed Jan 17 10:57:20 2018 -0500

    spirv-dis: Add --color option to force color disassembly
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/1170

commit 5e70d20d801fa5c87d04ab38e38443a73ec45673
Author: Alan Baker <alanbaker@google.com>
Date:   Wed Jan 17 14:09:24 2018 -0500

    Fixing missing early exit from break identification

commit 80b743a570a6a616484d9aa9233774fed6cc5463
Author: Alan Baker <alanbaker@google.com>
Date:   Mon Jan 15 13:25:45 2018 -0500

    Adding support for switch removal in ADCE
    
    * Updated code to handle switches
    * Enabled disabled test and added a couple new ones

commit 3a0eb44da34418e8817fad52275be1968791ef18
Author: Alan Baker <alanbaker@google.com>
Date:   Tue Jan 16 16:27:13 2018 -0500

    Capturing value table by reference in local redundancy elim

commit ae6daeed99dcb5a45e77fe1ab53452fb507daddd
Author: David Neto <dneto@google.com>
Date:   Tue Jan 16 22:52:39 2018 -0500

    Update CHANGES

commit 5ffe862f28a7a8e8e6beecadf2d9e3d48e12d7f8
Author: Alan Baker <alanbaker@google.com>
Date:   Tue Jan 16 14:47:35 2018 -0500

    Fixes missing increment in common uniform elim
    
    * Addresses #1203
    * Increments inIdx in IsConstantIndexAccessChain
     * added test to catch the bug

commit 6cc772c3ce358193aac132a2c798e79e21aec0ad
Author: Steven Perron <stevenperron@google.com>
Date:   Sat Jan 13 00:28:40 2018 -0500

    Skip SpecConstants in CCP.
    
    At the moment specialization constants look like constants to ccp.  This
    causes a problem because they are handled differently by the constant
    manager.
    
    I choose to simply skip over them, and not try to add them to the value
    table.  We can do specialization before ccp if we want to be able to
    propagate these values.
    
    Fixes #1199.

commit ba017f79b215d0f35d08d9d10b46a8290152d6d1
Author: David Neto <dneto@google.com>
Date:   Fri Jan 12 18:52:42 2018 -0500

    Update CHANGES

commit c2aadb02d91eaa28d91d81b308761e1cfea9c002
Author: Greg Fischer <greg@lunarg.com>
Date:   Fri Jan 12 15:52:45 2018 -0700

    Add MatrixConstant

commit 8cb0aec724230f3c8d9a8958f761d10552efc111
Author: Steven Perron <stevenperron@google.com>
Date:   Fri Jan 12 15:15:57 2018 -0500

    Remove redundant passes from legalization passes
    
    With work that Alan has done, some passes have become redundant.  ADCE
    now removed unused variables.  Dead branch elimination removes
    unreachable blocks.  This means we can remove CFG Cleanup and dead
    variable elimination.

commit 6587d3f8a31b636c0d75b32d5ae65d338581c200
Author: Alan Baker <alanbaker@google.com>
Date:   Fri Jan 12 15:05:53 2018 -0500

    Adding early exit versions of several ForEach* methods
    
    * Looked through code for instances where code would benefit from early
    exit
     * Added a corresponding WhileEach* method and updated the code

commit 24f9947050d6e69bccc0061473216075980978e8
Author: Steven Perron <stevenperron@google.com>
Date:   Fri Jan 12 11:23:57 2018 -0500

    Move initialization of the const mgr to the constructor.
    
    The current code expects the users of the constant manager to initialize
    it with all of the constants in the module.  The problem is that you do
    not want to redo the work multiple times.  So I decided to move that
    code to the constructor of the constant manager.  This way it will
    always be initialized on first use.
    
    I also removed an assert that expects all constant instructions to be
    successfully mapped.  This is because not all OpConstant* instruction
    can map to a constant, and neither do the OpSpecConstant* instructions.
    
    The real problem is that an OpConstantComposite can contain a member
    that is OpUndef.  I tried to treat OpUndef like OpConstantNull, but this
    failed because an OpSpecConstantComposite with an OpUndef cannot be
    changed to an OpConstantComposite.  Since I feel this case will not be
    common, I decided to not complicate the code.
    
    Fixes #1193.

commit 86dec646f55be4429eb509330588feb524d2b9cb
Author: David Neto <dneto@google.com>
Date:   Fri Jan 12 13:33:43 2018 -0500

    Start v2018.0-dev

commit 902ed46f6ffc11bf59ab6103c7f0ca9d7cb9753b
Author: David Neto <dneto@google.com>
Date:   Fri Jan 12 13:32:04 2018 -0500

    Finalize v2017.3

commit 672494da13d54cf72d41edc67ecc6b53c561afc6
Author: Alan Baker <alanbaker@google.com>
Date:   Wed Jan 10 14:23:47 2018 -0500

    Adding ostream operators for IR structures
    
    * Added for Instruction, BasicBlock, Function and Module
    * Uses new disassembly functionality that can disassemble individual
    instructions
     * For debug use only (no caching is done)
     * Each output converts module to binary, parses and outputs an
     individual instruction
    * Added a test for whole module output
    * Disabling Microsoft checked iterator warnings
    * Updated check_copyright.py to accept 2018

commit eb0c73dad6102fc0d4f03c62fe910348bae43a11
Author: Alan Baker <alanbaker@google.com>
Date:   Thu Jan 11 15:05:39 2018 -0500

    Maintain instruction to block mapping in phi insertion
    
    * Changed MemPass::InsertPhiInstructions to set basic blocks for new
    phis
    * Local SSA elim now maintains instr to block mapping
     * Added a test and confirmed it fails without the updated phis
    * IRContext::set_instr_block no longer builds the map if the analysis is
    invalid
    * Added instruction to block mapping verification to
    IRContext::IsConsistent()

commit 5eafc00ad58266dc574d9defd6cba83bee566956
Author: Greg Fischer <greg@lunarg.com>
Date:   Fri Dec 29 16:44:43 2017 -0700

    InsertExtractElim: Optimize through VectorShuffle, Mix
    
    This improves Extract replacement to continue through VectorShuffle.
    It will also handle Mix with 0.0 or 1.0 in the a-value of the desired
    component.
    
    To facilitate optimization of VectorShuffle, the algorithm was refactored
    to pass around the indices of the extract in a vector rather than pass the
    extract instruction itself. This allows the indices to be modified as the
    algorithm progresses.

commit 1ebd860daabf3328715d010af39f4950ec26d9c6
Author: Steven Perron <stevenperron@google.com>
Date:   Tue Jan 9 12:45:46 2018 -0500

    Add generic folding function and use in CCP
    
    The current folding routines have a very cumbersome interface, make them
    harder to use, and not a obvious how to extend.
    
    This change is to create a new interface for the folding routines, and
    show how it can be used by calling it from CCP.
    
    This does not make a significant change to the behaviour of CCP.  In
    general it should produce the same code as before; however it is
    possible that an instruction that takes 32-bit integers as inputs and
    the result is not a 32-bit integer or bool will not be folded as before.

commit 3a054e1ddcc43cde3fdcb906ae087b2aa39d1deb
Author: Alan Baker <alanbaker@google.com>
Date:   Mon Dec 18 12:13:10 2017 -0500

    Adding additional functionality to ADCE.
    
    Modified ADCE to remove dead globals.
    * Entry point and execution mode instructions are marked as alive
    * Reachable functions and their parameters are marked as alive
    * Instruction deletion now deferred until the end of the pass
    * Eliminated dead insts set, added IsDead to calculate that value
    instead
    * Ported applicable dead variable elimination tests
    * Ported dead constant elim tests
    
    Added dead function elimination to ADCE
    * ported dead function elim tests
    
    Added handling of decoration groups in ADCE
    * Uses a custom sorter to traverse decorations in a specific order
    * Simplifies necessary checks
    
    Updated -O and -Os pass lists.

commit d54a286c754230a67ffdb23850253596800ed0bd
Author: Andrey Tuganov <andreyt@google.com>
Date:   Tue Jan 9 11:08:44 2018 -0500

    Fix validation rules for GLSL pack/unpack 2x32

commit 1b6cfd34092ad1f06bcaeee684778201da2f7856
Author: Alan Baker <alanbaker@google.com>
Date:   Thu Jan 4 17:04:03 2018 -0500

    Rewriting dead branch elimination.
    
    Pass now paints live blocks and fixes constant branches and switches as
    it goes. No longer requires structured control flow. It also removes
    unreachable blocks as a side effect. It fixes the IR (phis) before doing
    any code removal (other than terminator changes).
    
    Added several unit tests for updated/new functionality.
    
    Does not remove dead edge from a phi node:
    * Checks that incoming edges are live in order to retain them
    * Added BasicBlock::IsSuccessor
    * added test
    
    Fixing phi updates in the presence of extra backedge blocks
    
    * Added tests to catch bug
    
    Reworked how phis are updated
    
    * Instead of creating a new Phi and RAUW'ing the old phi with it, I now
    replace the phi operands, but maintain the def/use manager correctly.
    
    For unreachable merge:
    
    * When considering unreachable continue blocks the code now properly
    checks whether the incoming edge will continue to be live.
    
    Major refactoring for review
    
    * Broke into 4 major functions
     * marking live blocks
     * marking structured targets
     * fixing phis
     * deleting blocks

commit e5560d64de40bcc52b38ee44fd8a0bbc42f64399
Author: Diego Novillo <dnovillo@google.com>
Date:   Mon Jan 8 11:56:57 2018 -0500

    Fix constant propagation of induction variables.
    
    This fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/1143.
    When an instruction transitions from constant to bottom (varying) in the
    lattice, we were telling the propagator that the instruction was
    varying, but never updating the actual value in the values table.
    
    This led to incorrect value substitutions at the end of propagation.
    
    The patch also re-enables CCP in -O and -Os.

commit a82a0ea886f59f1987f339b05cca71cc248adc78
Author: David Neto <dneto@google.com>
Date:   Mon Jan 8 10:42:02 2018 -0500

    Fix method comment for BasicBlock::MegeBlockIdIfAny
    
    Fixes #1177

commit 44f27f928916f760314381c5a26924408653aca9
Author: Lei Zhang <antiagainst@google.com>
Date:   Sun Jan 7 10:50:01 2018 -0500

    Allow relaxing validation of pointers in logical addressing mode
    
    In HLSL structured buffer legalization, pointer to pointer types
    are emitted to indicate a structured buffer variable should be
    treated as an alias of some other variable. We need an option to
    relax the check of pointer types in logical addressing mode to
    catch other validation errors.

commit e8ad02f3dde41d227319944f52cc850bcc077fb7
Author: Victor Lomuller <victor@codeplay.com>
Date:   Thu Dec 21 14:47:25 2017 +0000

    Add loop descriptors and some required dominator tree extensions.
    
    Add post-order tree iterator.
    
    Add DominatorTreeNode extensions:
     - Add begin/end methods to do pre-order and post-order tree traversal from a given DominatorTreeNode
    
    Add DominatorTree extensions:
      - Add begin/end methods to do pre-order and post-order tree traversal
      - Tree traversal ignore by default the pseudo entry block
      - Retrieve a DominatorTreeNode from a basic block
    
    Add loop descriptor:
      - Add a LoopDescriptor class to register all loops in a given function.
      - Add a Loop class to describe a loop:
        - Loop parent
        - Nested loops
        - Loop depth
        - Loop header, merge, continue and preheader
        - Basic blocks that belong to the loop
    
    Correct a bug that forced dominator tree to be constantly rebuilt.

commit 6e9ea2e584907e2834ada0f18729c34c96bc0801
Author: David Neto <dneto@google.com>
Date:   Fri Jan 5 18:08:31 2018 -0500

    AnalyzeInstUse: Reuse the instruction lookup

commit 3fbbd3c772c53930417b4cc7db949c6e52b6b2a2
Author: David Neto <dneto@google.com>
Date:   Fri Jan 5 13:21:36 2018 -0500

    Remove CCP from size and performance recipes, pending bugfixes
    
    Currently CCP is incorrectly optimizing loops.
    See https://github.com/KhronosGroup/SPIRV-Tools/issues/1143

commit 7183ad526e6ca918edeaab266fa533190d8797b7
Author: Pierre Moreau <dev@pmoreau.org>
Date:   Wed Jan 3 01:54:55 2018 +0100

    Linker code cleanups
    
    Turn `Linker::Link()` into free functions
    
      As very little information was kept in the Linker class, we can get rid
      of the whole class and have the `Link()` as free functions instead; the
      environment target as well as the consumer are passed along through an
      `spv_context` object.
      The resulting linked_binary is passed as a pointer rather than a
      reference to follow the Google C++ Style guidelines.
    
      Addresses remaining comments from
      https://github.com/KhronosGroup/SPIRV-Tools/pull/693 about the SPIR-V
      linker.
    
    Fix variable naming in the linker
    
      Some of the variables were using mixed case, which did not follow the
      Google C++ Style guidelines.
    
    Linker: Use EXPECT_EQ when possible and update some test
    
    * Replace occurrences of ASSERT_EQ by EXPECT_EQ when possible;
    * Reformulated some of the error messages;
    * Added the symbol name in the error message when there is a type or
      decoration mismatch between the imported and exported declarations.
    
    Opt: List all duplicates removed by RemoveDuplicatePass in the header
    
    Opt: Make the const version of GetLabelInst() return a pointer
    
      For consistency with the non-const version, as well as other similar
      functions.
    
    Opt: Rename function_end to EndInst()
    
      As pointed out by dneto0 the previous name was quite confusing and could
      be mistaken with a function returning an end iterator.
      Also change the return type of the const version to a pointer rather
      than a reference, for consistency.
    
    Opt: Add performance comment to RemoveDuplicateTypes and decorations
    
      This comment was requested during the review of
      https://github.com/KhronosGroup/SPIRV-Tools/pull/693.
    
    Opt: Add comments and fix variable naming in RemoveDuplicatePass
    
    * Add missing comments to private functions;
    * Rename variables that were using mixed case;
    * Add TODO for moving AreTypesEqual out.
    
    Linker: Remove commented out code and add TODOs
    
    Linker: Merged together strings that were too much splitted
    
    Implement a C++ RAII wrapper around spv_context

commit ccb921dd2bc6dd03a719725114022e4bfc596a1c
Author: Steven Perron <stevenperron@google.com>
Date:   Thu Jan 4 11:37:19 2018 -0500

    Allow getting the base pointer of an image load/store.
    
    In value numbering, we treat loads and stores of images, ie OpImageLoad,
    as a memory operation where it is interested in the "base address" of
    the instruction.  In those cases, it is an image instruction.
    
    The problem is that `Instruction::GetBaseAddress()` does not account for
    the image instructions, so the assert at the end to make sure it found
    a valid base address for its addressing mode fails.
    
    The solution is to look at the load/store instruction to determine how
    the assertion should be done.
    
    Fixes #1160.

commit 716718a5e969f6b4e73cbc864db59a754a83aab3
Author: Diego Novillo <dnovillo@google.com>
Date:   Fri Jan 5 09:34:18 2018 -0500

    Fix infinite simulation cycles in SSA propagator.
    
    This fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/1159.  I
    had missed a nuance in the original algorithm.  When simulating Phi
    instructions, the SSA edges out of a Phi instruction should never be
    added to the list of edges to simulate.
    
    Phi instructions can be in SSA def-use cycles with other Phi
    instructions.  This was causing the propagator to fall into an infinite
    loop when the same def-use edge kept being added to the queue.
    
    The original algorithm in the paper specifically separates the visit of
    a Phi instruction vs the visit of a regular instruction.  This fix makes
    the implementation match the original algorithm.

commit 120ddffb41ef546aeaae7fbb7e50714f64553377
Author: Pierre Moreau <dev@pmoreau.org>
Date:   Thu Jan 4 23:16:39 2018 +0100

    Ignore clang-format-diff.py from copyrights check
    
    Having that script locally, for example to run check_code_format.sh
    before sending a pull request, would cause the copyright notices check
    to fail.

commit ac9a828e6ee296e4814064c3aecd9883a3db2a1d
Author: David Neto <dneto@google.com>
Date:   Thu Jan 4 18:52:38 2018 -0500

    dead branch elim: Track killed backedges
    
    When deleting branches and blocks, also remove them from
    the backedges set, in case they were there.
    
    This prevents us from keeping stale pointers to deleted Instruction
    objects.  That memory could be used later by another instruction,
    incorrectly signaling that something has a backedge reference, and
    the dead branch eliminator could end up deleting live blocks.
    
    Adds accessor method ir::BasicBlock::terminator
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/1168

commit c32e79eeefe1554076c4e094a61aa9a98d97c540
Author: David Neto <dneto@google.com>
Date:   Thu Jan 4 12:59:50 2018 -0500

    Add --print-all optimizer option
    
    Adds optimizer API to write disassembly to a given output stream
    before each pass, and after the last pass.
    
    Adds spirv-opt --print-all option to write disassembly to stderr
    before each pass, and after the last pass.

commit 702852bd22bf2cb15ff10043eefe8ae0417f65d6
Author: Pierre Moreau <dev@pmoreau.org>
Date:   Sun Dec 24 11:15:14 2017 +0100

    Opt: Make DecorationManager::HaveTheSameDecorations symmetric
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/1112
    
    Also: Add SpvOpDecorateId to IsAnnotationInst()

commit a376b197ae1121cfd1d02255a22b89c5a697a3df
Author: Andrey Tuganov <andreyt@google.com>
Date:   Tue Jan 2 16:02:55 2018 -0500

    Validator checks out of bounds composite access
    
    1. Added OpCompositeExtract/Insert out of bounds checks where possible
    (everything except RuntimeArray)
    2. Moved validation of OpCompositeExtract/Insert from validate_id.cpp to
    validate_composites.cpp.

commit 5b52626eaa4bc599ba26b6b3fbee733cde23ba0f
Author: Diego Novillo <dnovillo@google.com>
Date:   Thu Jan 4 13:20:18 2018 -0500

    Address review comments from https://github.com/KhronosGroup/SPIRV-Tools/pull/985.

commit 7834beea8017ed2db866227972539fb53ef81362
Author: Steven Perron <stevenperron@google.com>
Date:   Wed Jan 3 14:03:07 2018 -0500

    Update legalization passes
    
    I've a few passes the legalization passes.  The first is to add the
    more specialized load-store removal passes to help improve the compile
    time, as was suggested in #1118.
    
    I've also added dead branch elimination while we wait for the behaviour
    of dead branch elimination to be folded into CFG cleanup.
    
    I did not add CCP because it seems like most of the constant propagation
    what is needed is already being done by the load-store removal passes,
    which call `ReplaceAllUsesWith`.  We can reconsider this if needed.

commit e8f2890c302be2da1b3413e742dda52b9c18da7e
Author: Steven Perron <stevenperron@google.com>
Date:   Wed Jan 3 13:23:57 2018 -0500

    Replace calls to `ToNop` by `KillInst`.
    
    Calling `ToNop` leaves around instructions that are pointless.  In
    general it is better to remove the instruction completely.  That way
    other optimizations will not need to look at them.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/1003.

commit 5f100789fb8dc220626996ad8afb160ccb602691
Author: Diego Novillo <dnovillo@google.com>
Date:   Wed Jan 3 15:25:03 2018 -0500

    Handle execution termination instructions when building edges.
    
    This fixes issue https://github.com/KhronosGroup/SPIRV-Tools/issues/1153.
    
    When building CFG edges, edges out of a OpKill and OpUnreachable
    instruction should be directed to the CFG's pseudo exit block.

commit 135150a1a85e5b516a7ec299ba3b8f8513f2bc0b
Author: Diego Novillo <dnovillo@google.com>
Date:   Wed Jan 3 12:38:21 2018 -0500

    Do not insert Phi nodes in CCP propagator.
    
    In CCP we should not need to insert Phi nodes because CCP never looks at
    loads/stores.  This required adjusting two tests that relied on Phi
    instructions being inserted.  I changed the tests to have the Phi
    instructions pre-inserted.
    
    I also added a new test to make sure that CCP does not try to look
    through stores and loads.
    
    Finally, given that CCP does not handle loads/stores, it's better to run
    mem2reg before it.  I've changed the -O/-Os schedules to run local
    multi-store elimination before CCP.
    
    Although this is just an efficiency fix for CCP, it is
    also working around a bug in Phi insertion.  When Phi instructions are
    inserted, they are never associated a basic block.  This causes a
    segfault when the propagator tries to lookup CFG edges when analyzing
    Phi instructions.

commit 25d396b4a29fd9bd09478c8045ec4d72af0d4ca9
Author: Andrey Tuganov <andreyt@google.com>
Date:   Wed Dec 13 11:56:09 2017 -0500

    Add ExtInst validation pass (GLSL only for now)
    
    Validates all GLSL.std.450 extended instructions.

commit 226f263cbcb03eeb78739dd918be8b03fd24e460
Author: GregF <greg@LunarG.com>
Date:   Wed Dec 27 17:12:04 2017 -0700

    Test: Fix linux/gcc defined-but-not-used warnings/errors

commit b185a3d808759add903d82e50a7ff3fd64227c67
Author: Leo Izen <leo.izen@gmail.com>
Date:   Thu Dec 28 11:13:06 2017 -0500

    utils/generate_grammar_tables.py: use spaces for indentation
    
    One part of this file had indented using tabs. This causes newer
    versions of python to complain. This changes the indentation to
    consistently use four spaces throughout the file, to be consistent
    with the rest of the file and the rest of the project.

commit 1acce99255ee28a582776372593e91b585d3c011
Author: Diego Novillo <dnovillo@google.com>
Date:   Fri Dec 22 12:38:02 2017 -0500

    Fix https://github.com/KhronosGroup/SPIRV-Tools/issues/1130
    
    This addresses review feedback for the CCP implementation (which fixes
    https://github.com/KhronosGroup/SPIRV-Tools/issues/889).
    
    This adds more protection around the folding of instructions that would
    not be supported by the folder.

commit a91aa538934138e02301212daad84a1aa240733e
Author: Andrey Tuganov <andreyt@google.com>
Date:   Thu Dec 21 15:24:27 2017 -0500

    Disallow Dim=SubpassData for OpImageSparseRead

commit 59de6100b503973c0f94d344d16a8eec2323c180
Author: David Neto <dneto@google.com>
Date:   Sun Dec 3 12:30:08 2017 -0500

    Add asm, dis support for DebugInfo extended instruction set
    
    Add grammar file for DebugInfo extended instruction set
    - Each new operand enum kind in extinst.debuginfo.grammar.json maps
      to a new value in spv_operand_type_t.
    - Add new concrete enum operand types for DebugInfo
    
    Generate a C header for the DebugInfo extended instruction set
    
    Add table lookup of DebugInfo extended instrutions
    
    Handle the debug info operand types in binary parser,
    disassembler, and assembler.
    
    Add DebugInfo round trip tests for assembler, disassembler
    
    Android.mk: Support DebugInfo extended instruction set
    
    The extinst.debuginfo.grammar.json file is currently part of
    SPIRV-Tools source.
    
    It contributes operand type enums, so it has to be processed
    along with the core grammar files.
    
    We also generate a C header DebugInfo.h.
    
    Add necessary grammar file processing to Android.mk.

commit a27d673cef75d2c6b89bee297d08db6f02501c7a
Author: David Neto <dneto@google.com>
Date:   Thu Dec 21 11:25:31 2017 -0500

    CONTRIBUTING: If you fixed a bug, say so

commit 4ba9dcc8a05bb0266e46135c6a48311dbc62524e
Author: Diego Novillo <dnovillo@google.com>
Date:   Tue Dec 5 11:39:25 2017 -0500

    Implement SSA CCP (SSA Conditional Constant Propagation).
    
    This implements the conditional constant propagation pass proposed in
    
    Constant propagation with conditional branches,
    Wegman and Zadeck, ACM TOPLAS 13(2):181-210.
    
    The main logic resides in CCPPass::VisitInstruction.  Instruction that
    may produce a constant value are evaluated with the constant folder. If
    they produce a new constant, the instruction is considered interesting.
    Otherwise, it's considered varying (for unfoldable instructions) or
    just not interesting (when not enough operands have a constant value).
    
    The other main piece of logic is in CCPPass::VisitBranch.  This
    evaluates the selector of the branch.  When it's found to be a known
    value, it computes the destination basic block and sets it.  This tells
    the propagator which branches to follow.
    
    The patch required extensions to the constant manager as well. Instead
    of hashing the Constant pointers, this patch changes the constant pool
    to hash the contents of the Constant.  This allows the lookups to be
    done using the actual values of the Constant, preventing duplicate
    definitions.

commit 756b277fb826675f0356995f975bd7da1cacc23d
Author: Steven Perron <stevenperron@google.com>
Date:   Tue Dec 19 14:18:13 2017 -0500

    Store all enabled capabilities in the feature manger.
    
    In order to keep track of all of the implicit capabilities as well as
    the explicit ones, we will add them all to the feature manager.  That is
    the object that needs to be queried when checking if a capability is
    enabled.
    
    The name of the "HasCapability" function in the module was changed to
    make it more obvious that it does not check for implied capabilities.
    
    Keep an spv_context and AssemblyGrammar in IRContext

commit 8e0051c78188371293377b0cac482c6f366a9813
Author: David Neto <dneto@google.com>
Date:   Thu Dec 21 10:42:46 2017 -0500

    Update CHANGES

commit 1ab8ad654a550d28593b1b38ac303adc66b1a241
Author: Alan Baker <alanbaker@google.com>
Date:   Mon Dec 18 17:02:19 2017 -0500

    Fixing bugs in type manager memory management
    
    * changed the way duplicate types are removed to stop copying
    instructions
    * Reworked RemoveDuplicatesPass::AreTypesSame to use type manager and
    type equality
    * Reworked TypeManager memory management to store a pool of unique
    pointers of types
     * removed unique pointers from id map
     * fixed instances where free'd memory could be accessed

commit 7505d2422551e5dbc2bf4e0ffccfdc5ca5ce1925
Author: Steven Perron <stevenperron@google.com>
Date:   Tue Dec 19 15:08:54 2017 -0500

    Update the legalization passes.
    
    Changes the set of optimizations done for legalization.  While doing
    this, I added documentation to explain why we want each optimization.
    
    A new option "--legalize-hlsl" is added so the legalization passes can
    be easily run from the command line.
    The legalize option implies skip-validation.

commit c9a881ecc6f304b586bf13f54a7cff7119b04070
Author: David Neto <dneto@google.com>
Date:   Tue Dec 19 13:52:23 2017 -0500

    Make a string parameter const ref

commit 88409b7262b7c75ec4f8bfdf9f1c505c34bc6e4e
Author: David Neto <dneto@google.com>
Date:   Tue Dec 19 18:30:10 2017 -0500

    Fix CHANGES: there is no OpImageSparseWrite

commit 2e5672dcfba32ddd09ce15f286fa4f69adad75c4
Author: David Neto <dneto@google.com>
Date:   Tue Dec 19 17:50:01 2017 -0500

    Update CHANGES for recent changes

commit 424f744db16879c09ce9c839de4954eca7580565
Author: Pierre Moreau <dev@pmoreau.org>
Date:   Thu Nov 30 00:29:34 2017 +0100

    Opt: Fix implementation and comment of AreDecorationsTheSame
    Target should not be ignored when comparing decorations in RemoveDuplicates
    Opt: Remove unused code in RemoveDuplicateDecorations

commit 79a00649b4fdcbbbaeb47f0081e28ea40c886f0a
Author: Steven Perron <stevenperron@google.com>
Date:   Mon Dec 11 13:10:24 2017 -0500

    Allow pointers to pointers in logical addressing mode.
    
    A few optimizations are updates to handle code that is suppose to be
    using the logical addressing mode, but still has variables that contain
    pointers as long as the pointer are to opaque objects.  This is called
    "relaxed logical addressing".
    
    |Instruction::GetBaseAddress| will check that pointers that are use meet
    the relaxed logical addressing rules.  Optimization that now handle
    relaxed logical addressing instead of logical addressing are:
    
     - aggressive dead-code elimination
     - local access chain convert
     - local store elimination passes.

commit b86eb6842b4d95860828c58fd6f44a91801334be
Author: Steven Perron <stevenperron@google.com>
Date:   Mon Dec 11 13:10:24 2017 -0500

    Convert private variables to function scope.
    
    When a private variable is used in a single function, it can be
    converted to a function scope variable in that function.  This adds a
    pass that does that.  The pass can be enabled using the option
    `--private-to-local`.
    
    This transformation allows other transformations to act on these
    variables.
    
    Also moved `FindPointerToType` from the inline class to the type manager.

commit 8135dd6375b7b99442089bd1352d5c4f4db8aecc
Author: David Neto <dneto@google.com>
Date:   Fri Dec 15 13:19:09 2017 -0500

    More validation on primitive instructions
    
    - Test validation success for OpEmitVertex OpEndPrimitive
    - Test missing capabilities for primitive instructions
    - Primitive instructions require Geometry execution model

commit 4dbcef62eeb0083f113d93a633f33fc7ae916305
Author: Jesus Carabano <jcaraban@abo.fi>
Date:   Wed Oct 18 12:00:02 2017 +0300

    validate & test of literal's upper bits
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/660

commit f35963588bd4ae97366244c141d6fe4449b0964a
Author: Pierre Moreau <dev@pmoreau.org>
Date:   Thu Nov 30 00:26:20 2017 +0100

    Opt: Remove commented out duplicated type_id function
    
    This code was wrongly added by #693.

commit 0d8ea486527d1b5dc6a6065bfbe66d0665aaee1e
Author: Jeremy Hayes <jeremy@lunarg.com>
Date:   Mon Dec 18 10:44:18 2017 -0700

    Fix comment in primitives validation
    
    Also refactor type query for efficiency.

commit dbc3a662c6f4c7fd671e6a22f832cc73e163211f
Author: Andrey Tuganov <andreyt@google.com>
Date:   Mon Dec 18 11:21:38 2017 -0500

    Image Operand Sample allows sparse image opcodes
    
    @ehsannas had filed an issue against SPIR-V spec, concerning
    Image Operands section (3.14):
    Sample
    A following operand is the sample number of the sample to use. Only
    valid with OpImageFetch, OpImageRead, and OpImageWrite.
    
    Relaxing the check to allow OpImageSparseRead and
    OpImageSparseFetch to fix failing tests.

commit 8c05012593e6c5808576c0c4e4467a1586d2bd8e
Author: Pierre Moreau <dev@pmoreau.org>
Date:   Sat Nov 25 18:58:50 2017 +0100

    Export a config file for pkg-config
    
    Fixes #1031
    
    Extracts the current version from the file CHANGES
    
    The -dev suffix maps to a minor version number of .0
    No -dev suffix maps to a minor version number of .1
    
    Uses a first class target spirv-tools-pkg-config

commit 0dbe184d320af56610ba1759a0ec1ce6df8db806
Author: David Neto <dneto@google.com>
Date:   Sun Dec 3 14:26:16 2017 -0500

    Remove concept of FIRST_CONCRETE_* operand types

commit 616908503d747a052022d5f5af86647ec373855f
Author: Alan Baker <alanbaker@google.com>
Date:   Fri Dec 8 15:33:19 2017 -0500

    Improving the usability of the type manager. The type manager hashes
    types. This allows the lookup of type declaration ids from arbitrarily
    constructed types. Users should be cautious when dealing with non-unique
    types (structs and potentially pointers) to get the exact id if
    necessary.
    
    * Changed the spec composite constant folder to handle ambiguous composites
    * Added functionality to create necessary instructions for a type
    * Added ability to remove ids from the type manager

commit 736103404ec8057c89c34a78d86ca54abb02f937
Author: David Neto <dneto@google.com>
Date:   Fri Dec 15 18:24:41 2017 -0500

    Start v2017.3-dev

commit 1ccfb5803a1bec58c1ceafc5944930dd8350c281
Author: David Neto <dneto@google.com>
Date:   Fri Dec 15 18:21:55 2017 -0500

    Finalize v2017.2

commit 0f804063154f45af308f8ce31c41f58fae3f18dc
Author: GregF <greg@LunarG.com>
Date:   Tue Dec 12 14:27:46 2017 -0700

    ADCE: Only mark true breaks and continues of live loops
    
    This fixes issue #1075
    
    - Mark continue when conditional branch with merge block.
      Only mark if merge block is not continue block.
    
    - Handle conditional branch break with preceding merge

commit cdfbf26c1363a4f2cb0c031a65cde7d1a265ec89
Author: Jeremy Hayes <jeremy@lunarg.com>
Date:   Thu Dec 14 15:29:37 2017 -0700

    Add primitive instruction validation pass

commit af7d5799a5c886a6e611764bacef3be4913e0dd0
Author: Andrey Tuganov <andreyt@google.com>
Date:   Wed Dec 13 17:55:00 2017 -0500

    Refactor include of latest spir-v header versions

commit 532b327d4d6edcdbc4eebcf09d7bfd8179caa7c1
Author: Andrey Tuganov <andreyt@google.com>
Date:   Thu Nov 30 11:29:05 2017 -0500

    Add validation rules for atomic instructions
    
    Validates all OpAtomicXXX instructions.

commit 853a3d6c31feb95becbd1a42074882fadd23a01d
Author: Diego Novillo <dnovillo@google.com>
Date:   Tue Dec 12 15:46:09 2017 -0500

    Fix uninitialized warning at -Os.

commit 22faa2b083aa738ef310d448881877457122885d
Author: Greg Fischer <greg@lunarg.com>
Date:   Tue Oct 24 18:58:48 2017 -0600

    ADCE: Empty Loop Elimination
    
    This entirely eliminates loops which do not contain live code.

commit 07ce16d1e72c5c8d9f83561dd926e61dd8aecb4f
Author: Steven Perron <stevenperron@google.com>
Date:   Mon Dec 11 13:10:24 2017 -0500

    Set the parent for basic blocks during inlining.
    
    Inlining is not setting the parent (function) for each basic block.
    This can cause problems for later optimizations.  The solution is to set
    the parent for each new block just before it is linked into the
    function.

commit 2fc1221c3d9751ff69d8aaa3d25645c13e234af6
Author: Lei Zhang <antiagainst@google.com>
Date:   Tue Dec 12 10:46:39 2017 -0500

    Appveyor: stop testing on VS 2013
    
    re2 requires VS2015 or later since:
    
    https://github.com/google/re2/commit/97957299d1c9f7617cfe653f344536d733582d9e

commit c520d43649f5b194a4beee3344e4439fb0fdc9de
Author: Andrey Tuganov <andreyt@google.com>
Date:   Fri Dec 8 17:57:12 2017 -0500

    Add validator checks for sparse image opcodes

commit 12447d846593db023d5ef7b05195bc2ffaa22f7d
Author: Pierre Moreau <dev@pmoreau.org>
Date:   Thu Nov 30 00:49:23 2017 +0100

    Support OpenCL 1.2 and 2.0 target environments
    
    include: Add target environment enums for OpenCL 1.2 and 2.0
    
    Validator: Validate OpenCL capabilities
    
    Update validate capabilities to handle embedded profiles
    
    Add test for OpenCL capabilities validation
    
    Update messages to mention the OpenCL profile used
    
    Re-format val_capability_test.cpp

commit 059fe0822a8075511aee8622f9daeb9a9abedb1b
Author: David Neto <dneto@google.com>
Date:   Mon Dec 11 15:50:51 2017 -0500

    AppVeyor: Put VS 2017 first
    
    VS 2017 is the newest compiler, with the most interesting feedback.
    Place it first so we get its feedback first.

commit 7ba59ac8dcca9dc3fd43a39726ef1f973d308a63
Author: David Neto <dneto@google.com>
Date:   Mon Dec 11 12:05:04 2017 -0500

    Force gtest to expose ::testing::Combine
    
    Work around faulty logic in googletest, where ::testing::Combine
    is accidentally disabled for VS 2017.
    See https://github.com/google/googletest/issues/1352

commit dbd8d0e7b8176d82310a3dbaef28f1fe8d8a0156
Author: Andrey Tuganov <andreyt@google.com>
Date:   Mon Dec 11 12:33:11 2017 -0500

    Reenable OpCopyObject validation rules
    
    Vulkan CTS fix has been submitted.

commit 867451f49e800ce3d36154c09bb6941c9030683a
Author: Alan Baker <alanbaker@google.com>
Date:   Thu Nov 30 17:03:06 2017 -0500

    Add scalar replacement
    
    Adds a scalar replacement pass. The pass considers all function scope
    variables of composite type. If there are accesses to individual
    elements (and it is legal) the pass replaces the variable with a
    variable for each composite element and updates all the uses.
    
    Added the pass to -O
    Added NumUses and NumUsers to DefUseManager
    Added some helper methods for the inst to block mapping in context
    Added some helper methods for specific constant types
    
    No longer generate duplicate pointer types.
    
    * Now searches for an existing pointer of the appropriate type instead
    of failing validation
    * Fixed spec constant extracts
    * Addressed changes for review
    * Changed RunSinglePassAndMatch to be able to run validation
     * current users do not enable it
    
    Added handling of acceptable decorations.
    
    * Decorations are also transfered where appropriate
    
    Refactored extension checking into FeatureManager
    
    * Context now owns a feature manager
     * consciously NOT an analysis
     * added some test
    * fixed some minor issues related to decorates
    * added some decorate related tests for scalar replacement

commit 78c025abe9cb7452568b0a1710b7c31fc345433e
Author: GregF <greg@LunarG.com>
Date:   Fri Dec 8 10:44:15 2017 -0700

    MultiStore: Support OpVariable Initialization
    
    Treat an OpVariable with initialization as if it was an OpStore.
    With PR #1073, this completes work for issue #1017.

commit 70f88f5295d6544e5dfe194b086cc356d934fdfb
Author: Pierre Moreau <dev@pmoreau.org>
Date:   Sat Dec 9 21:50:38 2017 +0100

    Add external/SPIRV-Headers to .gitignore
    
    b93c066b allowed for both SPIRV-Headers and spirv-headers as valid
    paths, but only the latter is being ignored by Git.

commit c6fdf68c2fe626895add8cbae749050806d6ee4e
Author: GregF <greg@LunarG.com>
Date:   Thu Dec 7 12:11:29 2017 -0700

    SingleStore: Support OpVariable Initialization
    
    Treat an OpVariable with initialization as if it was an OpStore.
    This fixes issue #1017.

commit a05ad01e7366245315c2076af0f0a577b25816fc
Author: Steven Perron <stevenperron@google.com>
Date:   Thu Dec 7 10:55:57 2017 -0500

    Add option to spirv-opt to skip the validator.
    
    The option --skip-validation is added.  When used it will skip the
    validation step.
    
    Also rearranged the help text to fix two options that are out of order.

commit 241dcacc04d661166c57d5ad3ec71f47a71d03e3
Author: Diego Novillo <dnovillo@google.com>
Date:   Thu Dec 7 16:42:27 2017 -0500

    Add a new constant manager class.
    
    This patch adds a new constant manager class to interface with
    analysis::Constant.  The new constant manager lives in ir::IRContext
    together with the type manager (analysis::TypeManager).
    
    The new analysis::ConstantManager is used by the spec constant folder
    and the constant propagator (in progress).
    
    Another cleanup introduced by this patch removes the ID management from
    the fold spec constant pass, and ir::IRContext and moves it to
    ir::Module. SSA IDs were maintained by IRContext and Module.  That's
    pointless and leads to mismatch IDs. Fixed by moving all the bookkeeping
    to ir::Module.

commit 5d602abd66c879382803dbd428729a9799906d86
Author: Steven Perron <stevenperron@google.com>
Date:   Mon Dec 4 12:29:51 2017 -0500

    Add global redundancy elimination
    
    Adds a pass that looks for redundant instruction in a function, and
    removes them.  The algorithm is a hash table based value numbering
    algorithm that traverses the dominator tree.
    
    This pass removes completely redundant instructions, not partially
    redundant ones.

commit 851e1ad98597bfed5f9e7b0496b92411ea7f1c35
Author: Steven Perron <stevenperron@google.com>
Date:   Wed Dec 6 22:09:20 2017 -0500

    Kill names and decoration in inlining.
    
    Currently when inlining a call, the name and decorations for the result of the
    call is not deleted.  This should be changed.  Added a test for this as well.
    
    This fixes issue #622.

commit 731d1899b19bc5151ca5460a627d2f5cdb2dd5d3
Author: Victor Lomuller <victor@codeplay.com>
Date:   Mon Dec 4 14:36:05 2017 +0000

    Add depth first iterator for trees
    
     - Add generic depth first iterator
     - Update the dominator tree to use this iterator instead of "randomly"
       iterate over the nodes

commit 0c2396d20f768a85e676ee0583664f74b4d5ac3b
Author: Diego Novillo <dnovillo@google.com>
Date:   Wed Dec 6 14:56:56 2017 -0500

    Revert extraneous changes from commit 8ec62deb2.
    
    Commit 8ec62deb2 merged the code from PR #810, but it also re-introduces
    code that had been removed in #885.
    
    This patch removes the (now superfluous code).

commit 8ba68fa9b94da071e879e3064adf8aaaea1a7051
Author: Stephen McGroarty <smcgro@googlemail.com>
Date:   Mon Nov 27 21:21:26 2017 +0000

    Dominator Tree Analysis (#3)
    
    Support for dominator and post dominator analysis on ir::Functions. This patch contains a DominatorTree class for building the tree and DominatorAnalysis and DominatorAnalysisPass classes for interfacing and caching the built trees.

commit 692a22c5bc5150d5dcb54006f6400282f0108719
Author: Diego Novillo <dnovillo@google.com>
Date:   Tue Dec 5 11:28:12 2017 -0500

    Sort flags in help message - NFC.
    
    It's slightly easier to read flags from --help if they're sorted.

commit b93c066b0bfa000288766a8a2ca8818c6e35d09b
Author: Lei Zhang <antiagainst@google.com>
Date:   Tue Dec 5 10:55:00 2017 -0500

    CMake: allow both SPIRV-Headers and spirv-headers
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/1057

commit 94e3e7b8efc20631d04f7c6616fb3b24ae2fcfb1
Author: Andrey Tuganov <andreyt@google.com>
Date:   Tue Dec 5 10:15:51 2017 -0500

    Add composite instruction validation pass
    
    Validates instructions in the opcode range from OpVectorExtractDynamic
    to OpTranspose.

commit 3b6c4f159c7c55973b1d6f3ce227d70926a05499
Author: Lei Zhang <antiagainst@google.com>
Date:   Mon Dec 4 22:43:26 2017 -0500

    Do not zip and deploy for check formatting

commit adb939656dfc928acf100d2877be32d04622ad7d
Author: Lei Zhang <antiagainst@google.com>
Date:   Mon Dec 4 19:39:00 2017 -0500

    Go back to root directory

commit 235ef34571dc734fa63a27aa672244b1548e5758
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Nov 30 22:24:13 2017 -0500

    Travis CI: add clang-format check
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/1029

commit 1af6c4ad28393b3702e04ffb66776aab5a296199
Author: Diego Novillo <dnovillo@google.com>
Date:   Mon Dec 4 15:41:41 2017 -0500

    Update .appveyor.yml

commit bf184310b23c70b05b213dbe80083ace0930f558
Author: Andrey Tuganov <andreyt@google.com>
Date:   Mon Dec 4 12:50:47 2017 -0500

    Fix some of the known issues in image validation
    
    Applied some of the spec clarifications made in conversation with
    @johnkslang.

commit fd3a22042b37d610b9f0a57ce747a40fb262921b
Author: Steven Perron <stevenperron@google.com>
Date:   Mon Dec 4 12:29:51 2017 -0500

    DCEInst kill the same instruction twice.
    
    In DCEInst, it is possible that the same instruction ends up in the
    queue multiple times, if the same id is used multiple times in the
    same instruction.
    
    The solution is to keep the ids in a set, to ensure no duplication in
    the list.

commit 726573a0e546e0d7ce5431db00d309542488406d
Author: Diego Novillo <dnovillo@google.com>
Date:   Mon Dec 4 15:45:56 2017 -0500

    Change Release builds to Release with debug info on Linux
    
    For Linux builds, we want to add debug information on the generated binary (for timing and profiling purposes).  This patch changes Release builds to RelWithDebInfo.

commit e9ecc0cbfda13f9c2731dc02209bd7153fe1d203
Author: Diego Novillo <dnovillo@google.com>
Date:   Mon Dec 4 15:28:21 2017 -0500

    Remove cfg_ field from SSAPropagator class - NFC.
    
    When I moved the CFG into IRContext
    (https://github.com/KhronosGroup/SPIRV-Tools/pull/1019), I forgot to
    update SSAPropagator to stop requiring one.
    
    Fixed with this patch.

commit 65046eca7c52c20346a0f12e77bbd57aa95dee59
Author: Steven Perron <stevenperron@google.com>
Date:   Tue Nov 21 14:47:46 2017 -0500

    Change IRContext::KillInst to delete instructions.
    
    The current method of removing an instruction is to call ToNop.  The
    problem with this is that it leaves around an instruction that later
    passes will look at.  We should just delete the instruction.
    
    In MemPass there is a utility routine called DCEInst.  It can delete
    essentially any instruction, which can invalidate pointers now that they
    are actually deleted.  The interface was changed to add a call back that
    can be used to update any local data structures that contain
    ir::Intruction*.

commit b35b52f97b13769f643dec7efad1e18d3064a345
Author: Steven Perron <stevenperron@google.com>
Date:   Mon Nov 27 15:07:34 2017 -0500

    Compute value number when the value table is constructed.
    
    Computing the value numbers on demand, as we do now, can lead to
    different results depending on the order in which the users asks for
    the value numbers.  To make things more stable, we compute them ahead
    of time.

commit b98254b282a536a56c3578e1dadfd11d3e666f18
Author: Daan Wendelen <daanwendelen@gmail.com>
Date:   Sun Dec 3 21:27:21 2017 +0100

    Fixed typo that leaked to the binary
    
    The typo was found by lintian when I was packaging glslang

commit 9996173f363729b3a97309685dbd4d78547a63a7
Author: Diego Novillo <dnovillo@google.com>
Date:   Fri Dec 1 13:10:34 2017 -0500

    Add simplified instructions for pushing a reviewed PR.

commit 22582fafa48f3699b477d1fc6f3eb90c539d30cb
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Nov 30 23:06:55 2017 -0500

    Travis: mark MacOS builds as optional
    
    MacOS support in Travis is flakey right now. MacOS build jobs
    take a long time to start.
    
    We have extensive checks for Linux and Windows, which should give
    us confidence.

commit 2885c65daf78099158bcc23e0bf0240712f5d8d4
Author: Diego Novillo <dnovillo@google.com>
Date:   Fri Dec 1 12:17:47 2017 -0500

    Re-format CONTRIBUTING.md - NFC.
    
    I'm about to change this file.  I re-formatted it for easier editing.

commit 0dd4ee27b164a079016abe6ce4d526bd1268b342
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Nov 30 18:01:11 2017 -0500

    Fix Dref type check in validator
    
    Dref should be of 32-bit scalar floating type.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/1012

commit b8aeab82ea97aa547cc622a7b2ff52c5cd9f8db9
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Nov 30 21:12:23 2017 -0500

    Appveyor: use ninja instead of MSBuild

commit 69043963e44f431f5ac0395afed9bd1b08f9abfb
Author: Pierre Moreau <dev@pmoreau.org>
Date:   Thu Nov 30 22:32:44 2017 +0100

    Opt: Remove unused lambda captures
    
    Those are reported as errors by clang 5.0.0, due to the flags -Werror
    and -Wunused-lambda-capture.

commit 137953538a904fc22b1640283d5aac09f1a62ba3
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Nov 30 16:35:22 2017 -0500

    Support outputting ANSI color escape sequences in library
    
    Previously we required _PRINT to enable _COLOR, which forbids
    outputting colored disassembly into a string in library.
    
    This commit will allow library users to request enabling
    ANSI color escape sequences.

commit 188cd3780d76256d6bfcbdb216b6368e9b070628
Author: David Neto <dneto@google.com>
Date:   Wed Nov 29 15:58:35 2017 -0500

    Erase decorations removed from internal collections
    
    Fixes Android arm-64-v8a build with NDK r14.  That's because
    we no longer ignore the result of the std::remove.

commit 3c2e4c7d997404cb8d43299117373a697c28fde1
Author: David Neto <dneto@google.com>
Date:   Fri Nov 24 14:18:17 2017 -0500

    Fix validation of group ops in SPV_AMD_shader_ballot
    
    This needs custom code since the rules from the extension
    are not encoded in the grammar.
    
    Changes are:
    - The new group instructions don't require Group capability
      when the extension is declared.
    - The Reduce, InclusiveScan, ExclusiveScan normally require the Kernel
      capability, but don't when the extension is declared.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/991

commit 8cfa0c40e0afd5b6fcbedf622fd45afd2de2a055
Author: Diego Novillo <dnovillo@google.com>
Date:   Wed Nov 29 13:36:17 2017 -0500

    Fix #1034 - Give Edge::operator<() weak ordering semantics.
    
    This should fix #1034.  It changes the predicate on operator< to use
    label IDs from each block and compares them as std:pair to define a weak
    ordering for std::set.

commit e1ceff9f54483d2abecd9a0e656cbc2339f60115
Author: Andrey Tuganov <andreyt@google.com>
Date:   Wed Nov 22 16:57:37 2017 -0500

    Validate OpTypeImage and OpTypeSampleImage
    
    Added new validation rules to the validate image pass.

commit 4c58086c56a1e3d73f7bb97d7963e09d09fade82
Author: Daniel Schürmann <daniel.schuermann@campus.tu-berlin.de>
Date:   Wed Nov 29 14:38:27 2017 +0100

    Linker: Fix incorrect exit status.

commit d78e11ccef1e9d8078adbeb4a76448fb49b8ae76
Author: Steven Perron <31666470+s-perron@users.noreply.github.com>
Date:   Fri Nov 24 09:33:18 2017 -0500

    Create CONTRIBUTING.md
    
    This is intended to be a document that people who want to help the project
    can get a quick overview of how things are done.  Please comment and suggest
    any changes.

commit 8dd3d93cf66beaa432686d2912ad3eeae2408dca
Author: GregF <greg@LunarG.com>
Date:   Tue Nov 28 16:18:05 2017 -0700

    AggressiveDCE: Add merge and continue branches for live loop.
    
    This ensures that an if-break is not eliminated from a loop.
    
    This fixes issue #989

commit 5f2589fd12841245f18b598f18a635ef1dfe05d9
Author: Lei Zhang <antiagainst@google.com>
Date:   Mon Nov 27 17:51:18 2017 -0500

    Update README about the automatic master-tot relase

commit 9f20799fb4129f4b1174fb168fb4508f46f64c5b
Author: Diego Novillo <dnovillo@google.com>
Date:   Mon Nov 27 14:20:32 2017 -0500

    Convert the CFG to an on-demand analysis - NFC.
    
    This fixes some TODOs by moving the CFG into the IRContext as an
    analysis.

commit 8ffed974ac5dbf049612c670eb283b5ce03f344b
Author: Diego Novillo <dnovillo@google.com>
Date:   Tue Nov 28 08:27:10 2017 -0500

    Fix windows build. unsigned vs signed comparison in EXPECT_EQ.

commit 74327845aa045ea854186af286a7f34f0125d6a4
Author: Diego Novillo <dnovillo@google.com>
Date:   Fri Nov 17 08:59:25 2017 -0500

    Generic value propagation engine.
    
    This class implements a generic value propagation algorithm based on the
    conditional constant propagation algorithm proposed in
    
         Constant propagation with conditional branches,
         Wegman and Zadeck, ACM TOPLAS 13(2):181-210.
    
    The implementation is based on
    
         A Propagation Engine for GCC
         Diego Novillo, GCC Summit 2005
         http://ols.fedoraproject.org/GCC/Reprints-2005/novillo-Reprint.pdf
    
    The purpose of this implementation is to act as a common framework for any
    transformation that needs to propagate values from statements producing new
    values to statements using those values.

commit 491b112fd235f28fac9734bdbdaea3cd0cb69b13
Author: Diego Novillo <dnovillo@google.com>
Date:   Mon Nov 27 14:40:03 2017 -0500

    Fix windows build.
    
    This fixes the lack of uint32_t definition in source/val/decoration.h.

commit 83228137e16c0d7fe33eaceddf6f67115d45338f
Author: Diego Novillo <dnovillo@google.com>
Date:   Mon Nov 27 10:16:41 2017 -0500

    Re-format source tree - NFC.
    
    Re-formatted the source tree with the command:
    
    $ /usr/bin/clang-format -style=file -i \
        $(find include source tools test utils -name '*.cpp' -or -name '*.h')
    
    This required a fix to source/val/decoration.h.  It was not including
    spirv.h, which broke builds when the #include headers were re-ordered by
    clang-format.

commit d8b2013ecfd6603855752452bb3a280a7b515d2c
Author: Andrey Tuganov <andreyt@google.com>
Date:   Fri Nov 24 10:29:05 2017 -0500

    Derivative opcodes require Fragment exec model
    
    Added validator check that all derivative opcodes require Fragment
    execution model.

commit c170afd93b1d69914f911f225ddaf5bab2640208
Author: Andrey Tuganov <andreyt@google.com>
Date:   Fri Nov 24 10:55:05 2017 -0500

    Relaxed OpImageWrite texel type check

commit e1a6f8d1c3ec4f814d6160ab46b8f397f89f8184
Author: David Neto <dneto@google.com>
Date:   Fri Nov 24 10:17:13 2017 -0500

    Update CHANGES to mention fixes for 1007 and 1009

commit f84f2669772fadd47f1847f355d7b304937f8c5a
Author: Andrey Tuganov <andreyt@google.com>
Date:   Fri Nov 24 10:05:07 2017 -0500

    Relaxed OpImageRead validation rules
    
    Removed the check that result type of OpImageRead should be a vector4.
    Will reenable/adapt once the spec is clarified on what the right
    dimension should be.

commit 0cae89e79ef95ce46aeb39e13f7463eadb1fae17
Author: Alan Baker <alanbaker@google.com>
Date:   Thu Nov 23 23:08:58 2017 -0500

    Notify the context of instructions that are being erased.
    
    Fixes use-after-free error in RemoveDuplicatesPass
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/1004

commit 3e08a3f71896c1c15bdcbd42a9ba28ddd0075427
Author: Andrey Tuganov <andreyt@google.com>
Date:   Thu Nov 23 12:11:15 2017 -0500

    Add validation checks for Execution Model
    
    Currently checks that these instructions are called from entry points
    with Fragment execution model.
    OpImageImplicit*
    OpImageQueryLod
    OpKill

commit d9129f00a57d788a0cbc185b441381f4dfaeaf89
Author: David Neto <dneto@google.com>
Date:   Wed Nov 22 17:03:55 2017 -0500

    Test for pollution of the global namespace
    
    Works on Linux only for now.  That's a good start.
    
    Move ValidateBinaryUsingContextAndValidationState into anonymous
    namespace in source/validate.cpp.

commit 0b1cb27f83bbb51f3996e11290631bb7ddada938
Author: Steven Perron <stevenperron@google.com>
Date:   Thu Nov 23 12:41:10 2017 -0500

    Remove derivative instructions from the list of combinators.
    
    These instructions compute their value based the value of the immediate
    neighbours of the current fragment.  This means the result is not
    defined purely by the operands of the instruction.

commit b0a70378863ce0bf0b6db1c822333180ad293215
Author: David Neto <dneto@google.com>
Date:   Thu Nov 23 18:16:41 2017 -0500

    Start v2017.2-dev

commit 493c0883af8722483c73e3776319e912b0c3a6cb
Author: David Neto <dneto@google.com>
Date:   Thu Nov 23 18:12:23 2017 -0500

    Finalize 2017.1
    
    Updated CHANGES to cover main updates since 2017.0

commit aec60b815806a0de1de4e56f747c4a9673601d73
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Nov 17 16:50:43 2017 -0500

    Add RegisterLegalizationPasses() into the interface
    
    Add note to mention the use scenario.  The original list came
    from Glslang.

commit 746bfd210adaf43ab16590d7226a95686b42e107
Author: Alan Baker <alanbaker@google.com>
Date:   Tue Nov 14 14:11:50 2017 -0500

    Adding new def -> use mapping container
    
    Replaced representation of uses
    
    * Changed uses from unordered_map<uint32_t, UseList> to
    set<pairInstruction*, Instruction*>>
    * Replaced GetUses with ForEachUser and ForEachUse functions
    * updated passes to use new functions
    * partially updated tests
    * lots of cleanup still todo
    
    Adding an unique id to Instruction generated by IRContext
    
    Each instruction is given an unique id that can be used for ordering
    purposes. The ids are generated via the IRContext.
    
    Major changes:
    * Instructions now contain a uint32_t for unique id and a cached context
    pointer
     * Most constructors have been modified to take a context as input
     * unfortunately I cannot remove the default and copy constructors, but
     developers should avoid these
    * Added accessors to parents of basic block and function
    * Removed the copy constructors for BasicBlock and Function and replaced
    them with Clone functions
    * Reworked BuildModule to return an IRContext owning the built module
     * Since all instructions require a context, the context now becomes the
    basic unit for IR
    * Added a constructor to context to create an owned module internally
    * Replaced uses of Instruction's copy constructor with Clone whereever I
    found them
    * Reworked the linker functionality to perform clones into a different
    context instead of moves
    * Updated many tests to be consistent with the above changes
     * Still need to add new tests to cover added functionality
    * Added comparison operators to Instruction
    
    Adding tests for Instruction, IRContext and IR loading
    
    Fixed some header comments for BuildModule
    
    Fixes to get tests passing again
    
    * Reordered two linker steps to avoid use/def problems
    * Fixed def/use manager uses in merge return pass
    * Added early return for GetAnnotations
    * Changed uses of Instruction::ToNop in passes to IRContext::KillInst
    
    Simplifying the uses for some contexts in passes

commit b02c9a58023da4b3a860294ca69d701d0bd203c4
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Nov 23 15:16:48 2017 -0500

    Allow derived access chain without uses in access chain conversion

commit ab892f7bd680bf2a7d98c9b806c07ce3de53c080
Author: Andrey Tuganov <andreyt@google.com>
Date:   Wed Nov 22 12:07:23 2017 -0500

    Add derivatives validation pass
    
    Checks operands of instructions in opcode range from OpDPdx to
    OpFwidthCoarse.

commit c2999273d920f08a67dacc74448654fc093ea8fe
Author: David Neto <dneto@google.com>
Date:   Wed Nov 22 15:18:37 2017 -0500

    Move SetContextMessageConsumer into libspirv namespace
    
    Avoid polluting the global namespace.

commit 28c415500dc0f4bddfbe2bff00f83a92f2680ded
Author: Steven Perron <stevenperron@google.com>
Date:   Fri Nov 10 20:26:55 2017 -0500

    Create a local value numbering pass
    
    Creates a pass that removes redundant instructions within the same basic
    block.  This will be implemented using a hash based value numbering
    algorithm.
    
    Added a number of functions that check for the Vulkan descriptor types.
    These are used to determine if we are variables are read-only or not.
    
    Implemented a function to check if loads and variables are read-only.
    Implemented kernel specific and shader specific versions.
    
    A big change is that the Combinator analysis in ADCE is factored out
    into the IRContext as an analysis. This was done because it is being
    reused in the value number table.

commit f407ae2b5004a2a53e4f303b8b44c868d1c4c228
Author: Andrey Tuganov <andreyt@google.com>
Date:   Thu Oct 26 15:30:23 2017 -0400

    Validator pass for image instructions
    
    Includes validation rules for OpImageXXX and ImageOperand.
    
    Doesn't include OpTypeImage and OpImageSparseXXX.
    
    Disabled an invalid test.

commit e28edd458b729da7bbfd51e375feb33103709e6f
Author: GregF <greg@LunarG.com>
Date:   Fri Nov 17 16:47:11 2017 -0700

    Optimize loads/stores on nested structs
    
    Also fix LocalAccessChainConvert test: nested structs now convert
    
    Add InsertExtractElim test for nested struct

commit b14291581fb2a515c3e195f0b6f44dd1a0307996
Author: Andrey Tuganov <andreyt@google.com>
Date:   Mon Nov 20 17:56:01 2017 -0500

    Fix move semantics in iterator make_range

commit 250a235a8dbc08fabc3cc3ce2f1f030baa8a3bc6
Author: Andrey Tuganov <andreyt@google.com>
Date:   Tue Nov 14 17:02:42 2017 -0500

    Add new compression algorithm and models
    
    Add new "short descriptor" algorithm to MARK-V codec.
    
    Add three shader compression models:
    lite - fast, poor compression
    mid - balanced
    max - best compression

commit a771713e4250358f2248eba95a16e362c8524b41
Author: Alan Baker <alanbaker@google.com>
Date:   Tue Nov 14 14:11:50 2017 -0500

    Adding an unique id to Instruction generated by IRContext
    
    Each instruction is given an unique id that can be used for ordering
    purposes. The ids are generated via the IRContext.
    
    Major changes:
    * Instructions now contain a uint32_t for unique id and a cached context
    pointer
     * Most constructors have been modified to take a context as input
     * unfortunately I cannot remove the default and copy constructors, but
     developers should avoid these
    * Added accessors to parents of basic block and function
    * Removed the copy constructors for BasicBlock and Function and replaced
    them with Clone functions
    * Reworked BuildModule to return an IRContext owning the built module
     * Since all instructions require a context, the context now becomes the
    basic unit for IR
    * Added a constructor to context to create an owned module internally
    * Replaced uses of Instruction's copy constructor with Clone whereever I
    found them
    * Reworked the linker functionality to perform clones into a different
    context instead of moves
    * Updated many tests to be consistent with the above changes
     * Still need to add new tests to cover added functionality
    * Added comparison operators to Instruction
    * Added an internal option to LinkerOptions to verify merged ids are
    unique
    * Added a test for the linker to verify merged ids are unique
    
    * Updated MergeReturnPass to supply a context
    * Updated DecorationManager to supply a context for cloned decorations
    
    * Reworked several portions of the def use tests in anticipation of next
    set of changes

commit 3214c3b0cac534a37adcd699ae792d5794752ea2
Author: Steven Perron <stevenperron@google.com>
Date:   Fri Nov 17 13:03:17 2017 -0500

    Add dead function elimination to -O and -Os
    
    This pass is very useful in reducing the size of the code, and reducing
    the amount of work done by other optimizations.

commit 4019bcfd5747874f6c00810ca871a49d5a2dbdd8
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Nov 17 16:33:32 2017 -0500

    Fix hard-coded header path
    
    If SPIRV-Tools is used as an external project and have
    googletest being kept in the same directory as it, we
    won't have gmock-matchers.h in external/. This will
    result in a compilation error.
    
    Use gmock.h instead.

commit dbf9b3762cd485d05387b495495e1a359da8ee37
Author: David Neto <dneto@google.com>
Date:   Wed Nov 15 13:37:52 2017 -0500

    Git should ignore external repos
    
    Ignore googletest, spirv-headers, effcee, and re2

commit eb4653a67f69b0b558ee20d45d57aba7a4b83b87
Author: Steven Perron <stevenperron@google.com>
Date:   Mon Nov 13 15:31:43 2017 -0500

    Add the decoration manager to the IRContext.
    
    To make the decoration manger available everywhere, and to reduce the
    number of times it needs to be build, I add one the IRContext.
    
    As the same time, I move code that modifies decoration instruction into
    the IRContext from mempass and the decoration manager.  This will make
    it easier to keep everything up to date.
    
    This should take care of issue #928.

commit a92d69b43d4203218362b78980164d50e21ac3f5
Author: Alan Baker <alanbaker@google.com>
Date:   Wed Nov 8 16:22:10 2017 -0500

    Initial implementation of merge return pass.
    
    Works with current DefUseManager infrastructure.
    
    Added merge return to the standard opts.
    
    Added validation to passes.
    
    Disabled pass for shader capabilty.

commit 0126ad97856bf2cfc43ed2b7a0e56b9b14588de0
Author: Lei Zhang <antiagainst@google.com>
Date:   Tue Nov 14 09:18:42 2017 -0500

    Appveyor: skip building tags

commit 919c990c95e0802fa2210751f7551b58e44d5d10
Author: Lei Zhang <antiagainst@google.com>
Date:   Mon Nov 13 14:55:20 2017 -0500

    Appveyor: Stop testing VS 2013/2015 Debug
    
    VS2017 Debug tests should suffice for intresting Debug cases.
    This will save us ~30min of waiting time for each build job.

commit 98281ed4116b1cf7f50a4747df29f29d70f2db9e
Author: Diego Novillo <dnovillo@google.com>
Date:   Fri Nov 10 09:39:00 2017 -0500

    Add analysis to compute mappings between instructions and basic blocks.
    
    This analysis builds a map from instructions to the basic block that
    contains them.  It is accessed via get_instr_block().  Once built, it is kept
    up-to-date by the IRContext, as long as instructions are removed via
    KillInst.
    
    I have not yet marked passes that preserve this analysis. I will do it
    in a separate change.
    
    Other changes:
    
    - Add documentation about analysis values requirement to be powers of 2.
    - Force a re-build of the def-use manager in tests.
    - Fix AllPreserveFirstOnlyAfterPassWithChange to use the
      DummyPassPreservesFirst pass.
    - Fix sentinel value for IRContext::Analysis enum.
    
    - Fix logic for checking if the instr<->block mapping is valid in KillInst.

commit a76d0977ac88ecd1e07884aea03eeee9f2b7db1b
Author: Daniel Schürmann <daniel.schuermann@campus.tu-berlin.de>
Date:   Tue Oct 24 18:28:18 2017 +0200

    Fix decorations of inlined functions.
    
    Fixes issue #728.  Currently the inliner is not generating decorations for
    inlined code which corresponds to function code which has decorations. An
    example of decorations that are relevant: RelaxedPrecision, NoContraction.
    
    The solution is to replicate the decoration during inlining.

commit 76555bd4bae0f751ca01a219de5b5fdb7e68f460
Author: David Neto <dneto@google.com>
Date:   Wed Nov 8 00:23:42 2017 -0500

    Tests: Add optional dependency on Effcee stateful matcher
    
    Add Effcee as an optional dependency for use in tests.  In future it will
    be a required dependency.
    
    Effcee is a stateful pattern matcher that has much of the functionality
    of LLVM's FileCheck, except in library form.  Effcee makes it much easier
    to write tests for optimization passes.
    
    Demonstrate its use in a test for the strength-reduction pass.
    
    Update README.md with example commands of how to get sources.
    
    Update Appveyor and Travis-CI build rules.
    
    Also: Include test libraries if not SPIRV_SKIP_TESTS
    - SPIRV_SKIP_TESTS is implied by SPIRV_SKIP_EXECUTABLES

commit efe12ff5a1b34d0e23d6a5515bfe0eb18aaa1761
Author: Steven Perron <stevenperron@google.com>
Date:   Thu Nov 9 11:24:41 2017 -0500

    Have all MemPasses preserve the def-use manager.
    
    Originally the passes that extended from MemPass were those that are
    of the def-use manager.  I am assuming they would be able to preserve
    it because of that.
    
    Added a check to verify consistency of the IRContext. The IRContext
    relies on the pass to tell it if something is invalidated.
    It is possible that the pass lied.  To help identify those situations,
    we will check if the valid analyses are correct after each pass.
    
    This will be enabled by default for the debug build, and disabled in the
    production build.  It can be disabled in the debug build by adding
    "-DSPIRV_CHECK_CONTEXT=OFF" to the cmake command.

commit 039c12f096af8e246679d8e5711f815971a149b2
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Nov 8 19:41:17 2017 -0500

    Travis: auto deploy build artifacts to GitHub Releases
    
    Pushing a commit to the master branch will trigger a build on
    Travis. If the build is successful, the artifacts will be
    collected and pushed to GitHub Releases, under the "master-tot"
    release.

commit 651ba75f8e3a594afc79030098363c1c5aaf435d
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Nov 8 16:44:53 2017 -0500

    Appveyor: auto deploy build artifacts to GitHub Releases
    
    Pushing a commit to the master branch will trigger a build on
    Appveyor. If the build is successful, the artifacts will be
    collected and pushed to GitHub Releases, under the "master-tot"
    release.

commit d2938e48427cb6e8d5996712c23496d62e3c08d1
Author: Diego Novillo <dnovillo@google.com>
Date:   Wed Nov 8 12:40:02 2017 -0500

    Re-format files in source, source/opt, source/util, source/val and tools.
    
    NFC. This just makes sure every file is formatted following the
    formatting definition in .clang-format.
    
    Re-formatted with:
    
    $ clang-format -i $(find source tools include -name '*.cpp')
    $ clang-format -i $(find source tools include -name '*.h')

commit f32d11f74b75eb7660375ab295fb9c150c429948
Author: Steven Perron <stevenperron@google.com>
Date:   Thu Nov 2 14:25:48 2017 -0400

    Add the IRContext (part 2): Add def-use manager
    
    This change will move the instances of the def-use manager to the
    IRContext.  This allows it to persists across optimization, and does
    not have to be rebuilt multiple times.
    
    Added test to ensure that the IRContext is validating and invalidating
    the analyses correctly.

commit ac04b2faeabc15811e8c542a5d7a36dbdba243b8
Author: GregF <greg@LunarG.com>
Date:   Mon Nov 6 11:25:24 2017 -0700

    Opt: Fix HasLoads to not report decoration as load.

commit d86c7ce808d26e8de7f885e126803607abb85cd8
Author: GregF <greg@LunarG.com>
Date:   Mon Nov 6 17:00:44 2017 -0700

    Opt: Remove CommonUniformElimination from -O and -Os (for now)
    
    It is causing crashes for some drivers. Will try to re-enable it once
    existing drivers are able to deal better with it.

commit 1affe5a3eec1d527cf9fd35cea10d8d81deee2c8
Author: David Neto <dneto@google.com>
Date:   Wed Oct 4 17:02:39 2017 -0400

    Describe public_spirv_tools_dev@khronos.org mailing list

commit 2dddb8193b499fe5292abd9ea05a3f4c8f4d3733
Author: Nuno Subtil <nsubtil@nvidia.com>
Date:   Tue Oct 31 20:08:23 2017 -0700

    Validate storage class of target pointer for OpStore

commit 9d6cc26226135a3aebd267df4ca429c4ac00b1e0
Author: Diego Novillo <dnovillo@google.com>
Date:   Thu Nov 2 11:51:07 2017 -0400

    Move class CFG from namespace opt to namespace ir.
    
    It makes more sense to have the CFG inside the ir name space, as it is
    descriptive of the representation.

commit fef669f30f8d81f21fbb9191046ec6c6b90c7f5a
Author: Diego Novillo <dnovillo@google.com>
Date:   Mon Oct 30 17:42:26 2017 -0400

    Add a new class opt::CFG to represent the CFG for the module.
    
    This class moves some of the CFG-related functionality into a new
    class opt::CFG.  There is some other code related to the CFG in the
    inliner and in opt::LocalSingleStoreElimPass that should also be moved,
    but that require more changes than this pure restructuring.
    
    I will move those bits in a follow-up PR.
    
    Currently, the CFG is computed every time a pass is instantiated, but
    this should be later moved to the new IRContext class that @s-perron is
    working on.
    
    Other re-factoring:
    
    - Add BasicBlock::ContinueBlockIdIfAny. Re-factored out of MergeBlockIdIfAny
    - Rewrite IsLoopHeader in terms of GetLoopMergeInst.
    - Run clang-format on some files.

commit 476cae6f7d415d03d607265cd1e8267e66be9f35
Author: Steven Perron <stevenperron@google.com>
Date:   Mon Oct 30 11:13:24 2017 -0400

    Add the IRContext (part 1)
    
    This is the first part of adding the IRContext.  This class is meant to
    hold the extra data that is build on top of the module that it
    owns.
    
    The first part will simply create the IRContext class and get it passed
    to the passes in place of the module.  For now it does not have any
    functionality of its own, but it acts more as a wrapper for the module.
    
    The functions that I added to the IRContext are those that either
    traverse the headers or add to them.  I did this because we may decide
    to have other ways of dealing with these sections (for example adding a
    type pool, or use the decoration manager).
    
    I also added the function that add to the header because the IRContext
    needs to know when an instruction is added to update other data
    structures appropriately.
    
    Note that there is still lots of work that needs to be done.  There are
    still many places that change the module, and do not inform the context.
    That will be the next step.

commit d861ceffd41d72f5eccc345eced950d649ff8a85
Author: Nuno Subtil <nsubtil@nvidia.com>
Date:   Thu Oct 26 13:20:32 2017 -0700

    Add validation for OpBranchConditional

commit 7299fb5b7c956ebbac59347670aa43c464060d28
Author: Andrey Tuganov <andreyt@google.com>
Date:   Mon Oct 30 13:17:58 2017 -0400

    Lowered initial capacity of move-to-front sequence
    
    Also fixed outdated comments.

commit b1b494835d33939eea4bcef2ccca2ec4280fe3b4
Author: Steven Perron <stevenperron@google.com>
Date:   Mon Oct 30 15:31:19 2017 -0400

    Fix copyright check when the build directory is in the source directory.
    
    The IDE I am using places the cmake build directory inside the source
    directory.  When that happens the copyright check fails because the
    build process creates a file CMakeCXXCompilerId.cpp.  That file does
    not have the copyright information, so the test fails.
    
    I want this file to be ignored, so I added its directory, CompilerIdCXX,
    to the list of directories to be ignored.

commit 94bec26afe1af1cfadce68cef9508130ae3d1bc5
Author: GregF <greg@LunarG.com>
Date:   Tue Oct 17 16:33:43 2017 -0600

    ADCE: Dead if elimination
    
    Mark structured conditional branches live only if one or more instructions
    in their associated construct is marked live. After closure, replace dead
    structured conditional branches with a branch to its merge and remove
    dead blocks.
    
    ADCE: Dead If Elim: Remove duplicate StructuredOrder code
    
    Also generalize ComputeStructuredOrder so that the caller can specify the
    root block for the order. Phi insertion uses pseudo_entry_block and adce and
    dead branch elim use the first block of the function.
    
    ADCE: Dead If Elim: Pull redundant code out of InsertPhiInstructions
    
    ADCE: Dead If Elim: Encapsulate CFG Cleanup Initialization
    
    ADCE: Dead If Elim: Remove redundant code from ADCE initialization
    
    ADCE: Dead If: Use CFGCleanup to eliminate newly dead blocks
    
    Moved bulk of CFG Cleanup code into MemPass.

commit 632e2068f382b86dd6631bc60dcbbe111c429166
Author: Diego Novillo <dnovillo@google.com>
Date:   Mon Oct 30 09:02:03 2017 -0400

    More re-factoring to simplify pass initialization.
    
    This implements two cleanups suggested by @s-perron
    (https://github.com/KhronosGroup/SPIRV-Tools/pull/921):
    
    - Move FindNamedOrDecoratedIds() into MemPass::InitializeProcessing().
    - Remove FinalizeNextId(). Always call SetIdBound() from
      Pass::TakeNextId().

commit 716138ee14c88ba0f0aa65a9a995f67e5ad252ec
Author: Steven Perron <stevenperron@google.com>
Date:   Tue Oct 24 15:13:13 2017 -0400

    Add option to relax validation of store types.
    
    There are a number of users of spriv-opt that are hitting errors
    because of stores with different types.  In general, this is wrong, but,
    in these cases, the types are the exact same except for decorations.
    
    The options is "--relax-store-struct", and it can be used with the
    validator or the optimizer.
    
    We assume that if layout information is missing it is consistent.  For
    example if one struct has a offset of one of its members, and the other
    one does not, we will still consider them as being layout compatible.
    The problem will be if both struct has and offset decoration for
    corresponding members, and the offset are different.

commit 6724c272515686398105813de0801407566ae914
Author: Andrey Tuganov <andreyt@google.com>
Date:   Fri Oct 27 11:31:39 2017 -0400

    Compression: removed 'presumed index' feature
    
    The feature used to improve compression of const integers which were
    presumed to be indices. Now obsolete as descriptor-based compression
    does this in a more generalized way.

commit f063f91d24f83790ba5c3fccd127624260c472f0
Author: Jesus Carabano <jcaraban@abo.fi>
Date:   Fri Oct 27 15:28:50 2017 +0300

    Use std::lower_bound for opcode lookup
    
    Use std::lower_bound for opcode-to-string
    
    Stable sort the generated instruction table.

commit 1040a95b3f5fd5348bb46fbf2e147376d50e909f
Author: Diego Novillo <dnovillo@google.com>
Date:   Wed Oct 25 13:26:25 2017 -0400

    Re-factor Phi insertion code out of LocalMultiStoreElimPass
    
    Including a re-factor of common behaviour into class Pass:
    
    The following functions are now in class Pass:
    
    - IsLoopHeader.
    - ComputeStructuredOrder
    - ComputeStructuredSuccessors (annoyingly, I could not re-factor all
      instances of this function, the copy in common_uniform_elim_pass.cpp
      is slightly different and fails with the common implementation).
    - GetPointeeTypeId
    - TakeNextId
    - FinalizeNextId
    - MergeBlockIdIfAny
    
    This is a NFC (non-functional change)

commit 94dc66b74d535078a6939c693825d019d4720180
Author: Steven Perron <stevenperron@google.com>
Date:   Fri Oct 13 14:25:21 2017 -0400

    Change the sections in the module to use the InstructionList class.
    
    This change will replace a number of the
    std::vector<std::unique_ptr<Instruction>> member of the module to
    InstructionList.  This is for consistency and to make it easier to
    delete instructions that are no longer needed.

commit 063dbea0f19a3926b81a34fa8dc5479fa7969739
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Oct 25 12:15:51 2017 -0400

    Turn all function static non-POD variables into global POD variables
    
    Function static non-POD data causes problems with DLL lifetime.
    This pull request turns all static info tables into strict POD
    tables. Specifically, the capabilities/extensions field of
    opcode/operand/extended-instruction table are turned into two
    fields, one for the count and the other a pointer to an array of
    capabilities/extensions. CapabilitySet/EnumSet are not used in
    the static table anymore, but they are still used for checking
    inclusion by constructing on the fly, which should be cheap for
    the majority cases.
    
    Also moves all these tables into the global namespace to avoid
    C++11 function static thread-safe initialization overhead.

commit 90862fe4b1c6763b32ce683d2d32c2f281f577cf
Author: Józef Kucia <joseph.kucia@gmail.com>
Date:   Fri Oct 13 21:53:58 2017 +0200

    Validate SpvOpVectorShuffle

commit 13e6598947845413b14a4bbe3469f9906f82cc63
Author: Jesus Carabano <jcaraban@abo.fi>
Date:   Sat Oct 21 19:39:32 2017 +0300

    restrict opcodes targeting OpDecorationGroup

commit 97990dc90739adfe0856b1fa1738818b90316cb0
Author: Daniel Schürmann <daniel.schuermann@campus.tu-berlin.de>
Date:   Tue Oct 24 13:24:08 2017 +0200

    Fixed --eliminate-common-uniform so that it does not eliminate loads of volatile variables.

commit 98072b749f04df878c0ae48e8514ccdf8fb89b6a
Author: David Neto <dneto@google.com>
Date:   Mon Oct 23 10:53:28 2017 -0400

    Optimizer: Line and NoLine are not debug1 or debug2
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/911

commit cfd95f3d5a732e9be9f193d35b04ae633940cfd7
Author: Andrey Tuganov <andreyt@google.com>
Date:   Tue Oct 17 17:38:04 2017 -0400

    Refactored compression debugger
    
    Markv codec now receives two optional callbacks:
    LogConsumer for internal codec logging
    DebugConsumer for testing if encoding->decoding produces the original
    results.

commit 8d6e4dbc7271ec31d0cf1b92ca94d7c2090ac55d
Author: Steven Perron <stevenperron@google.com>
Date:   Mon Oct 23 15:48:29 2017 -0400

    Run dead variable elimination when using -O and -Os
    
    We want to run the optimization when using -O and -Os, but it was not
    added at part of https://github.com/KhronosGroup/SPIRV-Tools/pull/905.
    This change will add that a well as some minor formatting changes
    requested in that same pull request.

commit e3a720933046c2c3e8baa03def79f1e17dfcc098
Author: GregF <greg@LunarG.com>
Date:   Mon Oct 16 17:30:52 2017 -0600

    DeadBranchElim: Fix dead block elimination
    
    The previous algorithm would leave invalid code in the case of unreachable
    blocks pointing into a dead branch. It would leave the unreachable blocks
    branching to labels that no longer exist. The previous algorithm also left
    unreachable blocks in some cases (a loop following an orphaned merge block).
    This fix also addresses that.
    
    This code will soon be replaced with the coming CFG cleanup.

commit 5834719fc17d4735fce0102738b87b70255cfd5f
Author: Steven Perron <stevenperron@google.com>
Date:   Fri Oct 20 12:17:41 2017 -0400

    Add pass to remove dead variables at the module level.
    
    There does not seem to be any pass that remove global variables.  I
    think we could use one.  This pass will look specifically for global
    variables that are not referenced and are not exported.  Any decoration
    associated with the variable will also be removed.  However, this could
    cause types or constants to become unreferenced.  They will not be
    removed.  Another pass will have to be called to remove those.

commit 24367947367fe9fe2524e7923391a284aa6c3476
Author: David Neto <dneto@google.com>
Date:   Fri Oct 20 18:04:20 2017 -0400

    Optimizer: OpModuleProcessed is in its own layout section
    
    This is a recent decision from the SPIR WG.  The spec update
    has not yet been published.
    Khronos SPIR-V internal issue 199

commit 89b6af90e91eb9e0efbd51c2b3b9909d9750d63c
Author: Andrey Tuganov <andreyt@google.com>
Date:   Thu Oct 19 16:02:47 2017 -0400

    Add Android.mk build to Travis CI
    
    Added NDK_LIBS_OUT

commit cfb711a68bbbba17db00477ef9fd0dad69395544
Author: Andrey Tuganov <andreyt@google.com>
Date:   Fri Oct 20 14:34:32 2017 -0400

    Added dummy android test application
    
    The application is needed to test Android.mk build.

commit d819f513f664ab82b15170da5cda710a52670cb5
Author: David Neto <dneto@google.com>
Date:   Fri Oct 20 16:51:20 2017 -0400

    Fix cfg_cleanup.cpp.  My bad.

commit e6f34166174255f263bec600dd573b2b777fe01a
Author: David Neto <dneto@google.com>
Date:   Thu Oct 19 15:56:23 2017 -0400

    Remove coding redundancy in cfg_cleanup_pass.cpp

commit a743c4767b86dbd1bf402d2d7fb13a27b68c418b
Author: Andrey Tuganov <andreyt@google.com>
Date:   Fri Oct 20 14:38:50 2017 -0400

    Add instruction_list to Android.mk

commit 39e25fd8ab6f40f43d0bd8877e5a64156add4f72
Author: Andrey Tuganov <andreyt@google.com>
Date:   Thu Sep 28 14:53:24 2017 -0400

    Add validation pass for conversion instructions
    
    The pass checks correctness of operands of instruction in opcode range
    OpConvertFToU - OpBitset.
    
    Disabled invalid tests
    
    Disabled UConvert validation until Vulkan CTS can catch up.
    
    Add validate_conversion to Android.mk
    
    Also remove duplicate entry in CMakeLists.txt.

commit bb7802b18cbf91fb8e2585f5db4d8db65c4c67f7
Author: Steven Perron <stevenperron@google.com>
Date:   Fri Oct 13 14:25:21 2017 -0400

    Change BasicBlock to use InstructionList to hold instructions.
    
    This is the first step in replacing the std::vector of Instruction
    pointers to using and intrusive linked list.
    
    To this end, we created the InstructionList class.  It inherites from
    the IntrusiveList class, but add the extra concept of ownership.  An
    InstructionList owns the instruction that are in it.  This is to be
    consistent with the current ownership rules where the vector owns the
    instruction that are in it.
    
    The other larger change is that the inst_ member of the BasicBlock class
    was changed to using the InstructionList class.
    
    Added test for the InsertBefore functions, and making sure that the
    InstructionList destructor will delete the elements that it contains.
    
    I've also add extra comments to explain ownership a little better.

commit ea9d1d02b7ae46049411685176e62e386d7a0f5a
Author: Andrey Tuganov <andreyt@google.com>
Date:   Thu Oct 19 13:00:52 2017 -0400

    Removed todos from validate_id.cpp
    
    Removed todos for validation of opcodes handles in other passes.

commit 863578a38d04dc9c8c9c72c080c775f53408c706
Author: David Neto <dneto@google.com>
Date:   Thu Oct 12 12:21:26 2017 -0400

    DeadBranchElim: Slightly more defensive coding

commit 8ec62deb231fc8961ef155d598e90fb370ce2fb1
Author: David Neto <dneto@google.com>
Date:   Thu Oct 19 15:22:02 2017 -0400

    The reviewed cfg_cleanup optimize pass

commit c75704ec083f02106bc8e88a094da2420afee1a4
Author: Diego Novillo <dnovillo@google.com>
Date:   Wed Sep 6 08:56:41 2017 -0400

    CFG cleanup pass - Remove unreachable blocks.
    
    - Adds a new pass CFGCleanupPass.  This serves as an umbrella pass to
      remove unnecessary cruft from a CFG.
    - Currently, the only cleanup operation done is the removal of
      unreachable basic blocks.
    - Adds unit tests.
    - Adds a flag to spirvopt to execute the pass (--cfg-cleanup).

commit f17326c9bdbdea75ab7e11816bcbef13d5b8a185
Author: David Neto <dneto@google.com>
Date:   Wed Oct 18 10:28:12 2017 -0400

    Android.mk: add source/opt/fold.cpp

commit 4101cf4687e12d59d31be143c57899d52771e4b4
Merge: 1a9061a2 332a1f14
Author: Diego Novillo <dnovillo@google.com>
Date:   Wed Oct 18 08:37:00 2017 -0400

    Merge pull request #885 from dnovillo/const-prop
    
    Re-factor generic constant folding code out of fold spec constants pass

commit 332a1f142243c9a4cc4ba8ee24449f1a182c7889
Author: Diego Novillo <dnovillo@google.com>
Date:   Tue Oct 17 19:41:37 2017 -0400

    Re-factor generic constant folding code out of FoldSpecConstantOpAndCompositePass
    
    There are no functional changes in this patch.  The generic folding
    routines in FoldSpecConstantOpAndCompositePass are now inside opt/fold.{cpp,h}.
    This code will be used by the upcoming constant propagation pass.  In
    time, we'll add more expression folding and simplification into these
    two files.

commit 1a9061a2be884eed0e518ac19866246a5c9babc0
Author: GregF <greg@LunarG.com>
Date:   Tue Oct 10 14:35:53 2017 -0600

    ADCE: Treat privates like locals in entry point with no calls
    
    This is needed for ongoing legalization of HLSL. It allows removal
    of accesses to textures/buffers that are not used.

commit 1e7994c0859707d550ff28d3d34c46b60afa36e2
Author: GregF <greg@LunarG.com>
Date:   Tue Oct 10 17:16:50 2017 -0600

    Opt: Move *NextId functionality into MemPass

commit 941a2341324d83dfec61d3d6b8effdeec6a87743
Author: David Neto <dneto@google.com>
Date:   Thu Oct 12 15:20:29 2017 -0400

    Validator: Test OpReturnValue type check
    
    The check already existed.  I added a test for it.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/876

commit 8de8dd8c8c69b5efb24e974e88df0d3b3f3e24d9
Author: Andrey Tuganov <andreyt@google.com>
Date:   Wed Oct 11 11:34:38 2017 -0400

    Reenable validate type unique pass
    
    Vulkan CTS patch fixing the instances of non-unique type declaration in
    autogenerated code has recently been submitted.

commit 2401fc0a726ce696f555108320fe602b35a5de82
Author: Andrey Tuganov <andreyt@google.com>
Date:   Tue Oct 3 17:36:37 2017 -0400

    Refactored MARK-V API
    
    - switched from C to C++
    - moved MARK-V model creation from backend to frontend
    - The same MARK-V model object can be used to encode/decode multiple
    files
    - Added MARK-V model factory (currently only one option)
    - Added --validate option to spirv-markv (run validation while
    encoding/decoding)

commit b54997e6ebd9e361ed438fd5cdb1de5dfa5f4f56
Author: Andrey Tuganov <andreyt@google.com>
Date:   Wed Oct 11 18:13:21 2017 -0400

    Validator checks OpReturn called from void func
    
    Added check into validate_cfg which checks that OpReturn is not called
    from functions which are supposed to return a value.

commit 720beb161a7c3802cbc086c05466b52e8f187e07
Author: Steven Perron <stevenperron@google.com>
Date:   Tue Oct 10 09:47:01 2017 -0400

    Generic intrusive linked list class.
    
    This commit is the initial implementation of the intrusive linked list
    class.  It includes the implementation in the header files, and unit
    test.
    
    The iterators are circular: incrementing end() gives begin() and
    decrementing begin() gives end().  Also made it valid to
    decrement end().
    
    Expliticly defines move constructor and move assignment
    - Visual Studio 2013 does not implicitly generate the move constructor or
      move assignments.  So they need to be explicit, otherwise it will try to
      use the copy constructor, which we explicitly deleted.
    - Can't use "= default" either.
      Seems like VS2013 does not support explicitly using the default move
      constructors and move assignments, so I wrote them out.

commit 63064bd9eba297a6c2d0cc45564c753e8757be27
Author: GregF <greg@LunarG.com>
Date:   Thu Oct 5 20:37:00 2017 -0600

    DeadBranchElim: Add dead case elimination
    
    Expands dead branch elimination to eliminate dead switch cases. It also
    changes dbe to eliminate orphaned merge blocks and recursively eliminate
    any blocks thereby orphaned.

commit 99f20438f7a79ee6ab4e0c58faa97b529a7c9dbc
Author: Andrey Tuganov <andreyt@google.com>
Date:   Thu Oct 5 19:07:31 2017 -0400

    Add Android.mk to SPIRV-Tools
    
    Android.mk was migrated from shaderc/third_party.
    
    android_test is a stub, only builds spirv-tools libs.h to test build.

commit c90d7305e7d88af45313bff8de91d4d0bbf65b12
Author: Diego Novillo <dnovillo@google.com>
Date:   Wed Aug 30 14:19:22 2017 -0400

    Add -O, -Os and -Oconfig flags.
    
    These flags are expanded to a series of spirv-opt flags with the
    following semantics:
    
    -O: expands to passes that attempt to improve the performance of the
        generated code.
    
    -Os: expands to passes that attempt to reduce the size of the generated
         code.
    
    -Oconfig=<file> expands to the sequence of passes determined by the
                    flags specified in the user-provided file.

commit c26778fa99ac1a282bb6815229811578a26b3c6a
Author: Tim Diekmann <t.diekmann.3dv@gmail.com>
Date:   Tue Oct 10 14:23:42 2017 +0200

    Set cmake-policy CMP0048 to NEW

commit 86627f7b3f725d390b6e09078db0f41f10c9d165
Author: Pierre Moreau <dev@pmoreau.org>
Date:   Thu Jul 13 02:16:51 2017 +0200

    Implement Linker (module combiner)
    
    Add extra iterators for ir::Module's sections
    Add extra getters to ir::Function
    Add a const version of BasicBlock::GetLabelInst()
    
    Use the max of all inputs' version as version
    
    Split debug in debug1 and debug2
    - Debug1 instructions have to be placed before debug2 instructions.
    
    Error out if different addressing or memory models are found
    
    Exit early if no binaries were given
    
    Error out if entry points are redeclared
    
    Implement copy ctors for Function and BasicBlock
    - Visual Studio ends up generating copy constructors that call deleted
      functions while compiling the linker code, while GCC and clang do not.
      So explicitly write those functions to avoid Visual Studio messing up.
    
    Move removing duplicate capabilities to its own pass
    
    Add functions running on all IDs present in an instruction
    
    Remove duplicate SpvOpExtInstImport
    
    Give default options value for link functions
    
    Remove linkage capability if not making a library
    
    Check types before allowing to link
    
    Detect if two types/variables/functions have different decorations
    
    Remove decorations of imported variables/functions and their types
    
    Add a DecorationManager
    
    Add a method for removing all decorations of id
    
    Add methods for removing operands from instructions
    
    Error out if one of the modules has a non-zero schema
    
    Update README.md to talk about the linker
    
    Do not freak out if an imported built-in variable has no export

commit 4b1577a0cbcfdbdbbe540b7ba91945b70ac7fb46
Author: Andrey Tuganov <andreyt@google.com>
Date:   Thu Oct 5 16:26:09 2017 -0400

    Remove duplicate dead branch elim pass declaration
    
    The function had two declarations in the same header with somewhat
    different comments.

commit d7f199b5d4b69941c83afd2d4c8e8752777f3cf2
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Thu Oct 5 11:01:34 2017 -0400

    Hack around bug in gcc-4.8.1 templates.
    
    This keeps the previous behavior for other compilers that will
    throw warnings on a negative shift operation, but works around
    the internal compiler error in GCC.

commit da04f5640e13d5c43ab5ba431837db09794f20ae
Author: GregF <greg@LunarG.com>
Date:   Fri Sep 29 16:22:39 2017 -0600

    AggressiveDCE: Fix to not treat parameter memory refs as local
    
    This fixes a bug that incorrectly deletes stores to parameters, which
    can be used to return values from functions.

commit c87e9671abb881cf83fccce2fe062e08d22c354b
Author: Pierre Moreau <dev@pmoreau.org>
Date:   Sun Oct 1 21:47:44 2017 +0200

    Compact-ids pass should update the header ID bound

commit 169266e9b884442810059dd49ad75884e1fc6e71
Author: David Neto <dneto@google.com>
Date:   Sun Oct 1 09:27:00 2017 -0400

    DiagnosticStream move ctor moves output duties to new object
    
    - Take over contents of the expiring message stream
    - Prevent the expiring object from emitting anything during destruction

commit 17a843c6b0ac39edce3ca45246b78c8f47c7ebee
Author: David Neto <dneto@google.com>
Date:   Thu Sep 28 11:14:00 2017 -0400

    Cache end iterators for speed
    
    Helps scaling of DefUseManager on modules with many thousands
    of instructions.

commit 6526c42603a75bc48d2ac6b94c5ef6816ca960a5
Author: jcaraban <jcaraban@abo.fi>
Date:   Fri Sep 29 08:55:41 2017 +0300

    No use to check OpBitCount result width

commit d7ea99bc044d400082f82bcdfca4a0e4ea4daa46
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Sep 27 21:22:05 2017 -0400

    Skip checking copyright if SPIRV_SKIP_TESTS is enabled

commit 6eaaf7b5f2d233d2d6288143df5dfdac12d84930
Author: David Neto <dneto@google.com>
Date:   Wed Sep 27 10:03:20 2017 -0400

    Update CHANGES to reflect fix for #827

commit 77feb8dd0315e3e2f8f04770c27d851fae3337e6
Author: David Neto <dneto@google.com>
Date:   Tue Sep 26 18:05:27 2017 -0400

    Compact-ids pass should update instruction's result_id member
    
    Also update the result type field.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/827

commit 99cd25c4139e0dc914ab8a5a3b75e6fed0ad1329
Author: Lei Zhang <antiagainst@google.com>
Date:   Tue Sep 26 13:55:23 2017 -0400

    Remove duplicated declaration of CreateAggressiveDCEPass().

commit 64d5e5214f3f3decc1e503a76614612f24f58010
Author: Andrey Tuganov <andreyt@google.com>
Date:   Mon Sep 18 16:49:11 2017 -0400

    Add bitwise operations validator pass
    
    The pass checks correctness of operand types of all bitwise instructions
    (opcode range from SpvOpShiftRightLogical to SpvOpBitCount).

commit dcf42433a63c9779cf1269a4e5f1caea3a887b63
Author: Andrey Tuganov <andreyt@google.com>
Date:   Mon Sep 18 13:06:40 2017 -0400

    Add remaining opcodes to arithmetics validation
    
    Add validation rules for:
    - OpIAddCarry
    - OpISubBorrow
    - OpUMulExtended
    - OpSMulExtended
    
    Includes some refactoring of old code.

commit d84df946081c354b98c72860df59e095d0c161a0
Author: David Neto <dneto@google.com>
Date:   Tue Sep 26 11:30:57 2017 -0400

    Update CHANGES with recent news

commit e43c91046b47b625116362672e08ab475daa0343
Author: Steven Perron <stevenperron@google.com>
Date:   Tue Sep 19 10:12:13 2017 -0400

    Create the dead function elimination pass
    
    Creates a pass called eliminate dead functions that looks for functions
    that could never be called, and deletes them from the module.
    
    To support this change a new function was added to the Pass class to
    traverse the call trees from diffent starting points.
    
    Includes a test to ensure that annotations are removed when deleting a
    dead function.  They were not, so fixed that up as well.
    
    Did some cleanup of the assembly for the test in pass_test.cpp.  Trying
    to make them smaller and easier to read.

commit 976e4218d59797d1860c1cb36c6ecadbdd443271
Author: Andrey Tuganov <andreyt@google.com>
Date:   Mon Sep 25 14:55:44 2017 -0400

    Detach MARK-V from the validator
    
    MARK-V codec was previously dependent on the validation state.
    Now it doesn't need the validator to function, but can still optionally
    create it and validate every instruction once it's decoded.

commit 16981f87fe93f11b554fb2bfcacbdc160d7a6c8b
Author: Lei Zhang <antiagainst@gmail.com>
Date:   Thu Sep 21 17:24:57 2017 -0400

    Avoid using global static variables
    
    Previously we have several grammar tables defined as global static
    variables and these grammar table entries contains non-POD struct
    fields (CapabilitySet/ExtensionSet). The initialization of these
    non-POD struct fields may require calling operator new. If used
    as a library and the caller defines its own operator new, things
    can screw up.
    
    This pull request changes all global static variables into
    function static variables, which is lazy evaluated in a thread
    safe way as guaranteed by C++11.

commit c25b5bea352d269ce93ecb5d3c636ca67e8cf341
Author: Andrey Tuganov <andreyt@google.com>
Date:   Mon Sep 25 12:45:48 2017 -0400

    Add SPIRV_SPIRV_COMPRESSION option to cmake
    
    The option is off by default.
    cmake -DSPIRV_BUILD_COMPRESSION=ON ..
    enables the compression lib, executable, and test build.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/834

commit cf6c20ee066d1c9305bb82591440e97655431ef9
Merge: 33b879c1 3f5e1a91
Author: Ehsan <ehsann@google.com>
Date:   Thu Sep 21 18:50:09 2017 -0400

    Merge pull request #829 from atgoo/fix_val_logicals
    
    Validator: fix logicals pass for OpSelect pointers

commit 3f5e1a91ae60c960bd99e883bb36371a9ec8e7bf
Author: Andrey Tuganov <andreyt@google.com>
Date:   Thu Sep 21 16:12:14 2017 -0400

    Validator: fix logicals pass for OpSelect pointers
    
    OpSelect works with pointers also when capability
    VariablePointersStorageBuffer is declared (before worked only with
    capability VariablePointers).

commit 33b879c105af0d5c7ef8cf76d5f862fc71a2babd
Author: David Neto <dneto@google.com>
Date:   Wed Sep 20 11:07:55 2017 -0400

    elim-multi-store: only patch loop header phis that we created
    
    There can already be OpPhi instructions in a loop header that
    are unrelated to the optimization.  We should not be patching those.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/826

commit cf85ad1429de560eb1569cf6b36ba5a4ae5ff4be
Author: Andrey Tuganov <andreyt@google.com>
Date:   Thu Sep 7 17:27:57 2017 -0400

    Add validate logicals pass to the validator
    
    New pass checks operands of all instructions listed under
    3.32.15. Relational and Logical Instructions

commit 4e3cc2f57fa6c10831af1e578cd8e176f919b31e
Author: Andrey Tuganov <andreyt@google.com>
Date:   Mon Sep 18 17:07:00 2017 -0400

    Refactored validate_aritmetics.cpp
    
    Improved error messages and readability.

commit 9b14dd0cb453f82eabb216f3709410e6df39a5a4
Author: Andrey Tuganov <andreyt@google.com>
Date:   Wed Sep 6 16:44:15 2017 -0400

    Updated markv_autogen
    
    - now includes a table of all descriptors with coding scheme
    (improves performance by 5% by allowing to avoid creation of
    move-to-front sequences which will never be used)
    - increased the size of markv_autogen.inc, clang doesn't seem
    to have the long compilation time problem now
    (probably was inadvertently fixed by using Huffman codec
    serialization)

commit 8be28f7524ffc30c1e70925b7d6b35dbc9e4caa2
Author: Greg Fischer <greg@lunarg.com>
Date:   Tue Sep 19 13:47:28 2017 -0600

    ElimLocalMultiStore: Reset structured successors for each function

commit e4c7d8e748a278242bb8f73fc753ef7a3283cfa4
Author: Steven Perron <stevenperron@google.com>
Date:   Fri Sep 8 12:08:03 2017 -0400

    Add strength reduction; for now replace multiply by power of 2
    
    Create a new optimization pass, strength reduction, which will replace
    integer multiplication by a constant power of 2 with an equivalent bit
    shift.  More changes could be added later.
    
    - Does not duplicate constants
    
    - Adds vector |Concat| utility function to a common test header.

commit 7be791aaaaa6459da4977d10b9034e687fcf4113
Author: GregF <greg@LunarG.com>
Date:   Tue Sep 12 18:15:09 2017 -0600

    ExtractInsert: Handle rudimentary CompositeConstruct and ConstantComposite
    
    This optimizes a single index extract whose composite value terminates with a
    CompositeConstruct (or ConstantComposite) by evaluating to the correct
    component. This was needed for opaque legalization.
    
    This highlights the need/opportunity to improve this optimization to deal
    with more complex composite expressions including currently handled ops
    plus Null ops and special vector composition. A TODO has been added.

commit a91cecfefca422af2a67a3b00135bab9eaabcc37
Author: David Neto <dneto@google.com>
Date:   Thu Sep 14 10:35:22 2017 -0400

    Recognize SPV_AMD_shader_fragment_mask

commit c6dfc11880653f8291f92a20e8a464dd051ca50d
Author: Andrey Tuganov <andreyt@google.com>
Date:   Wed Sep 6 14:30:27 2017 -0400

    Add new checks to validate arithmetics pass
    
    New operations:
    - OpDot
    - OpVectorTimesScalar
    - OpMatrixTimesScalar
    - OpVectorTimesMatrix
    - OpMatrixTimesVector
    - OpMatrixTimesMatrix
    - OpOuterProduct

commit 44421022472e8f4de4cb6dc7fde99bf1a6a0fee1
Author: David Neto <dneto@google.com>
Date:   Fri Sep 8 09:16:15 2017 -0400

    Update CHANGES for OpModuleProcessed validation rule

commit c843ef8ab5ed26fcd6b3da0867a047d9e0f4bf2e
Author: David Neto <dneto@google.com>
Date:   Thu Sep 7 17:38:31 2017 -0400

    validator: OpModuleProcessed allowed in layout section 7c
    
    Recent spec fix from SPIR Working group:
      Allow OpModuleProcessed after debug names, but before any
      annotation instructions.

commit b36acbec0eda3c58070d4e24210c86f4c5b26479
Author: Andrey Tuganov <andreyt@google.com>
Date:   Wed Aug 9 14:01:12 2017 -0400

    Update MARK-V to version 1.01
    
    Includes:
    - Multi-sequence move-to-front
    - Coding by id descriptor
    - Statistical coding of non-id words
    - Joint coding of opcode and num_operands
    
    Removed explicit form Huffman codec constructor
    - The standard use case for it is to be constructed from initializer list.
    
    Using serialization for Huffman codecs

commit 40e9c60ffea56f45f388835e6945b01d4d8b022d
Author: David Neto <dneto@google.com>
Date:   Fri Sep 1 18:12:15 2017 -0400

    spirv-as: Fail for unrecognized long option
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/798

commit 25ddfec08e548a3ff311f52d26c5d4e82e60df2e
Author: David Neto <dneto@google.com>
Date:   Sat Sep 2 19:01:03 2017 -0400

    Inliner: Fix LoopMerge when inline into loop header of multi block loop
    
    This adapts the fix for the single-block loop.  Split the loop like
    before.  But when we move the OpLoopMerge back to the loop header,
    redirect the continue target only when the original loop was a single
    block loop.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/800

commit 82df4bbd688a06792ced4db730f84348f5b9ab2e
Author: Andrey Tuganov <andreyt@google.com>
Date:   Wed Aug 30 10:13:10 2017 -0400

    Add validation pass for arithmetic operations
    
    The pass checks if arithmetic operations (such as OpFMul) receive
    correct operands.

commit 0d3b8329a4353814589cf444c6c1ba91bfb36bd7
Author: David Neto <dneto@google.com>
Date:   Thu Aug 17 13:53:14 2017 -0400

    Make enums for all currently published extensions
    
    Use the list from the SPIR-V registry page.  Also, capture it as
    a string so it's much easier to update via copy-paste.
    
    The validator will accept modules that declare these known
    extensions.  However, we might not know about new tokens or
    instructions declared in them.  For that we need grammar updates
    applied to SPIRV-Headers.

commit 7e2d26c77b606b21af839b37fd21381c4a669f23
Author: David Neto <dneto@google.com>
Date:   Fri Sep 1 16:28:22 2017 -0400

    Starge v2017.1-dev

commit d16403afb20aeff756c8412e80ae186400314f25
Author: David Neto <dneto@google.com>
Date:   Fri Sep 1 16:24:27 2017 -0400

    Create v2017.0
    
    Update README to describe that we understand SPIR-V syntax based on the
    grammar files included from the SPIRV-Headers repo.
    
    (Also, it's high time we issue a v2017 release!

commit a0977e863252466c6c5436f4a3698cff18ba511e
Author: David Neto <dneto@google.com>
Date:   Fri Sep 1 16:14:25 2017 -0400

    Finalize v2016.7

commit f2413743010ce79d66fa7f0ce9113a438e9717e4
Author: David Neto <dneto@google.com>
Date:   Fri Sep 1 16:13:12 2017 -0400

    Update CHANGES for recent inliner fixes

commit 32cf85dd5ab666189644f57df273826a561be192
Author: Andrey Tuganov <andreyt@google.com>
Date:   Mon Aug 28 18:36:52 2017 -0400

    Fix mingw build (source/print.cpp)
    
    source/print.cpp doesn't compile due to integer conversion.
    
    Tested by @dneto0 on a Windows machine.

commit 860c4197b06776bdcbb30e2104c95769837f0a3d
Author: David Neto <dneto@google.com>
Date:   Thu Aug 31 17:33:44 2017 -0400

    Inliner: Remap callee entry block id to single-trip loop header
    
    Otherwise cloned phis can be invalid.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/790

commit efff5fabfab59185bc9177f2e294f6cf27f094a5
Author: David Neto <dneto@google.com>
Date:   Thu Aug 31 15:47:31 2017 -0400

    Inline: Fix single-block loop caller cases
    
    If the caller block is a single-block loop and inlining will
    replace the caller block by several blocks, then:
    - The original OpLoopMerge instruction will end up in the *last*
      such block.  That's the wrong place to put it.
    - Move it back to the end of the first block.
    - Update its Continue Target ID to point to the last block
    
    We also have to take care of cases where the inlined code
    begins with a structured header block.  In this case
    we need to ensure the restored OpLoopMerge does not appear
    in the same block as the merge instruction from the callee's
    first block.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/787

commit cff2cd3343bbd4cca6b0f49507deb3a2f5e4c5c9
Author: David Neto <dneto@google.com>
Date:   Thu Aug 31 11:37:17 2017 -0400

    BasicBlock: add ctail, GetMergeInst, GetLoopMergeInst

commit e6279cde7ab245c610b7759d6a14b5869fbb8ac4
Author: David Neto <dneto@google.com>
Date:   Fri Sep 1 10:26:41 2017 -0400

    Update tests for new preferred name as ShaderViewportIndexLayerEXT
    
    This reacts to a recent update to SPIRV-Headers

commit d843cae48be019543ee7d61b5f65b97e08256d54
Author: David Neto <dneto@google.com>
Date:   Fri Sep 1 10:15:42 2017 -0400

    Update CHANGES for fix to 781

commit 725284c2ef838dd3b5708fde359d77b2aab78462
Author: Andrey Tuganov <andreyt@google.com>
Date:   Tue Aug 29 16:25:23 2017 -0400

    Extension allows multiple same OpTypePointer types
    
    SPV_KHR_variable_pointers allows OpTypePointer to declare multiple
    pointer identical types.
    
    https://github.com/KhronosGroup/SPIRV-Tools/issues/781

commit fc60d1e758a818b5314674b0efafc04eec40120d
Author: David Neto <dneto@google.com>
Date:   Wed Aug 30 14:25:23 2017 -0400

    Update CHANGES for fix to 776

commit 7c3de19ce75378e699dab024ecf1b30442030137
Author: GregF <greg@LunarG.com>
Date:   Wed Aug 23 17:05:38 2017 -0600

    DeadBranchElim: Fix dead block detection to ignore backedges
    
    - DeadBranchElim: Make sure to mark orphan'd merge blocks and continue
    targets as live.
    - Add test with loop in dead branch
    - Add test that orphan'd merge block is handled.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/776

commit b9b9a533344ed7550dd94de926d6aa29ce400f24
Author: GregF <greg@LunarG.com>
Date:   Mon Aug 28 18:02:14 2017 -0600

    InlineOpaque: Remove from usage until complete Opaque policy is designed.

commit 9090da5facf89f74d4b0449775da22ba8b4be544
Author: David Neto <dneto@google.com>
Date:   Tue Aug 29 23:22:07 2017 -0400

    Update changes for fix to issue 782

commit a699d1ade750b45326015211d2614b25506237a3
Author: GregF <greg@LunarG.com>
Date:   Tue Aug 29 18:35:05 2017 -0600

    Inline: Fix remapping of non-label forward references in callee phi

commit 1687bd32357154c2508701f8b5d9a26b4a3858cb
Author: David Neto <dneto@google.com>
Date:   Mon Aug 28 10:30:58 2017 -0400

    Disassembler: Print colour codes only when writing to a terminal

commit d41a52415aa1786ef0c90cf345f863392fedb69f
Author: Andrey Tuganov <andreyt@google.com>
Date:   Mon Aug 28 13:18:45 2017 -0400

    Fix encode zero bits on word boundary bug
    
    Bit stream writer was manifesting incorrect behaviour when the following
    two conditions were met:
    - writer was on 64-bit word boundary
    - WriteBits was invoked with num_bits=0 (can happen when a Huffman codec has only one
    value)
    
    The bug was causing very rare sporadic corruption which was detected by
    tests after a random experimental change in MARK-V model.

commit 63e1e348b097e21973f7aa960fac775635358f4b
Author: David Neto <dneto@google.com>
Date:   Thu Aug 24 18:11:23 2017 -0400

    Show result id for CompositeInsert validation failure

commit cdeb6695411ba2824453ac39e900df77feae1426
Author: GregF <greg@LunarG.com>
Date:   Thu Aug 24 16:36:53 2017 -0600

    README: Add reference to SPIR-V size reduction white paper

commit 0167758727b13bebd133644f3aa75a48d006608d
Author: David Neto <dneto@google.com>
Date:   Thu Aug 24 10:34:00 2017 -0400

    Windows: Increase intensity of blue text

commit 4fe8e389a7c8acd9db9e3cbf26d6f7e4bd8e93ae
Author: Lukas Hermanns <lukas.hermanns90@gmail.com>
Date:   Sun Aug 20 14:11:50 2017 +0200

    Fix: background color was erroneously reset on Win32 platform.
    
    Fix: background color was erroneously reset on Win32 platform.

commit 851ff8395ad59c6308e43da7ea5892e14a2d3fad
Author: David Neto <dneto@google.com>
Date:   Wed Aug 23 13:28:48 2017 -0400

    Updated capabilites for SampleMask
    
    SPIRV-Headers recently fixed the capability dependency
    for SampleMask.  It depends on Shader, not SampleRateShading

commit 429ca05b3f8cbec89845ed2e8e2f9026ad95f3d8
Author: GregF <greg@LunarG.com>
Date:   Tue Aug 15 17:58:28 2017 -0600

    Opt: Create InlineOpaquePass
    
    Only inline calls to functions with opaque params or return
    
    TODO: Handle parameter type or return type where the opqaue
    type is buried within an array.

commit c8c86a0d368bebaf924870d8fb49ea29798c96a6
Author: GregF <greg@LunarG.com>
Date:   Thu Aug 10 16:42:16 2017 -0600

    Opt: Have "size" passes process full entry point call tree.
    
    Includes code to deal correctly with OpFunctionParameter. This
    is needed by opaque propagation which may not exhaustively inline
    entry point functions.
    
    Adds ProcessEntryPointCallTree: a method to do work on the
    functions in the entry point call trees in a deterministic order.

commit 768d9b42d38c7562bd42dbc29b22c61046848ee8
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Aug 16 16:42:50 2017 -0400

    Support supplying extra definitions via CMAKE variable

commit 17d941af4fa87e920ae2779cb2f3b8decd99a9a0
Author: Andrey Tuganov <andreyt@google.com>
Date:   Fri Aug 11 16:51:24 2017 -0400

    Huffman codec can serialize to text
    
    Refactored the Huffman codec implementation and added ability to
    serialize to C++-like text format. This would reduce the time-complexity
    if loading hard-coded codecs.

commit 1d477b9898006887129a972d59719d9294a80c31
Author: GregF <greg@LunarG.com>
Date:   Tue Aug 15 15:54:41 2017 -0600

    Opt: Add opaque tests

commit 78cf86150e5a716b149046dcbab555ff7684a0a4
Author: Andrey Tuganov <andreyt@google.com>
Date:   Wed Aug 2 16:47:25 2017 -0400

    Add id descriptor feature to SPIR-V
    
    Id descriptors are computed as a recursive hash of all instructions used
    to define an id. Descriptors are invarint of actual id values and
    the similar code in different files would produce the same descriptors.
    
    Multiple ids can have the same descriptor. For example
    %1 = OpConstant %u32 1
    %2 = OpConstant %u32 1
    would produce two ids with the same descriptor. But
    %3 = OpConstant %s32 1
    %4 = OpConstant %u32 2
    would have descriptors different from %1 and %2.
    
    Descriptors will be used as handles of move-to-front sequences in SPIR-V
    compression.

commit b0310a4156345aa84d758284b8e43e55f31d8bd2
Author: GregF <greg@LunarG.com>
Date:   Fri Aug 4 15:04:37 2017 -0600

    ADCE: Add support for function calls
    
    ADCE will now generate correct code in the presence of function calls.
    This is needed for opaque type optimization needed by glslang. Currently
    all function calls are marked as live. TODO: mark calls live only if they
    write a non-local.

commit 720869bb52981394f5f09d6fc91ff233bbded7d9
Author: David Neto <dneto@google.com>
Date:   Thu Aug 10 13:13:33 2017 -0400

    Update CHANGE to list fix for issue 755

commit 2a1014be9cfec8a9868900f50335ee8b62e0a8b3
Author: David Neto <dneto@google.com>
Date:   Wed Aug 9 14:59:04 2017 -0400

    Inliner: callee can have early return that isn't multi-return
    
    Avoid generating an invalid OpLabel.
    Create the continue target for the single-trip loop only if
    you actually created the header for the single-trip loop.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/755

commit f0fe601dc8f2e8a2176d87fe60603a1ca306486c
Author: GregF <greg@LunarG.com>
Date:   Fri Aug 4 12:00:30 2017 -0600

    AccessChainConvert: Add HasOnlySupportedRefs()
    
    This avoids conversion on variables which will not ultimately be optimized.
    Also removed an obsolete restriction from FindTargetVars(). Also added
    decorates to supported refs (eg. RelaxedPrecision). Also fixed name to
    IsNonTypeDecorate().

commit e28bd3999780126a757254b46078c3f13abcf42f
Author: GregF <greg@LunarG.com>
Date:   Tue Aug 1 17:20:13 2017 -0600

    Inline: Split out InlineExhaustivePass from InlinePass

commit d9a450121ea22be5c534c1ced16b86ca79f93764
Author: GregF <greg@LunarG.com>
Date:   Thu Aug 3 17:27:02 2017 -0600

    Mem2Reg: Allow Image and Sampler types as base target types.

commit 95a600cd8d5804a5c6b0686207d72cb7632bbf84
Author: David Neto <dneto@google.com>
Date:   Fri Aug 4 17:48:22 2017 -0400

    Update CHANGES with common uniform loads pass

commit 0bd8300fc2d0b36d5a5f4228799c816ecbda8d20
Author: GregF <greg@LunarG.com>
Date:   Thu Aug 3 10:37:26 2017 -0600

    Update README.md with new code-reduction passes

commit f4b29f3bf79bd64c7b4855d5f9fde69eb224244a
Author: GregF <greg@LunarG.com>
Date:   Mon Jul 3 17:23:04 2017 -0600

    Add CommonUniformElim pass
    
    - UniformElim: Only process reachable blocks
    
    - UniformElim: Don't reuse loads of samplers and images across blocks.
      Added a second phase which only reuses loads within a block for samplers
      and images.
    
    - UniformElim: Upgrade CopyObject skipping in GetPtr
    
    - UniformElim: Add extensions whitelist
      Currently disallowing SPV_KHR_variable_pointers because it doesn't
      handle extended pointer forms.
    
    - UniformElim: Do not process shaders with GroupDecorate
    
    - UniformElim: Bail on shaders with non-32-bit ints.
    
    - UniformElim: Document support for only single index and add TODO.

commit c1b46eedbd8a33370d4bb97e553f8893f10a54f8
Author: GregF <greg@LunarG.com>
Date:   Thu Jul 27 13:30:12 2017 -0600

    Add MemPass, move all shared functions to it.

commit 30bee67439c0b2fd0be0780c135908b993d9410e
Author: Andrey Tuganov <andreyt@google.com>
Date:   Mon Jul 24 14:29:35 2017 -0400

    Add multi-sequence move-to-front implementation
    
    Add MultiMoveToFront class which supports multiple move-to-front
    sequences and allows to promote value in all sequences at once.
    
    Added caching for last accessed sequence handle and last accessed value
    in each sequence.

commit 15612fe028ce9000c2b66e0e35b95982795169d6
Author: David Neto <dneto@google.com>
Date:   Tue Aug 1 15:33:15 2017 -0400

    Update CHANGES with recently added optimizations

commit c5c233ba1e9ee94b4456297c3af0110ae27f7015
Author: GregF <greg@LunarG.com>
Date:   Tue Aug 1 12:55:29 2017 -0600

    Opt: Add new size-reduction passes to usage message.

commit 55b73a03650fdd0059b1dec932d9a5b9ca026eab
Author: Andrey Tuganov <andreyt@google.com>
Date:   Mon Jul 31 13:08:38 2017 -0400

    Added C++ code generation to spirv-stats
    
    The tool can now generate C++ code returning some of the historgrams and
    Huffman codecs generated from those historgrams.

commit 65b180f4514ed81a227fcbd41e8af6c8c2af44b0
Author: David Neto <dneto@google.com>
Date:   Tue Aug 1 11:42:28 2017 -0400

    Add Appveyor config that uses VS 2017

commit 7954740d542786acd071310a8978ffb3e2042b7c
Author: GregF <greg@LunarG.com>
Date:   Wed Jul 26 18:34:41 2017 -0400

    Opt: Delete names and decorations of dead instructions

commit 9f6efc76c8b8edf644194bec2c70cc3c4612726b
Author: Lei Zhang <antiagainst@google.com>
Date:   Mon Jul 24 11:43:47 2017 -0400

    Opt: HasOnlySupportedRefs should consider OpCopyObject
    
    This fixes test failure after merging the previous pull request.

commit 4a539d77efc987c82819101e4368a7a938664015
Author: Lei Zhang <antiagainst@google.com>
Date:   Mon Jul 24 10:37:38 2017 -0400

    Revert "Revert "Opt: LocalBlockElim: Add HasOnlySupportedRefs""
    
    This reverts commit df96e243c633b939690a42d89904e04f50126e86.

commit 118241558173ae5816500ab82821279996d8ee71
Author: GregF <greg@LunarG.com>
Date:   Tue Jul 18 18:57:26 2017 -0600

    Add extension whitelists to size-reduction passes.
    
    Currently only SPV_KHR_variable_pointers is disallowed in passes which
    do pointer analysis. Positive and negative tests of the general extensions
    mechanism were added to aggressive_dce but cover all passes.

commit df96e243c633b939690a42d89904e04f50126e86
Author: Lei Zhang <antiagainst@google.com>
Date:   Sat Jul 22 10:48:28 2017 -0400

    Revert "Opt: LocalBlockElim: Add HasOnlySupportedRefs"
    
    This reverts commit 2d0f7fbc1151004c4cf111b947f1070a03dfe092.

commit 2d0f7fbc1151004c4cf111b947f1070a03dfe092
Author: greg-lunarg <greg@lunarg.com>
Date:   Sat Jul 22 08:32:19 2017 -0600

    Opt: LocalBlockElim: Add HasOnlySupportedRefs
    
    Verifies that targeted variables have only access chain and direct
    loads and stores as references.

commit adb237f3bd73bfe8f7cc4e6d95a6bf1124f2fbe5
Author: GregF <greg@LunarG.com>
Date:   Tue Jul 18 14:42:51 2017 -0600

    Fix handling of CopyObject in GetPtr and its call sites

commit e9e4393b1c5aad7553c05782acefbe32b42644bd
Author: Lenny Komow <lenny@lunarg.com>
Date:   Thu Jul 13 11:13:14 2017 -0600

    Fix Visual Studio size_t cast compiler warning
    
    Visual Studio was complaining about possible loss of data on 64-bit
    builds, due to an implicit cast from size_t to int. This changes the
    data to use an int with no cast.

commit fe24e0316f77d987d8353745e95a8a6160e82855
Author: Greg Fischer <greg@lunarg.com>
Date:   Tue Jul 11 16:52:19 2017 -0600

    LocalMultiStore: Always put varId for backedge on loop phi function.
    
    And always patch the backedge operand when patching phi functions. This
    approach is more correct and cleaner. The previous code was generating
    incorrect phis when the backedge block had no predecessors.

commit e2544ddc908261ba0d3dd8898cc0001e9c349f76
Author: GregF <greg@LunarG.com>
Date:   Mon Jul 10 17:20:35 2017 -0600

    DeadBranchElim: Improve algorithm to only remove blocks with no predecessors
    
    Must be careful not to remove blocks pointed at by unreachable blocks

commit 06d4fd52c244ee5abf6819f721b9f68e5a3fcdb0
Author: David Neto <dneto@google.com>
Date:   Mon Jul 10 11:45:59 2017 -0400

    Minor code review feedback on AggressiveDCE

commit 9de4e698565dc63b9fb9e191f32e4575830ce527
Author: GregF <greg@LunarG.com>
Date:   Thu Jun 8 10:37:21 2017 -0600

    Add AggressiveDCEPass
    
    Create aggressive dead code elimination pass
    This pass eliminates unused code from functions. In addition,
    it detects and eliminates code which may have spurious uses but which do
    not contribute to the output of the function. The most common cause of
    such code sequences is summations in loops whose result is no longer used
    due to dead code elimination. This optimization has additional compile
    time cost over standard dead code elimination.
    
    This pass only processes entry point functions. It also only processes
    shaders with logical addressing. It currently will not process functions
    with function calls. It currently only supports the GLSL.std.450 extended
    instruction set. It currently does not support any extensions.
    
    This pass will be made more effective by first running passes that remove
    dead control flow and inlines function calls.
    
    This pass can be especially useful after running Local Access Chain
    Conversion, which tends to cause cycles of dead code to be left after
    Store/Load elimination passes are completed. These cycles cannot be
    eliminated with standard dead code elimination.
    
    Additionally: This transform uses a whitelist of instructions that it
    knows do have side effects, (a.k.a. combinators).  It assumes other
    instructions have side effects: it will not remove them, and assumes
    they have side effects via their ID operands.

commit cc8bad3a5b5d75921602720cd6a8957e2b716986
Author: GregF <greg@LunarG.com>
Date:   Fri Jun 16 15:37:31 2017 -0600

    Add LocalMultiStoreElim pass
    
    A SSA local variable load/store elimination pass.
    For every entry point function, eliminate all loads and stores of function
    scope variables only referenced with non-access-chain loads and stores.
    Eliminate the variables as well.
    
    The presence of access chain references and function calls can inhibit
    the above optimization.
    
    Only shader modules with logical addressing are currently processed.
    Currently modules with any extensions enabled are not processed. This
    is left for future work.
    
    This pass is most effective if preceeded by Inlining and
    LocalAccessChainConvert. LocalSingleStoreElim and LocalSingleBlockElim
    will reduce the work that this pass has to do.

commit 52e247f2216911507d2b9ab9b53c591e4b8c9d6f
Author: GregF <greg@LunarG.com>
Date:   Fri Jun 2 13:23:20 2017 -0600

    DeadBranchElim: Add DeadBranchElimPass

commit 35a06958441b68a74c9a817b33bba110b385d5f4
Author: David Neto <dneto@google.com>
Date:   Tue Jul 4 16:24:46 2017 -0400

    Include memory and semantics IDs when iterating over inbound IDs
    
    Fixes Instruction::ForEachInId so it covers
    SPV_OPERAND_TYPE_MEMORY_SEMANTICS_ID and SPV_OPERAND_TYPE_SCOPE_ID.
    Future proof a bit by using the common spvIsIdType routine.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/697

commit abc6f5a67288b50846b9ef5f21a8100edd36d7c8
Author: Andrey Tuganov <andreyt@google.com>
Date:   Fri Jun 30 14:59:24 2017 -0400

    MARK-V decoder supports extended instructions

commit 826d968a637e1405f9328f758f72a63d5ec0e9c7
Author: David Neto <dneto@google.com>
Date:   Tue Jul 4 12:27:31 2017 -0400

    Update CHANGES to say we use GNUIntallDirs

commit fd70a1d7a094b26f7cc3b3da48e8609d82471847
Author: d3x0r <d3x0r@users.noreply.github.com>
Date:   Tue Jul 4 06:11:40 2017 -0700

    Define variable to skip installation
    
    If this is used as a static library in another project, this does not
    need to be installed, and otherwise will just clutter the application's install.
    To use, define SKIP_SPIRV_TOOLS_INSTALL which internally defines
    ENABLE_SPIRV_TOOLS_INSTALL to control installation.
    
    Also include GNUInstallDirs to get standard output 'lib' directory which is sometimes 'lib64' and not 'lib'

commit 78338d5ba91f58428400c6619c131acc95512ff0
Author: Chris Forbes <chrisforbes@google.com>
Date:   Tue Jun 27 16:28:22 2017 -0700

    Convert pattern stack from deque to vector, and share it
    
    Also move various vector::reserve calls to State ctor
    Negligible perf benefit, but more tidy.

commit e842c17eb5a25c2856781f71a2e1876c58279f9d
Author: Andrey Tuganov <andreyt@google.com>
Date:   Thu Jun 29 15:05:34 2017 -0400

    Added fixed width encoding to bit_stream
    
    Fixed width encoding is intended to be used for small unsigned integers
    when the upper bound is known both to the encoder and the decoder
    (for example move-to-front rank).

commit 73e8dac5b925f979d5c9e94770fb104fcc539ac2
Author: Andrey Tuganov <andreyt@google.com>
Date:   Wed May 31 13:07:51 2017 -0400

    Added compression tool tools/spirv-markv. Work in progress.
    
    Command line application is located at tools/spirv-markv
    API at include/spirv-tools/markv.h
    
    At the moment only very basic compression is implemented, mostly varint.
    Scope of supported SPIR-V opcodes is also limited.
    
    Using a simple move-to-front implementation instead of encoding mapped
    ids.
    
    Work in progress:
    - Does not cover all of SPIR-V
    - Does not promise compatibility of compression/decompression across
      different versions of the code.

commit 8d3882a40807f0df5d7b5c09239f47f6c209eb46
Author: Andrey Tuganov <andreyt@google.com>
Date:   Mon Jun 12 12:01:39 2017 -0400

    Added log(n) move-to-front implementation
    
    The implementation is based on AVL and order statistic tree.
    
    It accepts all kinds of values and the implementation
    doesn't expect the behaviour to be consistent with id coding.
    
    Intended by SPIR-V compression algorithms.

commit 40a2829611c1ae4a629f4e6bc00bdf89e32ea67d
Author: Andrey Tuganov <andreyt@google.com>
Date:   Thu May 25 11:21:12 2017 -0400

    Added Huffman codec to utils
    
    Attached ids to Huffman nodes for deterministic internal node
    comparison.

commit 65ea885234dc4038925e26fcb25109db9c30529b
Author: Lei Zhang <antiagainst@google.com>
Date:   Tue Jun 27 11:20:34 2017 -0400

    Travis CI: stop requiring sudo and use make instead of ninja
    
    This gives us shorter testing time since we can use the container
    based testing environment, which starts faster. Also using make
    means we don't need to install ninja separately.

commit d431b69c28f1d608a14e85b93c60e99e85984c16
Author: Chris Forbes <chrisforbes@google.com>
Date:   Tue Jun 27 14:21:33 2017 -0700

    Don't do hash lookup twice in FindDef

commit c14966b882070f4078e26fb0beae11dacabf4810
Author: Chris Forbes <chrisforbes@google.com>
Date:   Tue Jun 27 14:21:00 2017 -0700

    Move spv_instruction_t's into vector
    
    No need to incur another copy here. These guys have embedded vectors
    we'd rather not copy.

commit 1cd47d7af20c1fd9985e7a48dadd797c400f315d
Author: Chris Forbes <chrisforbes@google.com>
Date:   Tue Jun 27 11:55:14 2017 -0700

    Reserve expected length of instructions vector

commit fcd991f081ae87ea897df1cfbc9027b78578e1ce
Author: Chris Forbes <chrisforbes@google.com>
Date:   Tue Jun 27 11:00:06 2017 -0700

    Move some temp vectors into parser state
    
    We don't need to churn the allocations for these every instruction.

commit ad1d0351a0ba341e980c6e7c226323c008d96b51
Author: GregF <greg@LunarG.com>
Date:   Wed Jun 7 15:28:53 2017 -0600

    BlockMerge: Add BlockMergePass
    
    Also, add BasicBlock::tail()

commit 0b0454c42c6b6f6746434bd5c78c5c70f65d9c51
Author: David Neto <dneto@google.com>
Date:   Thu Jun 22 10:22:55 2017 -0400

    Update CHANGES
    
    - Describe support for AMD extensions
    - Describe recently added optimizer passes

commit 5fbbadca4e6e9b411ecf2f1ca58ecc48d789495a
Author: Rex Xu <rex.xu@amd.com>
Date:   Wed Jun 21 15:58:00 2017 +0800

    Add support for SPV AMD extensions

commit 6136bf9e0b8f8a3fbaaca2edd927aa8dc7715d9d
Author: GregF <greg@LunarG.com>
Date:   Fri May 26 10:33:11 2017 -0600

    mem2reg: Add InsertExtractElimPass

commit 760789f58d950f6669c00d7eaafdf1721e3dc71c
Author: David Neto <dneto@google.com>
Date:   Tue Jun 20 15:57:47 2017 -0400

    Transform multiple entry points
    
    Don't stop just after one because of short-circuiting logical-or.

commit 0c5722fc01950927b57e24277cbdf28c8b7e1d85
Author: GregF <greg@LunarG.com>
Date:   Fri May 19 17:31:28 2017 -0600

    mem2reg: Add LocalSingleStoreElimPass
    
    Eliminate function scope variables with one store, if possible.

commit 7c8da66bc27cc5c4ccb6a0fa612f56c9417518ff
Author: GregF <greg@LunarG.com>
Date:   Thu May 18 14:51:55 2017 -0600

    mem2reg: Add pass to eliminate local loads and stores in single block.

commit 1567cddc3638576dab901e9098592c69bcf622fa
Author: rdb <git@rdb.name>
Date:   Wed Jun 7 12:14:31 2017 +0200

    Don't install googletest and googlemock

commit aa7e687ef0a14066a12d0eb3825a2301f32363cb
Author: GregF <greg@LunarG.com>
Date:   Fri May 12 17:27:21 2017 -0600

    Mem2Reg: Add Local Access Chain Convert pass
    
    - Supports OpAccessChain and OpInBoundsAccessChain
    - Does not process modules with non-32-bit integer types.

commit d71d97687591db13f27ddcdf23a266ad7f2c4741
Author: Gabríel Arthúr Pétursson <gabriel@system.is>
Date:   Sat Jun 3 23:08:22 2017 +0000

    Fix memory leak in ValidateBinaryUsingContextAndValidationState

commit 66fc10564c8dfb4b50543b62777f5d9c41404c57
Author: Andrey Tuganov <andreyt@google.com>
Date:   Tue May 30 13:29:13 2017 -0400

    Bots print output from timed out tests
    
    Timeout set to 300 seconds. If no timeout, then ctest itself will be
    timed out and terminated leaving no output.

commit e7aff807a0907b5fc1eb263d71ac27c26f48950f
Author: Andrey Tuganov <andreyt@google.com>
Date:   Mon May 29 13:26:46 2017 -0400

    Fixed misspelled ctest flag --output_on_failure

commit ddf4de61c94937f1d5dfc0458a895e94b1be449b
Author: rdb <git@rdb.name>
Date:   Sun May 28 23:19:58 2017 +0200

    Support building on FreeBSD

commit 3bea99d378af1dd2fc0baca3e0d38ec0d8169d1b
Author: Greg Fischer <greg@lunarg.com>
Date:   Tue May 23 11:31:56 2017 -0600

    CFA: Move TraversalRoots and ComputeAugmentedCFG into CFA

commit d6f29790687f697ee3cb0bf105e365dba5faf384
Author: Greg Fischer <greg@lunarg.com>
Date:   Mon May 8 18:32:12 2017 -0600

    CFA: Pull in CalculateDominators

commit df6537cee00f3459eaf48025643325c94a95157f
Author: GregF <greg@LunarG.com>
Date:   Wed May 17 13:33:47 2017 -0600

    DefUseManager: Fix ReplaceAllUsesWith() to update inst_to_used_ids_

commit 20fe9466662a9890246dacc6e5f6a3df5a8fb369
Author: Andrey Tuganov <andreyt@google.com>
Date:   Thu May 11 15:32:29 2017 -0400

    Added extension SPV_VALIDATOR_ignore_type_decl_unique
    
    If extension is present in the module, validator will ignore the "type
    declaration must be unique" rule.

commit 3492cc63b89156a605a28fb2cc78244791286f59
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed May 17 14:12:25 2017 -0400

    Remove unused this in lambda capture

commit dbc2049aa35a06b160b91fb76820358a17b77bfa
Author: David Neto <dneto@google.com>
Date:   Tue Mar 14 12:43:41 2017 -0400

    Add SPIR-V 1.2 support, for OpenCL 2.2

commit eb720b2ad1d80159a82ebb2b47e2ea7b911dba67
Author: David Neto <dneto@google.com>
Date:   Mon May 15 11:55:22 2017 -0400

    Fix size_t conversion error on MinGW

commit 51b677837973f8d91e85cb0c1a92d5d4ea5968f7
Author: David Neto <dneto@google.com>
Date:   Fri May 12 17:35:18 2017 -0400

    Update CHANGES: note fix of issue 629

commit bba812f4e4b7e5c8c6c4f08e9bb1686761c9bbb8
Author: Greg Fischer <greg@lunarg.com>
Date:   Thu May 4 20:55:53 2017 -0600

    Inline: Inline early return function if no returns in loop.

commit 3eb716cae4ccbfb7e4d6d7d78c4488fb16fdc81a
Author: Andrey Tuganov <andreyt@google.com>
Date:   Mon Apr 24 15:17:33 2017 -0400

    Added bit stream utils
    
    Also added generalized zigzag coding.
    - Due to signed integers being mostly non-negative, improved zigzag coding
      to favor positive values.

commit f5facf842f10bda07f85db7661b5f71121891434
Author: Andrey Tuganov <andreyt@google.com>
Date:   Thu May 4 13:35:52 2017 -0400

    Stats analyzer aggregates OpConstant usage

commit b4cf3719368491e5aab662eeedb28b5b60045c87
Author: Andrey Tuganov <andreyt@google.com>
Date:   Wed May 3 15:26:39 2017 -0400

    Stats analyzer uses validator
    
    Stats analyzer calls validator to check the instruction and update
    validator state.
    
    Fixed unit tests (validator was failing).

commit 01b28750bf8ecda48e0f2f6a16d0363450e205d9
Author: David Neto <dneto@google.com>
Date:   Mon May 8 15:39:30 2017 -0400

    Avoid snprintf warning in GCC 7.1
    
    Tries to fix https://github.com/KhronosGroup/SPIRV-Tools/issues/642
    See also https://gcc.gnu.org/bugzilla/show_bug.cgi?id=80655

commit b25b3300690be08a7df2a5af3da7214b96ebc639
Author: Greg Fischer <greg@lunarg.com>
Date:   Fri Apr 28 13:38:10 2017 -0600

    Inline: Create CFA class
    
    Create class to encapsulate control flow analysis and share across
    validator and optimizer. A WIP. Start with DepthFirstTraversal. Next
    pull in CalculateDominators.

commit 3f90058d2ff26ba20c84dd10d917720027f391b9
Author: Mike Lothain <mike@fireburn.co.uk>
Date:   Mon May 8 13:56:45 2017 +0100

    Update set_spec_const_default_value_test.cpp
    
    Work around warning of dangling else

commit 87a3f651e2416c830cb1eab410b3616068395985
Author: Andrey Tuganov <andreyt@google.com>
Date:   Thu Apr 20 15:32:38 2017 -0400

    Added Markov chain analysis to stats
    
    Added data structure to SpirvStats which is used to collect statistics
    on opcodes following other opcodes.
    
    Added a simple analysis print-out to spirv-stats.

commit bad90d9f12483b243cb1a0e740b640b1b987174b
Author: Greg Fischer <greg@lunarg.com>
Date:   Tue Apr 25 18:07:35 2017 -0600

    Inline: Change "--inline-entry-points-all" to "-exhaustive"

commit d870dbe6a94e736b8dcdea82ef28828e5c7b8115
Author: Greg Fischer <greg@lunarg.com>
Date:   Tue Apr 25 17:47:18 2017 -0600

    Inline: Fix inliner description in usage message to reflect exceptions.

commit a107d349e3fc124b43f04488a991c5cadf7abac4
Author: GregF <greg@LunarG.com>
Date:   Tue Apr 25 13:57:20 2017 -0600

    Inline: Do not inline functions with multiple returns (for now)

commit 144f59e4513064c404709035e369498d0e80016f
Author: qining <qining@google.com>
Date:   Wed Apr 19 18:10:59 2017 -0400

    Add bit pattern interface for setting default value for spec constants

commit 1d8efb02edc12a27ca0430f632811bb4244898aa
Author: David Neto <dneto@google.com>
Date:   Thu Apr 20 15:54:10 2017 -0400

    Update CHANGES with recent news

commit 1e309af80a4486f8826b66a4ea37777ed874ff87
Author: Andrey Tuganov <andreyt@google.com>
Date:   Tue Apr 11 15:11:04 2017 -0400

    Added --compact-ids to /tools/opt
    
    The pass remaps ids to a compact set which starts with %1 and
    has no gaps.

commit b173d1c3cdc7b2cba4302661e60e2f56ca98d34c
Author: Andrey Tuganov <andreyt@google.com>
Date:   Tue Apr 11 19:46:15 2017 -0400

    Added option --preserve-numeric-ids to tools/spirv-as
    
    Added options to tools::Assemble

commit 4f216402ba6467ddcf929866243995a31192817f
Author: Andrey Tuganov <andreyt@google.com>
Date:   Thu Apr 6 16:55:26 2017 -0400

    Added statistical analysis tool (tool/stats)
    
    Currently analyzes percentages of the following:
    - version (how many 1.0 or 1.1)
    - generator
    - extension
    - capability
    - opcode prevalence

commit 72debb8fd41ab327380e3916be81e0b8d6b7799b
Author: David Neto <dneto@google.com>
Date:   Thu Apr 6 11:04:09 2017 -0400

    Test source language HLSL

commit bf68c814268cfa8b0311f93f16db4c3eed6eb7d2
Author: David Neto <dneto@google.com>
Date:   Sat Mar 25 21:12:22 2017 -0400

    Support SPV_KHR_storage_buffer_storage_class
    
    Includes interaction with SPV_KHR_variable_pointers
    
    TODO: Update capabilitly dependency tests for new capabilities.

commit 23af06c3a308a4e388412809788add9a8510fe80
Author: Ehsan Nasiri <ehsann@google.com>
Date:   Wed Feb 1 15:37:39 2017 -0500

    Validator support for Variable Pointer extension.
    
    If the variable_pointer extension is used:
    
    * OpLoad's pointer argument may be the result of any of the following:
     * OpSelect
     * OpPhi
     * OpFunctionCall
     * OpPtrAccessChain
     * OpCopyObject
     * OpLoad
     * OpConstantNull
    
    * Return value of a function may be a pointer.
    
    * It is valid to use a pointer as the return value of a function.
    
    * OpStore should allow a variable pointer argument.

commit 4895ace29b8b091fa9a19364afd3e1c0f096aa3c
Author: David Neto <dneto@google.com>
Date:   Mon Mar 20 12:28:40 2017 -0400

    Update cap tests for SPV_KHR_16bit_storage

commit 4087e89bc615206aebc7c27d45035bbf5939951b
Author: David Neto <dneto@google.com>
Date:   Wed Mar 8 17:16:04 2017 -0500

    Test asm,dis support for SPV_KHR_variable_pointers

commit 11a867f412fbfcb630de21fe399f994ba12f82f2
Author: David Neto <dneto@google.com>
Date:   Sat Apr 1 16:10:16 2017 -0400

    Add FlattenDecoration transform
    
    Add --flatten-decorations to spirv-opt
    
    Flattens decoration groups.  That is, replace OpDecorationGroup
    and its uses in OpGroupDecorate and OpGroupMemberDecorate with
    ordinary OpDecorate and OpMemberDecorate instructions.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/602

commit 5c3c054c1fe6c8dfa27adf2bdec3b7a9db3e53ea
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Apr 5 17:32:39 2017 -0400

    Group targets into folders
    
    This plays nicer with IDEs.

commit dec3f5e23158eccc1ed710fbec9bd2934ed10447
Author: David Neto <dneto@google.com>
Date:   Sun Apr 2 02:36:35 2017 -0400

    Update spirv-opt to use spvtools::Optimizer
    
    Exercises our public APIs more, and avoid including most
    internal headers.  It also shortens the processing part
    of the code, but does make adding passes look more complex.
    
    Doing this exposed issue 611, a bug in spvtools::Optimizer.

commit afc60bbebfeb8cc4d04cc904e562f4a53f58613f
Author: David Neto <dneto@google.com>
Date:   Sun Apr 2 02:17:41 2017 -0400

    Fix optimizer on when to write the binary
    
    The spvtools::Optimizer::Run method should also write the output binary
    if optimization succeeds without changes but the output binary vector
    does not have exactly the same contents as the input binary.
    We have to check both the base pointer of the storage and the size of
    the vector
    
    Added a test for this too.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/611

commit ad3b08280d693fbdb72e925600945e015fa7b578
Author: Lei Zhang <antiagainst@google.com>
Date:   Mon Apr 3 13:41:20 2017 -0400

    Add /EHs for targets for MSVC

commit 4be6abe30dc2931084575635a118b5e113344388
Author: David Neto <dneto@google.com>
Date:   Mon Apr 3 14:59:18 2017 -0400

    Fix spelling in SPV_AMD_gcn_shader support

commit 58e7a3e60798b40497dfbcea754450f2d3b2b4ab
Author: David Neto <dneto@google.com>
Date:   Sat Apr 1 11:19:40 2017 -0400

    Fix typo in method name Struct::AddMemberName
    
    Also add a method comment for it.

commit ceb1d4f2fdbd48d7de94a693a77b1153d03f1431
Author: David Neto <dneto@google.com>
Date:   Fri Mar 31 10:36:58 2017 -0400

    Avoid inlining calls to external functions
    
    External functions don't have bodies to inline anyway.
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/605

commit 4fc930229dff7669aaf315e0563bc586242d8e79
Author: David Neto <dneto@google.com>
Date:   Fri Mar 31 10:36:10 2017 -0400

    opt::Function::cbegin and cend are const

commit 6cd4517730129fb951617268de80dce314bcb686
Author: David Neto <dneto@google.com>
Date:   Wed Mar 29 17:11:51 2017 -0400

    Mention inliner in CHANGES

commit 2410e0085170e227311a799d290613dd59e093d7
Author: David Neto <dneto@google.com>
Date:   Wed Mar 29 17:11:16 2017 -0400

    Add low priority test suggestions for inliner

commit 04fcc6674333914e9b8da9e4c103de638ef4c609
Author: Greg Fischer <greg@lunarg.com>
Date:   Thu Nov 10 10:11:50 2016 -0700

    Add exhaustive function call inlining to spirv-opt
    
    Inlining is done for all functions designated as entry points.
    
    Add optional validation to test fixture method SinglePassRunAndCheck.

commit b85997a1df2c050855837989d7c7aa73be8e3a9b
Author: David Srbecky <dsrbecky@google.com>
Date:   Sun Mar 26 20:08:41 2017 +0100

    Add various accessors needed to read and edit SPIRV code.

commit 7fe8a57a5bd72094e91f9f93e51dac2f2461dcb4
Author: David Neto <dneto@google.com>
Date:   Tue Mar 21 12:43:26 2017 -0400

    Support SPV_AMD_gcn_shader
    
    Supported in assembler, disassembler, and binary parser.
    
    The validator does not check SPV_AMD_gcn_shader validation rules
    beyond parsing the extension.
    
    Adds generic support for generating instruction tables for vendor
    extensions.
    
    Adds generic support for extensions the validator should recognize
    (but not check) but which aren't derived from the SPIR-V core
    grammar file.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/594

commit fa834dea408935c7e86ee985bef24dbf964962b7
Author: David Neto <dneto@google.com>
Date:   Thu Mar 16 16:13:47 2017 -0400

    Fix validator message for bad logical pointer
    
    Affects OpLoad and OpStore validation.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/588

commit ddd40f855b0e5c336cfab95782cc6d49d57ae995
Author: David Neto <dneto@google.com>
Date:   Thu Mar 23 15:46:08 2017 -0400

    Update capability tests for SPV_KHR_16bit_storage rev 7
    
    The SPIR-V core grammar file in a recent SPIRV-Headers
    applied the fix from Rev 7 of SPV_KHR_16bit_storage:
    FPRoundingMode enums are now enabled by the capabilities
    introduced by that extension.
    
    Update the SPIRV-Tools tests accordingly.

commit 654feb32f286060fc168c5976728c1b9822eac92
Author: David Neto <dneto@google.com>
Date:   Mon Mar 20 11:23:35 2017 -0400

    Do nothing if trying to make the current dir

commit c3caa546a08e0f9d8230d34c9177a9778d956b86
Author: David Neto <dneto@google.com>
Date:   Thu Mar 16 15:19:51 2017 -0400

    spirv-val prints warnings
    
    Warnings and info messages go to stdout.
    Errors still go to stderr.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/568

commit 0066a363d67d94bcb34f41b326f61ac44305eeca
Author: David Neto <dneto@google.com>
Date:   Thu Mar 16 15:06:12 2017 -0400

    Add SpirvTools::Validate that takes an options object
    
    Add spvtools::ValidatorOptions RAII wrapper around
    a spv_validator_options value.

commit 971ede33b2239b071c96fabfdfed0021c8ed3626
Author: Andrey Tuganov <andreyt@google.com>
Date:   Mon Mar 6 17:21:25 2017 -0500

    Validator dissallows unsupported Vulkan capability
    
    If environment is SPV_ENV_VULKAN_1_0, disallow OpCapability operands
    which are not supported by Vulkan 1.0.
    
    See https://github.com/KhronosGroup/SPIRV-Tools/issues/572

commit c804c125c568914aabf4d734cf85923611bdfd21
Author: Andrey Tuganov <andreyt@google.com>
Date:   Wed Mar 15 17:28:24 2017 -0400

    Autogenererating enum-string mappings from grammar
    
    Autogenerating the following code:
    - extension enum
    - extension-to-string
    - string-to-extension
    - capability-to-string
    
    Capability mapping table will not compile if incomplete.
    TODO: Use "spirv-latest-version.h" instead of 1.1.
    
    Added function to generate capability tables for tests.

commit b0116331718113de20af5b0a1cc869ccc95b13fa
Author: Andrey Tuganov <andreyt@google.com>
Date:   Fri Mar 10 15:58:15 2017 -0500

    Validator checks if operands require extension
    
    If required extension is not found, returning new error
    SPV_ERROR_MISSING_EXTENSION.

commit 1fb8c37b5718118b49eec59dc383cfa3f98643c0
Author: Andrey Tuganov <andreyt@google.com>
Date:   Thu Mar 9 18:24:35 2017 -0500

    Refactored enum_set
    
    - removed forgotten file enum_set.cpp
    - added IsEmpty and HasAnyOf
    - hidden unsafe functions Add(uint32_t), Contains(uint32_t)
    - added new tests

commit 12f550973463ec7b2d8502d2611c837f1b08c70c
Author: Andrey Tuganov <andreyt@google.com>
Date:   Wed Mar 8 13:51:20 2017 -0500

    Fix extension grammar parsing
    
    Extensions were not parsed correctly due to a typo in the Python script.

commit 1c43cb855070c83f784e7b8f12a76b53e7634b1e
Author: Andrey Tuganov <andreyt@google.com>
Date:   Wed Mar 8 13:59:01 2017 -0500

    Validator parses and registers OpExtension
    
    Known extensions are saved in validation state. Unknown extension
    produce a dignostic message, but do not fail the validation.
    
    Moved extension definitions to their own file.

commit 42037205a8ea9a0b067f5e38a3ecf6a5c1bf4ae4
Author: David Neto <dneto@google.com>
Date:   Thu Jan 26 20:12:15 2017 -0500

    Test SPV_KHR_multiview in assembler, disassembler

commit 7327f63c34997c75cc8b4ad02cf8809c15609eaa
Author: David Neto <dneto@google.com>
Date:   Thu Jan 26 20:05:01 2017 -0500

    Test SPV_KHR_device_group in assembler, disassembler

commit 83b334e54987bca0451b19d2da75a24cb6a1d8c0
Author: David Neto <dneto@google.com>
Date:   Thu Jan 26 20:02:24 2017 -0500

    Test SPV_KHR_16bit_storage in assembler, disassembler

commit 0004f721e3b72dddcefcf041b58f47fef6790793
Author: David Neto <dneto@google.com>
Date:   Thu Jan 26 18:26:20 2017 -0500

    Test SPV_KHR_subgroup_vote support in assembler, disassembler

commit 9696393c5b972d6a22dcfba5a5fd610e609fff1e
Author: Andrey Tuganov <andreyt@google.com>
Date:   Wed Mar 8 12:06:31 2017 -0500

    Fix nullptr dereferencing in val_fixtures.cpp

commit 892b009959006697eefe9e9d425b3f1480086e79
Author: David Neto <dneto@google.com>
Date:   Tue Mar 7 09:49:43 2017 -0500

    Change Ids in tests to avoid confusion
    
    The assembler assigns ID numbers sequentially, so it's confusing
    to have a %1 in the source assembly when it isn't the first mentioned
    ID.  Rewrite the ID names to avoid this situation in a few cases.

commit edb52647bdab1484e8b5d13c393c2fbd77c28a03
Author: Aliya Pazylbekova <aliyap@google.com>
Date:   Fri Feb 24 20:43:28 2017 -0500

    Validate that SpecId decoration target is a OpSpecConstant instruction
    on a scalar
    
    Fixes: https://github.com/KhronosGroup/SPIRV-Tools/issues/275

commit 11fbe5dc1f764d99e27a7049e2cbcd59915846c5
Author: Andrey Tuganov <andreyt@google.com>
Date:   Thu Mar 2 17:24:29 2017 -0500

    Validator: unique type check allows runtime arrays
    
    OpTypeRuntimeArray is an aggregate and therefore can have duplicate
    declarations.

commit a0c5ffe8401a67545d1f1d0eebf267eb8bd4103e
Author: David Neto <dneto@google.com>
Date:   Wed Mar 1 15:37:20 2017 -0500

    Use OpenCL extinst definitions from SPIRV-Headers
    
    Remove the local copy of that file.

commit 2046e244988de4ccff004b033b72884f077d426a
Author: Ehsan Nasiri <ehsann@google.com>
Date:   Fri Jan 27 11:33:33 2017 -0500

    Fixes issue #489.
    
    From the SPIR-V Spec 2.16.1:
    
    A function declaration (an OpFunction with no basic blocks), must have
    a Linkage Attributes Decoration with the Import Linkage Type.
    
    A function definition (an OpFunction with basic blocks) cannot be
    decorated with the Import Linkage Type.

commit 40be4bdd34a0fce1dfcc97f571704e7980d09a36
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Mar 1 15:51:44 2017 -0500

    Allow using FPRoundingMode when see VK_KHR_16bit_storage
    
    According to the extension, FPRoundingMode should be allowed to
    use without requiring Kernel capability when VK_KHR_16bit_storage
    is enabled.

commit 94d94e1f4afc57d2ef7f0062205323ce5263afd9
Author: Andrey Tuganov <andreyt@google.com>
Date:   Wed Mar 1 12:49:17 2017 -0500

    Validator: downgraded dupl type decl to warning
    
    Validator check for uniqueness of type declarations
    (commit 0e9c24fdd112e7742b9b5dcff35aee32e71a66fd)
    was causing failures in vulkancts tests.
    
    Downgrading from error to warning.

commit 6a2b51482608ca8e7416c7d573e487f52b04c054
Author: Jean-Francois Roy <jfroy@google.com>
Date:   Tue Feb 28 11:34:18 2017 -0800

    Add a default virtual dtor to Pass and check for missing virtual dtors

commit 0e9c24fdd112e7742b9b5dcff35aee32e71a66fd
Author: Andrey Tuganov <andreyt@google.com>
Date:   Thu Feb 23 16:07:52 2017 -0500

    Issue 559: check type declaration uniqueness
    
    Adds PassTypeUnique to the validator.
    Disallows repeated declarations of all types except for aggregates.

commit 4ef3b3e0b98d36083cb330c6b386feb51421b811
Author: Andrey Tuganov <andreyt@google.com>
Date:   Tue Feb 28 11:53:47 2017 -0500

    Refactored validation_state, added new types
    
    - validation_state.cpp uses functions from opcode.h instead of in-place
    switches which need to be updated.
    - added new spirv 1.1 type declaration opcodes to a 'is op type
    declaration' switch in opcode.cpp.

commit da4ae05638f72fb399702257a7d6e4cd5cb4dba7
Author: Ehsan Nasiri <ehsann@google.com>
Date:   Wed Feb 15 13:29:33 2017 -0500

    Add command line options struct for the validator
    
    The limit for the number of struct members is parameterized using
    command line options.
    
    Add --max-struct-depth command line option.
    Add --max-switch-branches command line option.
    Add --max-function-args command line option.
    Add --max-control-flow-nesting-depth option.
    Add --max-access-chain-indexes option.

commit e3632a26b423682306e4c5d88332528180a522a4
Author: David Neto <dneto@google.com>
Date:   Tue Feb 28 11:53:05 2017 -0500

    Update CHANGES for SPV_KHR_16bit_storage validator

commit af7125dfb0493fcf8825609025ab6d83f32ecefc
Author: David Neto <dneto@google.com>
Date:   Wed Feb 22 18:10:05 2017 -0500

    Validation of type decls for SPV_KHR_16bit_storage
    
    Allow declaration of 16bit int or 16bit float in
    the presence of capabilities from SPV_KHR_16bit_storage

commit c6099ad242c2df138fedd713fdb98f576f7961c5
Author: David Neto <dneto@google.com>
Date:   Wed Feb 22 17:53:08 2017 -0500

    Add a Feature struct to validation state.
    
    For now, it is used only for checks of 16bit int and float types.

commit c0949703b1264c33df45584efba50a8444b53022
Author: Adam Van Ymeren <adamvy@google.com>
Date:   Wed Feb 15 13:31:07 2017 -0500

    Fixes issue #548
    
    Add validation checks for the reserved OpImageSparseSampleProj* opcodes.

commit dadd5161bb37c3a190daf4eae24dcebe816f39a4
Author: David Neto <dneto@google.com>
Date:   Thu Feb 9 14:23:52 2017 -0500

    Check strict domination of merge block
    
    If a merge block is reachable, then it must be *strictly* dominated
    by its header.  Until now we've allowed the header and the merge
    block to be the same.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/551
    
    Also: Use dominates and postdominates methods on BasicBlock to
    improve readability.

commit f2867d748531aa22f56d7ce6cdf06c881322df14
Author: Ehsan Nasiri <ehsann@google.com>
Date:   Thu Feb 9 16:23:40 2017 -0500

    The Signedness in OpTypeInt must always be 0.
    
    When Kernel capability is used, The Signedness in OpTypeInt must always
    be 0. Fixes issue #492.

commit f980d8c6712b6d7d2e406b93a064e2ea40011ca0
Author: Kenneth Benzie (Benie) <k.benzie83@gmail.com>
Date:   Wed Feb 1 21:35:59 2017 +0000

    Add vim-spirv plugin description to the README
    
    Fixes #359

commit ab03b879cab5d09147c257035145f0ad36c45064
Author: David Neto <dneto@google.com>
Date:   Fri Jan 27 15:30:09 2017 -0500

    Encourage use of the validator

commit affbc3184900322de6dd71057e258296d585666b
Author: Ehsan Nasiri <ehsann@google.com>
Date:   Mon Jan 23 18:31:14 2017 -0500

    Making the unit tests more robust.
    
    It is best to check the error messages of unit tests that fail
    validation. This will ensure that a validation failure is due to what we
    expect and not due to some secondary reason.
    
    Updating SPIR-V Validator unit tests with error message checks.

commit cb009b3862dc2d5d93a0831c65ac112a72c1645b
Author: Ehsan Nasiri <ehsann@google.com>
Date:   Tue Jan 17 15:10:43 2017 -0500

    Fixes issue #497.
    
    The Linkage Attributes Decoration cannot be applied to functions
    targeted by an OpEntryPoint instruction.

commit 9c71c572e5a1fcd5de8a926571b4122aa10a0c6c
Author: Ehsan Nasiri <ehsann@google.com>
Date:   Mon Jan 16 12:54:15 2017 -0500

    Check BuiltIn Decoration rules.
    
    When applied to a structure-type member, all members of that structure
    type must also be decorated with BuiltIn. (No allowed mixing of built-in
    variables and non-built-in variables within a single structure.)
    
    When applied to a structure-type member, that structure type cannot be
    contained as a member of another structure type.
    
    There is at most one object per Storage Class that can contain a
    structure type containing members decorated with BuiltIn, consumed per
    entry-point.

commit 3a7df2cf1bb4127e6bdb9c19e94cba12e0d97276
Author: Ehsan Nasiri <ehsann@google.com>
Date:   Thu Jan 19 11:03:04 2017 -0500

    Fixes issue #532.
    
    It is acceptable for OpAccessChain, OpInBoundsAccessChain,
    OpPtrAccessChain, OpInBoundsPtrAccessChain, OpCompositeInsert, and
    OpCompositeExtract to not take any indexes as arguments. In such cases,
    no indexing will be done on the Base pointer/composite.

commit eb7d2534df92ff036dd3090bc60cc8476169fe3a
Author: Ehsan Nasiri <ehsann@google.com>
Date:   Tue Jan 17 16:28:59 2017 -0500

    Fixes issue #493.
    
    Check function call operands and return type agree with the called
    function type.
    
    The validation code exists. I have fixed the unit tests.

commit d75bf5ef0366696241c216fb554a4808a0303fbd
Author: Ehsan Nasiri <ehsann@google.com>
Date:   Fri Jan 13 11:46:21 2017 -0500

    Validation for decoration rules. Fixes issue #499.
    
    Added a new file where all the decoration validation can be performed.
    
    In this change the SPIRV Spec Section 2.16.1 is implemented:
    "It is illegal to initialize an imported variable. This means
    that a module-scope OpVariable with initialization value cannot be
    marked with the Import Linkage Type."
    
    Also added unit tests.

commit 699943d29707bb0a301cc5040c7f505f2c0fefff
Author: David Neto <dneto@google.com>
Date:   Tue Jan 17 15:41:23 2017 -0500

    Say why we allow override of build timestamp
    
    It's for reproducible builds.
    
    Also, fix Python formatting.

commit 29b37fb310af2a6547db5424adedc8e4854fe11d
Author: Bernhard M. Wiedemann <githubbmw@lsmod.de>
Date:   Tue Jan 17 18:32:28 2017 +0000

    make build reproducible
    
    see https://reproducible-builds.org/ for why this is good

commit fcf7df069d9ed00c42e00ae2717107f9772cb426
Author: Ehsan Nasiri <ehsann@google.com>
Date:   Wed Jan 11 10:51:23 2017 -0500

    Adding decoration class and tests.
    
    * Added the decoration class as well as the code that registers the
    decorations for each <id> and also decorations for struct members.
    
    * Added unit tests for decorations in ValidationState as well as
    decoration id tests.

commit 1c11c8690f6b8dd3a396447bca8a180e468156a7
Author: Ehsan Nasiri <ehsann@google.com>
Date:   Mon Jan 9 11:10:52 2017 -0500

    Validation of OpEntryPoint usage.
    
    According to the SPIRV Spec (2.16.1):
    * There is at least one OpEntryPoint instruction, unless the Linkage
    capability is being used.
    
    * No function can be targeted by both an OpEntryPoint instruction and an
    OpFunctionCall instruction.
    
    Also updated unit tests to includ OpEntryPoint.

commit 68e36ec7e9da5300b5d183be543162928aee5776
Author: Ehsan Nasiri <ehsann@google.com>
Date:   Wed Jan 11 15:03:53 2017 -0500

    Introducing a new flow for running the Validator.
    
    We are adding a new API which can be called to run the SPIR-V validator,
    and retrieve the ValidationState_t object. This is very useful for
    unit testing.
    
    I have also added basic unit tests that demonstrate usage of this flow
    and ease of use to verify correctness.

commit d5e4f06eecfd36059117142bbb1d73ba3ac517c1
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Jan 12 14:15:36 2017 -0500

    Update Travis CI configuration.
    
    * Stop updating brew.
    * Shadow clone of dependencies.
    * Fix `nproc` on macOS.

commit 545a6c1dc3cb6e346cae417fb729a1ebced10fe8
Author: David Neto <dneto@google.com>
Date:   Wed Jan 11 16:12:50 2017 -0500

    Provide friendly names for true and false

commit d1868b93618181cd765ea16aa4aec8de9f4d3b2b
Author: Ehsan Nasiri <ehsann@google.com>
Date:   Wed Jan 4 15:56:17 2017 -0500

    Validation for Composite Extract and Insert.
    
    The validity of each command is checked based on the descripton in
    SPIR-V Spec Section 3.32.12 (Composite Instructions).
    
    Also checked that the number of indexes passed to these commands does
    not exceed the limit described in 2.17 (Universal Limits).
    
    Also added unit tests for each one.

commit 109ce225c9f7538ab56d52f036a08f16a15327a0
Author: Ehsan Nasiri <ehsann@google.com>
Date:   Thu Jan 5 12:53:02 2017 -0500

    Fixes bug #517.
    
    entry_block_to_construct_ maps an entry block to its construct. The key
    in this map (the entry block) is not unique, and therefore the entry for
    the continue construct gets overwritten when the selection construct is
    discovered.
    
    Since a given block may be the entry block of different types of
    constructs, the (basic_block, construct_type) pair should be able to
    uniquely identify the construct.
    
    Adds test:
    - In this test, a basic block is the entry block of a continue construct
      as well as the entry block of a selection construct.
      It can be shown that this unit test would crash without the fix in this
      PR and passes with the fix in this PR.

commit 558ac1e5aa25fa64c55304c7365b1a956cd1f81c
Author: David Neto <dneto@google.com>
Date:   Wed Jan 4 11:04:47 2017 -0500

    Allow trailing whitespace on version lines in CHANGES

commit 20b2035f2005a54fc1a499e884404f2209b0f317
Author: David Neto <dneto@google.com>
Date:   Thu Jan 5 16:00:58 2017 -0500

    Use the default Xcode image on OSX
    
    As of November 2016, the default OSX image is Xcode 7.3.1, which works.

commit ff272a9820547aab2ff7e133a2ec3357b1ce676b
Author: Ehsan Nasiri <ehsann@google.com>
Date:   Thu Dec 22 14:31:21 2016 -0500

    Adding validation code for PtrAccessChain.
    
    Validation for OpPtrAccessChain is similar to OpAccessChain with the
    following difference: OpPtrAccessChain takes an extra argument (word 4)
    which is the Element <id> argument.
    
    Validation for OpInBoundsPtrAccessChain is also similar to OpPtrAccessChain.
    
    Also added tests for all access chain instructions:
    Modified the existing parameterized tests to accommodate OpPtrAccessChain and
    OpInBoundsPtrAccessChain.
    
    Also fixed a typo in previous commits.

commit c656c23ad3873926bfd84058c1f80fda5743901e
Author: Ehsan Nasiri <ehsann@google.com>
Date:   Tue Jan 3 14:53:50 2017 -0500

    Refactoring unit tests using TEST_P.
    
    Using parameterized unit tests to avoid duplicate code that runs the
    tests of OpAccessChain and OpInBoundsAccessChain.
    
    This is also a steppingstone to adding tests for OpPtrAccessChain and
    OpInBoundsPtrAccessChain.

commit 6993fc413d8da97de1bb16a05159dc218f12f183
Author: Ehsan Nasiri <ehsann@google.com>
Date:   Wed Dec 21 14:39:01 2016 -0500

    Validation code for control flow nesting depth.
    
    According to Section 2.17 (Universal Limits) of the SPIR-V Spec, the
    control flow nesting depth may not be larger than 1023.
    
    This is checked only when we are required to have structured
    control flow.  Otherwise it's not clear how to compute control
    flow nesting depth.

commit 37422e9dba1a3a8cb8028b779dd546d43add6ef8
Author: David Neto <dneto@google.com>
Date:   Mon Dec 19 13:26:42 2016 -0500

    Support building under CYGWIN
    
    - Parse CHANGES file with Universal Python line endings in case
      the source tree was checked out with Windows line endings.
    - Use our own clone of strnlen_s which might not be available
      everywhere.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/508

commit e0e4044ffe54abd1de8590b0ca0980d321ec8d1f
Author: David Neto <dneto@google.com>
Date:   Wed Dec 21 10:31:29 2016 -0500

    Update Travis notification emails
    
    Remove deki, add ehsann

commit f8cc397573bbd7bbcb488b9f107bdfa963ac7a4e
Author: David Neto <dneto@google.com>
Date:   Fri Dec 16 15:32:56 2016 -0500

    Generate spvasm.vim
    
    Generate a vim syntax file for SPIR-V assembly.
    Copy the resulting spvasm.vim into your $HOME/.vim/syntax directory
    to get syntax highlighting in Vim.
    
    Also, suggest that the grammar file include information
    about what opcodes can be used in OpSpecConstantOp.

commit 68c5f0436f1d4f1f137e608780190865d0b193ca
Author: David Neto <dneto@google.com>
Date:   Tue Dec 13 11:49:50 2016 -0500

    Start v2016.7-dev

commit 5f5fa3a3f1009f0db845d0c9ed76a39fcfe5b20c
Author: David Neto <dneto@google.com>
Date:   Tue Dec 13 11:49:09 2016 -0500

    Finalize v2016.6

commit 5a0b5ca4a71d8ee91d4548fc0f0295349cfa7607
Author: David Neto <dneto@google.com>
Date:   Fri Dec 9 14:01:43 2016 -0500

    Get vendor tool info from the SPIR-V registry file
    
    Update old tests to use officially registered vendor names;
    this affected "Codeplay".

commit 945e9fc4b477ee55d2262249e5d1d886aa6ba679
Author: David Neto <dneto@google.com>
Date:   Thu Dec 8 18:21:17 2016 -0500

    Document the use of the GitHub Project feature

commit d004cd46db4c575e26a529dd75efdc8eb264390e
Author: Ehsan Nasiri <ehsann@google.com>
Date:   Tue Dec 6 11:59:49 2016 -0500

    Adding validation for OpInBoundsAccessChain.
    
    The validation for this instruction is similar to OpAccessChain.
    
    Include a test for testing a struct with (valid) depth of 255.

commit 4fb79b54f28791292d7bab029d13cf5f89da5106
Author: Ehsan Nasiri <ehsann@google.com>
Date:   Sun Dec 4 10:48:26 2016 -0500

    Validation for struct nesting depth.
    
    According to sectin 2.17 in SPIR-V Spec, the structure nesting depth may
    not be larger than 255. This is interpreted as structures nested in
    structures. The code does not look into arrays or follow pointers to see
    if it reaches a structure downstream.
    
    Use memoization to avoid exponential runtime.

commit d5b0cd34c95a5dca4af8e83560af25cc581e8034
Author: David Neto <dneto@google.com>
Date:   Wed Dec 7 10:33:27 2016 -0500

    An OpVariable initializer can be a module-scope variable
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/482

commit aadf696fceec05eaaa1d581d71101cc8f53ace26
Author: Ehsan Nasiri <ehsann@google.com>
Date:   Mon Dec 5 15:11:51 2016 -0500

    Fixing bug in OpAccessChain validation code.
    
    The validation code for OpAccessChain was missing OpTypeRuntimeArray as
    a possible type that can be indexed into.
    
    This was caught by running the validator on VKCTS.
    
    Also adding unit tests for it.

commit 1f6123fa5fc99af90cb04438479d2955ba7c3c3a
Author: Ehsan Nasiri <ehsann@google.com>
Date:   Mon Dec 5 14:00:18 2016 -0500

    Add a test that exercises wrong usage of result id
    
    Result <id> resulting from an instruction within a function may not be
    used outside that function.

commit bab1aad8563d30ebd90a5a5d8cea10c0158e1825
Author: Ehsan Nasiri <ehsann@google.com>
Date:   Wed Nov 30 13:29:12 2016 -0500

    Adding validation code for OpAccessChain.
    
    * Result Type must be an OpTypePointer. Its Type operand must be the
    type reached by walking the Base’s type hierarchy down to the last
    provided index in Indexes, and its Storage Class operand must be the
    same as the Storage Class of Base.
    
    * Base must be a pointer, pointing to the base of a composite object.
    
    * Indexes walk the type hierarchy to the desired depth, potentially down
    to scalar granularity. The first index in Indexes will select the
    top-level member/element/component/element of the base composite. All
    composite constituents use zero-based numbering, as described by their
    OpType... instruction. The second index will apply similarly to that
    result, and so on. Once any non-composite type is reached, there must
    be no remaining (unused) indexes. Each of the Indexes must:
    - be a scalar integer type,
    - be an OpConstant when indexing into a structure.
    
    * Check for the case where no indexes are passed to OpAccessChain.
    
    Minor improvements based on code review.

commit e6e7bd7d301d0ccbeeeb6a4f7cbe53d76552df1e
Author: Ehsan Nasiri <ehsann@google.com>
Date:   Thu Dec 1 16:18:15 2016 -0500

    No need to install cmake for new osx images.
    
    It seems that the osx image has been updated and already includes ctest.
    As a result, all jobs fail with this error:
    Error: cmake-3.6.2 already installed

commit 4b26d514efa4eaf5e1069c5ca974d558d0391334
Author: Ehsan Nasiri <ehsann@google.com>
Date:   Tue Nov 29 15:50:34 2016 -0500

    Validate the number of global and local variables.
    
    According to the Universal Limits section of the SPIR-V Spec (2.17), the
    number of global variables may not exceed 65,535 and the number of local
    variables may not exceed 524,287.
    
    Also added unit tests for each one.

commit 490617133e2153bfcb646fee8ec04e8d2dfabfd8
Author: Ehsan Nasiri <ehsann@google.com>
Date:   Mon Nov 28 13:04:32 2016 -0500

    Validate the number of arguments in OpTypeFunction
    
    According to the SPIR-V spec (section 2.17: Universal Limits), the
    OpTypeFunction instruction may not take more than 255 arguments for the
    function. Also added unit tests for it.

commit 5f2d40915e450664764ed8525122319abf67d34b
Author: David Neto <dneto@google.com>
Date:   Wed Nov 30 15:48:39 2016 -0500

    Say how the validator checks universal limits
    
    Indicate it's future work to allow parameterization of those
    limits.

commit 3c8bc80e3ab4d22ba320e3760e10aef251603311
Author: Ehsan Nasiri <ehsann@google.com>
Date:   Fri Nov 25 09:26:26 2016 -0500

    Adding validation code for OpSwitch limits
    
    The number of (literal, label) pairs passed to OpSwitch may not exceed
    16,383. Added code to validate this and added unit tests for it.
    
    Also fixed a typo in another validor error message.

commit bef80716d70a0b71b07f1ff99da5711624620b2d
Author: Ehsan Nasiri <ehsann@google.com>
Date:   Thu Nov 24 15:37:22 2016 -0500

    Validation for number of Struct members.
    
    The number of members in a struct may not exceed 16,383.
    Also Adding unit tests for Struct size limit check.

commit bd5b0bfca1bf067563c9e03a7c30c3590189b5c0
Author: Ehsan Nasiri <ehsann@google.com>
Date:   Thu Nov 24 15:37:22 2016 -0500

    Checks that result IDs are within the ID bound specified in the SPIR-V header
    
    This is described in Section 2.17 of the SPIR-V Spec.
    
    * Updated existing unit test 'SemanticsIdIsAnIdNotALiteral' to pass by
    manipulating the ID bound in its binary header.
    
    * Fixed boundary check in the code.
    
    * Added unit test to check the case that the largest ID is equal to the
    ID bound.

commit f72189c249ba143c6a89a4cf1e7d53337b2ddd40
Author: Ehsan Nasiri <ehsann@google.com>
Date:   Tue Nov 22 18:06:55 2016 -0500

    Validation for OpSampledImage instruction.
    
    This change implements the validation for usages of OpSampledImage
    instruction as described in the Data Rules section of the Universal
    Validation Rules of the SPIR-V Spec.

commit 6fa6a3f64703745425bab6bf51da984f765656e2
Author: Ehsan Nasiri <ehsann@google.com>
Date:   Wed Nov 16 11:04:13 2016 -0500

    Adding validation for OpSpecConstantComposite.
    
    SpecConstantComposite may specialize to a vector, matrix, array, or
    struct. In each case, the number of components and type of components
    that are being specialized to must match the expected result type.
    
    Removed use of macros in these tests.
    Now using the spvValidateBase class. Using CompileSuccessfully(), and
    ValidateInstructions() to compile to binary and run the validator. Also
    using getDiagnosticString() to check the proper error message string.
    All the heavy lifting is done in ValidateBase class.

commit 8c414eb5798768f09d20f98df53bb15428ef2083
Author: Ehsan Nasiri <ehsann@google.com>
Date:   Thu Nov 10 15:12:26 2016 -0500

    Adding validation code for OpTypeStruct.
    
    According to the Data Rules section of 2.16.1. Universal Validation
    Rules of the SPIR-V Spec:
    
    Forward reference operands in an OpTypeStruct
    * must be later declared with OpTypePointer
    * the type pointed to must be an OpTypeStruct
    * had an earlier OpTypeForwardPointer forward reference to the same <id>

commit 5c19de25107d496a15c7869b3e1dab0a0f85913d
Author: David Neto <dneto@google.com>
Date:   Wed Nov 16 10:52:31 2016 -0500

    Skip building example executable when asked

commit c935253c91c687ff3fe42bf9197b81c0b64bfa34
Author: David Neto <dneto@google.com>
Date:   Thu Oct 13 16:22:04 2016 -0400

    Make friendly number-based names for OpConstant
    
    For example:
      %int_42 = OpConstant %int 42
      %int_n42 = OpConstant %int -42
      %float_3_14 = OpConstant %float 3.14

commit 4f750c0dcc50055a5314857e299e252570c81998
Author: David Neto <dneto@google.com>
Date:   Thu Oct 13 15:17:11 2016 -0400

    Extract EmitNumericLiteral from disassembler
    
    Test with disassembly of numeric literals.

commit d0620061c7cd585bca89493e0a45fbc15d4cc561
Author: Ehsan Nasiri <ehsann@google.com>
Date:   Thu Nov 10 15:12:26 2016 -0500

    Adding validation code for more data rules.
    
    These rules are under "Data Rules" in 2.16.1 (Universal Validation
    Rules) part of the SPIR-V 1.1 Specification document:
    
    * Scalar floating-point types can be parameterized only as 32 bit, plus
    any additional sizes enabled by capabilities.
    
    * Scalar integer types can be parameterized only as 32 bit, plus any
    additional sizes enabled by capabilities.
    
    * Vector types can only be parameterized with numerical types or the
    OpTypeBool type.
    
    * Matrix types can only be parameterized with floating-point types.
    
    * Matrix types can only be parameterized as having only 2, 3, or 4
    columns.
    
    * Specialization constants (see Specialization) are limited to integers,
    Booleans, floating-point numbers, and vectors of these.

commit 38036a7203ca604c0f25b0dc33da169ac58e2900
Author: Lei Zhang <antiagainst@google.com>
Date:   Tue Nov 8 10:26:09 2016 -0800

    Rename validation source files to comply with Google style guide.

commit 2881fe958f6345c57be00594337e64982f676047
Author: Lei Zhang <antiagainst@google.com>
Date:   Tue Nov 8 10:11:07 2016 -0800

    Rename validation tests to comply with Google style guide.

commit 6c899a52f9ce673e9530bcaa4da27ff24d10c0e9
Author: Ehsan Nasiri <ehsann@google.com>
Date:   Fri Nov 4 18:31:21 2016 -0400

    Adding validation for vector data rule.
    
    Number of components in a vector can be 2 or 3 or 4. If Vector16
    capability is used, 8 and 16 components are also allowed.
    Also added unit tests for vector data rule.

commit 4f57e140bf078bc27e1c5826929a3aa6fe46de93
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Sep 22 11:05:30 2016 -0400

    Renaming test files to comply with Google style guide.
    
    Also posfixing test files with `_test' to make it more clear.

commit bf190ec8393eadc4876de7306eef951956455ab1
Author: David Neto <dneto@google.com>
Date:   Thu Oct 27 22:47:20 2016 -0400

    Remove source/instruction.cpp
    
    Avoids linker problems on Windows and OSX with duplicate object file
    names.  Avoids collision with source/val/instruction.cpp
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/451

commit b371439d6fbc6b7b7cd5b4ef7046faa6cdf0e9e2
Author: Jamie Madill <jmadill@chromium.org>
Date:   Thu Oct 27 16:09:06 2016 -0400

    enum_set: Fix bool performance warning.
    
    Implicit casts from int to bool cause a warning in visual studio.

commit 2d89b6a9c5b88ad34784b8275141187afcc5045b
Author: Christopher Gautier <christopher.gautier@arm.com>
Date:   Fri Oct 14 12:45:27 2016 +0200

    Do not gitignore source/opt/build_module.*

commit ee6c877b53ef47f33b53dba1f8c846533b6f47e2
Author: David Neto <dneto@google.com>
Date:   Wed Oct 12 10:47:28 2016 -0400

    Test SPV_KHR_shader_draw_parameters support
    
    In assembler, disassembler, parser.

commit f92e87a8f85915e8e0cbd39d0ca7fb004c0da05e
Author: Corentin Wallez <corentin@wallez.net>
Date:   Tue Oct 4 17:47:19 2016 -0400

    Fix compilation errors when building inside Chromium
    
    Example of an error:
        spirv-tools/source/validate_cfg.cpp:516:45: error: chosen constructor is
        explicit in copy-initialization:
          _.current_function().RegisterBlockEnd({}, opcode);

commit c1d5e660ee9bc9fb7ff3784995727c59fe31d707
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Sep 29 12:00:35 2016 -0400

    Add begin() and end() for TypeManager.

commit f0a96c91f8d41e77cb3ffa54029167260600e979
Author: David Neto <dneto@google.com>
Date:   Thu Sep 29 16:43:47 2016 -0400

    Remove unnecessary #include
    
    This will make it easier to port these tests to different contexts.

commit 689df65966e733726cb3b455e33bfe67bc26c653
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Sep 28 10:50:43 2016 -0400

    Add examples to demo C++ library APIs.

commit f9cb7c282cf1a6c3867ce04b9e288ad7ce2c11a4
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Sep 23 15:13:24 2016 -0400

    Avoid appending EOL in StringifyMessage().
    
    EOL should be appended when outputing to streams by the tool.

commit 069b0a73395b1f8c8e31adb98dd07f517e51328e
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Sep 22 11:28:48 2016 -0400

    Fix operand class test coverage table.
    
    * Fix a missing column.
    * Convert line endings.
    
    This will make the table beautiful and searchable on Github.

commit dc6e4834d63da07593c67fdc13af278d3db63696
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Sep 21 17:16:31 2016 -0400

    Clean up header dependency.

commit c6b23f823750fed58945ed0a47e1d65d9db92fd2
Author: David Neto <dneto@google.com>
Date:   Thu Sep 22 17:09:34 2016 -0400

    Handle parse failure for setting spec constants

commit a6ef1ea29eecfb8a7ecdcc5a7070595440d6f188
Author: Umar Arshad <umar@arrayfire.com>
Date:   Thu Sep 22 10:23:08 2016 -0400

    Fix forward reference issues with forword pointer
    
    * Allows OpTypeForwardPointer to reference IDs not yet declared in
      the module
    * Allows OpTypeStruct to reference IDs not yet declared in
      the module
    
    Possible Issue: OpTypeStruct should only allow forward references
    if the ID is a pointer that is referenced by a forward pointer. Need
    Type support in Validator which is currently a work in progress.

commit 01df41dfdbae67b88ac14733e4157181a268471a
Author: qining <qining@google.com>
Date:   Thu Sep 22 11:50:12 2016 -0400

    Command line option for set default value for spec constant
    
    Format:
    ```
    --set-spec-constant-default-value "<spec id A>:<default value A> <spec id
    B>:<default value B> ..."
    ```
    
    Example:
      shader: `test.vert`
    ```
    
    layout(constant_id = 100) const int myint = 10;
    layout(constant_id = 101) const int myuint = 100;
    layout(constant_id = 200) const float myfloat = 1.25;
    layout(constant_id = 201) const double mydouble = 2.34;
    
    void main() {}
    ```
      command line:
    ```
    spirv-opt --set-spec-const-default-value "100:12   101:200 200:1.2323
    201:1.2345" test.vert -o output.spv
    ```
      output:
    ```
          ...
                   OpDecorate %7 SpecId 100
                   OpDecorate %8 SpecId 101
                   OpDecorate %10 SpecId 200
                   OpDecorate %12 SpecId 201
           %void = OpTypeVoid
              %3 = OpTypeFunction %void
            %int = OpTypeInt 32 1
              %7 = OpSpecConstant %int 12
              %8 = OpSpecConstant %int 200
          %float = OpTypeFloat 32
             %10 = OpSpecConstant %float 1.23232
         %double = OpTypeFloat 64
             %12 = OpSpecConstant %double 2.34232
          ...
    ```

commit 1ca817a38e2ab347de218ab620aa0456fd2cfde0
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Sep 21 16:45:53 2016 -0400

    Use nullptr as the default message consumer to ignore all messages.
    
    There is no difference between the previous IgnoreMessage() function
    and a null std::function, from functionality's perspective.
    The user can set nullptr as the MessageConsumer, so need to guard
    against nullptr before calling the consumer anyway. It's better
    we use it internally so that it may expose problems by us instead
    of the user.

commit 6effeaa7f1eed3d6856ed5eb928d54d3ac2d29fc
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Sep 21 10:53:15 2016 -0400

    Change some asserts to normal errors in IrLoader.

commit 3767e32b1fe18024a1a1380df34ee13a33d4ce06
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Sep 21 10:52:31 2016 -0400

    Add two more utility functions for sending errors to consumer.

commit 74afb5d112889782be732c807edbc7a808d7a835
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Sep 14 12:09:52 2016 -0400

    Change parameter name from file to source in Log() and Logf().

commit 5edf0549267ae5237c163d260f87292a35f31b10
Author: Lei Zhang <antiagainst@google.com>
Date:   Tue Sep 20 18:03:37 2016 -0400

    Add more Assemble(), Disassemble() and Validate() overloads.

commit 620f05e679ac65373736969cae66b9f3ac73252d
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Sep 16 16:12:04 2016 -0400

    Publish the C++ interface.

commit 92411caa3bcc271036c909482ae5951725b3aa5d
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Sep 16 15:56:30 2016 -0400

    Rename SpvTools to SpirvTools.

commit 6849a3cefd50c0462b76b92eaeeda141839e9fd4
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Sep 21 12:44:37 2016 -0400

    Use C style names for MessageLevel.

commit 80eb0793c9ba578bfd2c72e7e4f01c28dfee971e
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Sep 21 11:30:41 2016 -0400

    Change to use enum instead of enum class for MessageLevel.
    
    This allows us to create C interface with MessageLevel later.

commit f18e1f293b7cf8f24a42587b48f35bc49912a5dd
Author: Lei Zhang <antiagainst@google.com>
Date:   Mon Sep 12 14:11:46 2016 -0400

    Add a C++ interface to the optimization functionalities.

commit 1bc0b275dd74f509259555e99f4e54f235532a8a
Author: Lei Zhang <antiagainst@google.com>
Date:   Tue Sep 20 16:48:00 2016 -0400

    Allow changing MessageConsumer in Pass & PassManager.
    
    Default-constructed Pass/PassManager will have a MessageConsumer
    which ignores all messages. SetMessageConsumer() should be called
    to supply a meaningful MessageConsumer.

commit f8dbed0455c04e42ef6b833dbd70a8c79a12ec0c
Author: Lei Zhang <antiagainst@google.com>
Date:   Tue Sep 20 16:44:24 2016 -0400

    Change BuildModule() to accept pointer-size pair for binary.

commit 2cbb2cce3ea1401bf8982c58d0d7dc8a8a0d4f33
Author: Lei Zhang <antiagainst@google.com>
Date:   Mon Sep 12 12:39:44 2016 -0400

    Change interface of Pass::Process() to return possible failures.

commit 12b57779127a84ec0c9e55dcde0ff732d6fe0c30
Author: David Neto <dneto@google.com>
Date:   Mon Sep 19 10:13:04 2016 -0400

    Provide friendly names for shader ballot BuiltIns

commit bf467da9c9a065833defb0dd50ff5438e1ab642d
Author: Umar Arshad <umar@arrayfire.com>
Date:   Thu Sep 15 17:32:44 2016 -0400

    Update validate interface to accept binary pointers

commit 3590279a7300eab211b6a1722810eb30aad1d9e7
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Sep 16 15:43:41 2016 -0400

    Set the default source name as "input".

commit 6519fce4919bfb15347f937584e919f75f7c8ff9
Author: David Neto <dneto@google.com>
Date:   Fri Sep 16 16:40:00 2016 -0400

    Start v2016.6-dev

commit f9763ac3f4241a047949d19b414512466c74cee9
Author: David Neto <dneto@google.com>
Date:   Fri Sep 16 16:39:40 2016 -0400

    Finalize v2016.5

commit 9382035a22a65594fdb2f8998e3643bba0034312
Author: David Neto <dneto@google.com>
Date:   Fri Sep 16 14:40:02 2016 -0400

    Add basic support for SPV_KHR_shader_ballot
    
    Requires use of SPIRV-Headers that has support
    for SPV_KHR_shader_ballot.
    
    Adds assembler, disassembler, binary parser support.
    
    Adds general support for allowing an operand to be
    only enabled by a set of extensions.
    
    TODO: Validator support for extension checking.

commit 8654caa5657ef0e12367d9e705e6c31e70f68668
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Sep 9 10:46:23 2016 -0400

    Prepare the C++ interface for publication.
    
    * Use PIMPL idiom in the C++ interface.
    * Clean up interface for assembling and disassembling.
    * Add validation into C++ interface.
    * Add more tests for the C++ interface.

commit b54686d0170cc72b889e9bdc45f9c173f26e3467
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Sep 9 14:45:18 2016 -0400

    Move functions for building modules outside of the C++ interface.

commit 869440ebd495f226440e738509f86221732e1942
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Sep 16 12:10:47 2016 -0400

    Let SPIRV_ASSERT() exit the program if the assertion fails.

commit 114af21994554ab1dd5bcde57cded3f069719303
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Aug 19 23:17:44 2016 -0400

    Add MessageConsumer to PassManager, Pass, and analysis interfaces.
    
    Also convert some uses of assert() in optimization code to use
    SPIRV_ASSERT(), SPIRV_UNIMPLEMENTED(), or SPIRV_UNREACHABLE()
    accordingly.

commit bfd7cd6d6edd6f4d23cedf916171ced9b038b85b
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Sep 8 11:43:48 2016 -0400

    Add utility macros for logging messages.
    
    Add the following macros for logging purpose:
    * SPIRV_ASSERT
    * SPIRV_DEBUG
    * SPIRV_UNIMPLEMENTED
    * SPIRV_UNREACHABLE
    
    The last two is always turned on, while the first two can only
    be turned on in debug build.

commit 755f97f534153519e15636502f1e2d6f4f48cda6
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Sep 2 18:06:18 2016 -0400

    Add a callback mechanism for communicating messages to callers.
    
    Every time an event happens in the library that the user should be
    aware of, the callback will be invoked.
    
    The existing diagnostic mechanism is hijacked internally by a
    callback that creates an diagnostic object each time an event
    happens.

commit e0dd0334143cb31b1b563704fe3001d11a506a95
Author: David Neto <dneto@google.com>
Date:   Tue Sep 13 12:38:42 2016 -0400

    Make friendly names for built-in variables.
    
    Handles only OpDecorate
    
    Does not handle:
    - decorations on struct members
    - decoration via OpGroupDecorate

commit 247e024c7225612cc0d20684bf878fed7332d8e9
Author: David Neto <dneto@google.com>
Date:   Wed Sep 14 15:22:47 2016 -0400

    Update CHANGES to say #414 is fixed

commit 1f3fb506e8c5ba67257e5806dec0ad8cce8543f3
Author: David Neto <dneto@google.com>
Date:   Wed Sep 14 11:57:20 2016 -0400

    Fix validator: OpUndef can be member of a constant composite
    
    This was enabled in SPIR-V 1.0 Rev 7
    
    Fixes: https://github.com/KhronosGroup/SPIRV-Tools/issues/414

commit 4e2ed04d6e96db6b2b8e77c577c8439b23bc9a74
Author: David Neto <dneto@google.com>
Date:   Wed Sep 14 12:48:38 2016 -0400

    Clarify: Ok to pass null diagnostic to spvBinaryParse
    
    It's a valid use case: I might mostly trust my binaries and I don't
    care to to collect detailed diagnostic feedback.

commit 5c9080eea87377bf9a428fdca336dce563b124ac
Author: David Neto <dneto@google.com>
Date:   Wed Sep 14 11:04:19 2016 -0400

    Fix validator SSA check: Phi can use its own value sometimes
    
    Defer removal of a Phi's result id from the undefined-forward-reference
    set until after you've scanned the arguments.  The reordering is only
    significant for Phi.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/415

commit 66f5b4bfc5e3ba90724b6fe9ab855870a470a3c9
Author: qining <qining@google.com>
Date:   Fri Sep 9 11:47:42 2016 -0400

    Build "spec id->default val str" mapping from string
    
    Add function `ParseDefaultValuesString()` to build the spec id->default
    value string mapping required by `SetSpecConstantDefaultValuePass`.

commit 5ac63523d76c429cb853fbb3ec5c6614773613b3
Author: qining <qining@google.com>
Date:   Tue Sep 13 11:57:02 2016 -0400

    Guard against nullptr in number parsing utilities
    
    ParseNumber(): Returns false if the given string is a nullptr.
    ParseAndEncodeXXXX(): Returns kInvalidText and populate error message:
      "The given text is a nullptr", if the givne string is a nullptr.

commit abf57933eaa803949d1facb23e7b79dfc02db960
Author: qining <qining@google.com>
Date:   Tue Aug 30 14:57:56 2016 -0400

    Set default values for spec const decorated by SpecId
    
    The pass instance is constructed with a map from spec id (uint32_t) to
    default values in string format. The default value strings will be
    parsed to numbers according to the target spec constant type.
    
    If the Spec Id decoration is found to be applied on multiple different
    target ids, that decoration instruction (OpDecorate or OpGroupDecorate)
    will be skipped. But other decoration instrucitons may still be
    processed.

commit 26b51ef30c49f7c57eb94d9b19f3cfe2abc9149f
Author: David Neto <dneto@google.com>
Date:   Mon Sep 12 16:48:05 2016 -0400

    Update CMake condition for Emacs load/save helper
    
    Make SPIRV_TOOLS_INSTALL_EMACS_HELPERS a CMake option.  Otherwise
    I get a variable-defined-but-not-used error.

commit 6accefc3a49bf51a5e589d3ca6e20618c1ec3005
Author: steve-lunarg <steve_gh@khasekhemwy.net>
Date:   Fri Sep 2 14:04:02 2016 -0600

    add spirv-dis/spirv-as support for emacs when loading .spv binaries

commit 049f80f3b9289e322cb1d0cfe63c6aa6bd40338f
Author: qining <qining@google.com>
Date:   Thu Sep 8 18:00:12 2016 -0400

    Add IsSigned() to opt::Analysis::Integer.

commit 1773b95737a78bbe12f4011511d90da9d605808f
Author: qining <qining@google.com>
Date:   Thu Sep 1 14:27:04 2016 -0400

    Pull out the number parsing logic
    
    Pull out the number parsing logic from
    AssemblyContext::binaryEncodeNumericLiteral() to utilities.
    
    The new utility function: `ParseAndEncodeNumber()` now accepts:
      * number text to parse
      * number type
      * a emit function, which is a function which will be called with each
        parsed uint32 word.
      * a pointer to std::string to be overwritten with error messages.
        (pass nullptr if expect no error message)
    and returns:
      * an enum result type to indicate the status
    
    Type/Structs moved to utility:
      * template<typename T> class ClampToZeroIfUnsignedType
    
    New type:
    * enum EncodeNumberStatus: success or error code
    * NumberType: hold the number type information for the number to be parsed.
     * several helper functions are also added for NumberType.
    
    Functions moved to utility:
      * Helpers:
        * template<typename T> checkRangeAndIfHexThenSignExtend() -> CheckRangeAndIfHex....()
      * Interfaces:
        * template<typename T> parseNumber() -> ParseNumber()
        * binaryEncodeIntegerLiteral() -> ParseAndEncodeIntegerNumber()
        * binaryEncodeFloatingPointLiteral() -> ParseAndEncodeFloatingPointNumber()
        * binaryEncodeNumericLiteral() -> ParseAndEncodeNumber()
    
    Tests added/moved to test/ParseNumber.cpp, including tests for:
    * ParseNumber(): This is moved from TextToBinary.cpp to ParseNumber.cpp
    * ParseAndEncodeIntegerNumber(): New added
    * ParseAndEncodeFloatingPointNumber(): New added
    * ParseAndEncodeNumber(): New added
    
    Note that the error messages are kept almost the same as before, but
    they may be inappropriate for an utility function. Those will be fixed
    in another CL.

commit a35919c008872de5fac12022ee475b1a04c595f8
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Sep 8 17:26:53 2016 -0400

    Merge diagnostic tests and single them out in a separate binary.

commit 219f0cc13c44e175cdda86a7aa65de59a933dd69
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Sep 7 17:43:15 2016 -0400

    Create separate binaries for validation tests.

commit ef600df16eb1fbaaabda08e177651e4d81f1bbd3
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Sep 7 17:26:18 2016 -0400

    Prefix test binaries with `test_`, rename UnitSPIRV, update README.

commit 860030feab94360b9bf64cf486b44cffd62bdea8
Author: Lei Zhang <antiagainst@google.com>
Date:   Mon Sep 5 16:17:33 2016 -0400

    Travis CI: mark build as finished once a job failed.

commit 922246714edf3eb130377b6793117d4e57fc2805
Author: Lei Zhang <antiagainst@google.com>
Date:   Mon Sep 5 17:11:44 2016 -0400

    Kill the spvCheck macro which is just alias to if-statement.

commit 53c84333f0338ad12f3cba10f1748ff860795a3a
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Sep 2 10:15:47 2016 -0400

    Update README about the optimization library and tool.

commit dcd7fed5afd904a420424fc266dd0265bae0b324
Author: David Neto <dneto@google.com>
Date:   Fri Sep 2 10:29:14 2016 -0400

    Say contributors have to click through the CLA

commit 881816f82ae32af4dfd2fb26e641fc8a83e0e66a
Author: David Neto <dneto@google.com>
Date:   Fri Sep 2 09:29:52 2016 -0400

    Add test for presence of copyrights and license terms

commit e70a957cb50263f490c53c8fe2af4f0365b90020
Author: David Neto <dneto@google.com>
Date:   Thu Sep 1 15:38:53 2016 -0400

    Start v2016.5-dev

commit 9fc8658ef301b0f03b2173d274c52f011b5c73e5
Author: David Neto <dneto@google.com>
Date:   Thu Sep 1 15:33:59 2016 -0400

    Relicense SPIRV-Tools under Apache 2.0
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/383
    
    Finalize v2016.4

commit 6f35405a977393949759a5fbf72d29e806981d65
Author: David Neto <dneto@google.com>
Date:   Thu Sep 1 14:49:14 2016 -0400

    Add check_copyright to check or update copyright.
    
    It will also replace an MIT or Khronos free use license with
    the Apache license notice.

commit 0e001b70e4cc14098e3d27b19811ab0372a96219
Author: David Neto <dneto@google.com>
Date:   Thu Sep 1 13:04:00 2016 -0400

    Fix Google copyright lines

commit 5abf40816a2e28561fb565a1676e79a26f26b97f
Author: Lei Zhang <antiagainst@gmail.com>
Date:   Fri Sep 2 09:51:44 2016 -0400

    Kill the spvCheckReturn macro.

commit 75bf78c70bc4de62f5a646399737289a27270111
Author: Lei Zhang <antiagainst@gmail.com>
Date:   Fri Sep 2 09:49:56 2016 -0400

    Kill diagnostic_helper & the wrapping DIAGNOSTIC macro.

commit 2ad3b74fa3ecffe434c23f9deba092269a4a96bf
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Aug 31 19:37:13 2016 -0400

    Tests for preserving line debug insts even killing its affecting targets.

commit eb60e2945a5746049ddca4b7f2a7ff4f8c01586b
Author: qining <qining@google.com>
Date:   Wed Aug 17 17:19:48 2016 -0400

    Unify constants pass
    
    De-duplicate constants and unifies the uses of constants for a SPIR-V
    module. If two constants are defined exactly the same, only one of them
    will be kept and all the uses of the removed constant will be redirected
    to the kept one.
    
    This pass handles normal constants (defined with
    OpConstant{|True|False|Composite}), some spec constants (those defined
    with OpSpecConstant{Op|Composite}) and null constants (defined with
    OpConstantNull).
    
    There are several cases not handled by this pass:
    
      1) If there are decorations for the result id of a constant defining
      instruction, that instruction will not be processed. This means the
      instruction won't be used to replace other instructions and other
      instructions won't be used to replace it either.
    
      2) This pass does not unify null constants (defined with
      OpConstantNull instruction) with their equivalent zero-valued normal
      constants (defined with OpConstant{|False|Composite} with zero as the
      operand values or component values).

commit 909d7f9bf5168621efc4c8daf8c61b1936a66fe9
Author: David Neto <dneto@google.com>
Date:   Wed Aug 31 14:35:58 2016 -0400

    Refactor CapabilitySet into templated class EnumSet

commit 2ce67252c8a09cbe4f1613ea5add266ffdcaf3d0
Author: qining <qining@google.com>
Date:   Wed Aug 31 12:44:49 2016 -0400

    Add forwarding so that passes' ctor can have args.
    
    Also removed the default argument value of `skip_nop` for function
    `SinglePassRunAndCheck()` and `SinglePassRunAndDisassemble()`. This is
    required to support variadic arguments.

commit 273920c55407751940195393e0152d8155aa5b7a
Author: David Neto <dneto@google.com>
Date:   Mon Aug 29 14:49:00 2016 -0400

    Handle capabilities larger than value 63
    
    Use libspirv::CapabilitySet instead of a 64-bit mask.
    
    Remove dead function spvOpcodeRequiresCapability and its tests.
    
    The JSON grammar parser is simplified since it just writes the
    list of capabilities as a braced list, and takes advantage of
    the CapabilitySet intializer-list constructor.

commit 47f2a1414bf39de531f764e08faefafc91efd7d9
Author: David Neto <dneto@google.com>
Date:   Sat Aug 27 14:49:53 2016 -0400

    Add libspirv::CapabilitySet
    
    It's optimized for the common case, where capabilities have value
    at most 63.

commit 76982706f978efe223865a10c777252f7ac3bcb6
Author: qining <qining@google.com>
Date:   Mon Aug 29 18:05:24 2016 -0400

    Get annotation instructions of a given id.

commit ecb56923896beae7e7cbab12cc9a68c8fe9b06b8
Author: qining <qining@google.com>
Date:   Mon Aug 29 16:09:40 2016 -0400

    Add AppendNames() interface for AssemblyBuilder

commit d9e63de117913330728b11878d1677a76c2f0ec3
Author: Lei Zhang <antiagainst@google.com>
Date:   Mon Aug 29 15:46:09 2016 -0400

    Create a separate header and source file for each pass.

commit 380f36eae143531f21a821d2d6eb284724ce301a
Author: qining <qining@google.com>
Date:   Thu Aug 4 13:24:08 2016 -0400

    Fold spec constants to normal constants (values fixed)
    
    For the spec constants defined by OpSpecConstantOp and
    OpSpecContantComposite, if all of their operands are constants with
    determined values (normal constants whose values are fixed), calculate
    the correct values of the spec constants and re-define them as normal
    constants.
    
    In short, this pass replaces all the spec constants defined by
    OpSpecContantOp and OpSpecConstantComposite with normal constants when
    possible. So far not all valid operations of OpSpecConstantOp are
    supported, we have several constriction here:
    
    1) Only 32-bit integer and boolean (both scalar and vector) are
    supported for any arithmetic operations. Integers in other width (like
    64-bit) are not supported.
    2) OpSConvert, OpFConvert, OpQuantizeToF16, and all the
    operations under Kernel capability, are not supported.
    3) OpCompositeInsert is not supported.
    
    Note that this pass does not unify normal constants. This means it is
    possible to have new generatd constants defining the same values.

commit 1d59aa07776ee6c95804e282cee1e79709b7313b
Author: David Neto <dneto@google.com>
Date:   Thu Aug 25 18:36:03 2016 -0400

    Pass manager recomputes Id bound automatically.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/371
    in the sense that the id bound is correct after all the passes
    have been run.  But it might be inconsistent between passes.

commit b1b2cac2cfc40e33ae12ce9f8b869febb78e5ce5
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Aug 26 16:52:16 2016 -0400

    Create const overloads for begin() and end() in Instruction.

commit 923a4596b44831a07060df45caacb522613730c9
Author: David Neto <dneto@google.com>
Date:   Fri Aug 26 16:25:40 2016 -0400

    Fix typo in spirv-opt help

commit d7b6362ed749969879b8909effc62df0fd120424
Author: David Neto <dneto@google.com>
Date:   Tue Aug 23 11:41:28 2016 -0400

    Add Module::ComputeIdBound
    
    When IDs change, something should use this utility method
    and Module::SetIdBound before writing out the binary.

commit 0a175eb0d655c7e0ee3be18f85cd32c5ca4a68de
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Aug 26 14:02:40 2016 -0400

    Add tests for decoration_empty().

commit ec07a0772409e48e0abde8ded16aaa2bb3b4660d
Author: qining <qining@google.com>
Date:   Fri Aug 26 11:54:36 2016 -0400

    Add a method in the types to check whether there is no decoration on a
    type.

commit 58e1a1e3bebba6ab42d21264c1155fcbddc2596a
Author: David Neto <dneto@google.com>
Date:   Fri Aug 26 10:33:41 2016 -0400

    Test ir::Instruction::GetOperand and GetInOperand

commit cc60caba1d2fc8c0594f7e09c5176022d08ba695
Author: David Neto <dneto@google.com>
Date:   Thu Aug 25 16:42:36 2016 -0400

    IrLoader gracefully handles incomplete blocks and functions
    
    This lets us write smaller test cases with the IrLoader, avoiding
    boilerplate for function begin/end, and basic block begin/end.
    
    Also ForEachInst is more forgiving of cases where a basic block
    doesn't have a label, and when a function doesn't have a defining
    or end instruction.

commit 53013cc816328f1e3ce8370f46635f832993948e
Author: David Neto <dneto@google.com>
Date:   Thu Aug 25 17:45:08 2016 -0400

    Add Instruction begin and end mutable iterators
    
    Refactored the instuction test.

commit 2607bbf30b4db5126704e98c702f724d84fe6d50
Author: David Neto <dneto@google.com>
Date:   Thu Aug 25 12:55:44 2016 -0400

    Add Instruction cbegin and cend to access operands

commit 97fc6aa3b88e63d9bde76f92cdf06e723f337d92
Author: David Neto <dneto@google.com>
Date:   Sat Aug 20 09:47:00 2016 -0400

    ForEachInst optionally runs on attached debug line insts
    
    Also:
    - Add const forms of ForEachInst
    - Rewrite Module::ToBinary in terms of ForEachInst
    - Add Instruction::ToBinaryWithoutAttachedDebugInsts
    - Delete the ToBinary method on Function, BasicBlock, and Instruction
      since it can now be implemented with ForEachInst in a less confusing
      way, e.g. without recursion.
    - Preserve debug line instructions on OpFunctionEnd (and store that
      instruction as a unique-pointer, for regularity).

commit e96a881b0bb7e42251566e12b8788134c9917aaf
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Aug 17 10:34:53 2016 -0400

    Travis CI: add build configuration for Android NDK with cmake.

commit 0d4b73c3bff665f4cf708434cee44861b430554f
Author: David Neto <dneto@google.com>
Date:   Wed Aug 24 11:18:16 2016 -0400

    Start v2016.4-dev

commit a7a84bd50d45b45da4a99f633b77b1d0f7fb1474
Author: David Neto <dneto@google.com>
Date:   Wed Aug 24 11:17:07 2016 -0400

    Finalize v2016.3

commit 3c35b6321ea16a58ad309f10fede6729b428a934
Author: David Neto <dneto@google.com>
Date:   Mon Aug 22 11:38:18 2016 -0400

    Add spirv-lesspipe.sh
    
    Idea suggested by @steve-lunarg in issue 359.

commit 97d06a36b0e261ee091eb3f83592f74fa63483a5
Author: David Neto <dneto@google.com>
Date:   Wed Aug 24 09:47:49 2016 -0400

    Mere mention of PointSize BuiltIn does not require Shader capability
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/365 which
    was reopened for this.

commit f51d82338e6a129300562b2c73daee02d3918b77
Author: Lei Zhang <antiagainst@gmail.com>
Date:   Thu Aug 18 23:16:21 2016 -0400

    Add a home brewed make_unique to ease creating unique_ptrs.

commit 6f13c7322960f9c41d601421d2637c957541fd03
Author: Lei Zhang <antiagainst@gmail.com>
Date:   Sat Aug 20 11:12:57 2016 -0400

    Remove some unused macros and functions.

commit f33aacd1650d510df43f97bedb8db5a196c91d80
Author: David Neto <dneto@google.com>
Date:   Tue Aug 23 18:44:26 2016 -0400

    CHANGES captures fix for issue 365

commit 358cb2940ab923166917014a79019aa7598548b0
Author: David Neto <dneto@google.com>
Date:   Tue Aug 23 18:18:17 2016 -0400

    Relax ClipDistance, CullDistance capability check in all environments
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/365

commit ccabcc467320f184ceb861604c0e1b2e5af900ce
Author: David Neto <dneto@google.com>
Date:   Sat Aug 20 05:51:15 2016 -0400

    Add opt::ir::Module::SetIdBound

commit 7e775aa99edd5a6c79460121002b3e9fba09cd88
Author: qining <qining@google.com>
Date:   Tue Aug 23 11:34:24 2016 -0400

    Get the number of elements for Vector and Matrix type

commit b891845b533628d5c2240963d8a59937f800148b
Author: qining <qining@google.com>
Date:   Tue Aug 16 13:06:03 2016 -0400

    Refine the DefUseManager
    
    * Fix the behavior when analyzing an individual instruction:
      * exisiting instruction:
          Clear the original records and re-analyze it as a new instruction.
      * new instruction with exisiting result id:
          Clear the original records of the exisiting result id. This means
          the records of the analyzed result-id-defining instruction will be
          overwritten by the record of the new instruction with the same
          result id.
      * new instruction with new result id or without result id:
          Just update the internal records to incorperate the new
          instruction.
    * Add tests for analyzing individual instruction w/o an exisiting module.
    * Refactor ClearInst() implementation
    * Remove ClearDef() function.
    * Fixed a bug in DefUseManager::ReplaceAllUsesWith() that OpName
      instruction may trigger the assertion incorrectly.
    * update the blurbs for EraseUseRecordsOfOperandIds()

commit 6c5bdc9a395e262ee218f3bf1209b62078e3314e
Author: qining <qining@google.com>
Date:   Wed Aug 17 16:44:38 2016 -0400

    Get the width from integer and float type

commit e8b7c7b2103a6fb57157de9f38a2a11646221c3c
Author: qining <qining@google.com>
Date:   Tue Aug 16 11:04:32 2016 -0400

    Replace the SetOperand() with SetInOperand() and SetResultType()

commit b65124f097251ee150ba98b31d9ee6dbd08c624b
Author: Lei Zhang <antiagainst@google.com>
Date:   Tue Aug 16 11:19:34 2016 -0400

    Make clear that we are using ptrdiff_t as the iterator difference type.
    
    And ptrdiff_t is a implementation defined signed type. Comparing it
    with unsigned number literal causes compiler warnings.

commit 9747d33d08cd3ef069c08b37ff94a971707a5741
Author: Lei Zhang <antiagainst@google.com>
Date:   Mon Aug 15 11:13:25 2016 -0400

    Derive iterator from std::iterator to reap standarad algorithms.
    
    By deriving from std::iterator, iterator_traits will be properly
    set up for our custom iterator type, thus we can use algorithms
    from STL with our custom iterators.

commit 1eec0ed4b950ff2cb23256fadb2dc96cc961747f
Author: Lei Zhang <antiagainst@google.com>
Date:   Mon Aug 15 13:41:47 2016 -0400

    Make analyses RAII-like and turn disable copy/move constructors.

commit 4dd4c14b80e478eb7f38e6f731c0b3b1fbc73abd
Author: David Neto <dneto@google.com>
Date:   Mon Aug 15 11:27:13 2016 -0400

    Avoid integer modulo by 1, to avoid warning
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/349

commit 033b7d00f06022c20c1ea1e13790d187b580b674
Author: David Neto <dneto@google.com>
Date:   Fri Aug 12 14:19:17 2016 -0400

    Avoid race on mkdir
    
    Should fix https://github.com/KhronosGroup/SPIRV-Tools/issues/340

commit 097ff25ea77a0b009efb2c1ff93f6decf154338d
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Aug 12 14:59:56 2016 -0400

    Allow OpUndef appearing in the type and global variable section.
    
    Also clean up API functions for adding instructions into the
    type and global values section.

commit c814911904189cacc799c5e41215d6fe6d14a732
Author: qining <qining@google.com>
Date:   Fri Aug 12 17:26:35 2016 -0400

    Add another construtor for opt::ir::Instruction

commit 4987ae65493f9de11f0905ad952c6c7386355c32
Author: David Neto <dneto@google.com>
Date:   Fri Aug 12 14:47:26 2016 -0400

    Test INotEqual for OpSpecConstantOp in asm, disasm

commit d06559340425af487eeb8a00bc3b495617f97fbc
Author: qining <qining@google.com>
Date:   Fri Aug 12 13:12:43 2016 -0400

    Add iterator getter interface for types_values_

commit b01755a5e2c184fdee3047f3a99caa2b90881fd0
Author: Umar Arshad <umar@arrayfire.com>
Date:   Fri Aug 12 14:28:17 2016 -0400

    OpUndef can appear in type declaration section

commit 94912ad1ba666877581b780864e14d054495139b
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Aug 11 19:58:42 2016 -0400

    Turn off modifying methods for const iterators.

commit 81532584cb91f05df9ec5a687e957118e59b968a
Author: qining <qining@google.com>
Date:   Fri Aug 12 10:43:26 2016 -0400

    Clear old def-use record when re-analyze an ID

commit 95dc16d1ec3e40dbf199adf5e36efdac0c8baadd
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Aug 12 10:04:23 2016 -0400

    Add make_range() & make_const_range() for creating iterator ranges.

commit 4b3247feba391d9d945e249067aa7fb09e29129e
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Aug 12 09:13:04 2016 -0400

    Avoid non-oneliner definition in class and add missing iterators.

commit 7a94e664338284a629ae42bbc53dea10984581d9
Author: qining <qining@google.com>
Date:   Fri Aug 12 10:05:58 2016 -0400

    Move the def-use analysis for single inst to public

commit e5bb46d2744624a662c5802e59952aff945337fa
Author: qining <qining@google.com>
Date:   Thu Aug 11 19:32:43 2016 -0400

    Add getter for pointee, element type

commit 645ee1d9e09172e177399c87eb3c8343e3b04a7b
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Aug 10 10:02:28 2016 -0400

    Create an iterator class for in-memory representation.

commit f949e321f2a3c39a33d2c7b8706b1592d2a8c717
Author: qining <qining@google.com>
Date:   Thu Aug 11 18:19:50 2016 -0400

    Make the lookup up of type id accepts const arg

commit 82405cf49946440722a3b28412493907b3a1dde8
Author: David Neto <dneto@google.com>
Date:   Thu Aug 11 15:34:26 2016 -0400

    Reuse the iterator on Id and type lookup

commit f4e3a905d4ddc0172d3254db4e686d5efcf4ffe9
Author: qining <qining@google.com>
Date:   Thu Aug 11 17:13:43 2016 -0400

    Add the const version of AsXXtype() interface.

commit cd6d6c0ccf50ad2c49e1822dd1d9eeecba463f6a
Author: qining <qining@google.com>
Date:   Thu Aug 11 15:10:09 2016 -0400

    Add GetId(Type* type) API to the type manager

commit 892239b7ccfec1774f3d81cc385c06f72aae1c78
Author: David Neto <dneto@google.com>
Date:   Thu Aug 11 12:11:36 2016 -0400

    Avoid double-copy of NameMapper object.

commit 8a5ce18f12dc8c222d69f46af439a932fce305e7
Author: David Neto <dneto@google.com>
Date:   Wed Aug 10 15:28:11 2016 -0400

    Use friendly names for Ids

commit 996a814ae382fb73717213791e570cc88e308a00
Author: David Neto <dneto@google.com>
Date:   Wed Aug 3 11:55:14 2016 -0400

    Add spirv-cfg to dump a GraphViz graph of the CFG
    
    This is experimental, and has not tests.
    It's been used to debug validation of structured control flow.
    
    - Has a legend describing special arcs to merge blocks and continue
      targets.
    - Labels the function entry block, with the Id of the function.

commit 23266c9b56230df8ad66590a72c4273027b4579c
Author: qining <qining@google.com>
Date:   Wed Aug 10 16:02:18 2016 -0400

    Add back the missing msg about --eliminate-dead-const

commit 75d43162806d7876b48c358c13c591bf9e7e4d43
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Aug 10 16:10:14 2016 -0400

    Fix build error about passing initializer-list to constructor.
    
    VS2013 is not happy with using initializer-list to initialize
    vector parameters to explicit constructors taking one vector.

commit dda9de965d7273d8d22d703d5d6d73d9bfa4eb57
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Aug 10 12:37:19 2016 -0400

    Make type manager RAII-like w.r.t. the module to be analyzed.

commit c562e231e3262315745f9e00e49280d7b48495b3
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Jul 28 12:15:14 2016 -0400

    Optimization: Add type manager.
    
    Type manager will construct a map of types gradually from
    instructions.

commit 6d4d15b9d07641128e0aa1f14e365ebdd65b2ab9
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Jul 28 12:11:01 2016 -0400

    Optimization: Add type class hierarchy.

commit 478d96aac48f79e98648174ff6fca92362dabf32
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Aug 10 10:12:14 2016 -0400

    Appveyor: also test on Visual Studio 2013.

commit 75c6db0746022c00322fe6d8a525ff00642fba78
Author: David Neto <dneto@google.com>
Date:   Tue Aug 9 17:57:18 2016 -0400

    Fix paths in the README.

commit 80c94a4fa854c65522c3869f4b991e57b24d3d9b
Author: Lei Zhang <antiagainst@google.com>
Date:   Tue Aug 9 19:20:35 2016 -0400

    Change the interfaces of in-memory representation to use pointers.
    
    Previously we use vectors of objects and move semantics to handle
    ownership. That approach has the flaw that inserting an object into
    the middle of a vector, which may trigger a vector reallocation,
    can invalidate some addresses taken from instructions.
    
    Now the in-memory representation internally uses vector of unique
    pointers to handle ownership. Since objects are explicitly heap-
    allocated now, pointers to them won't be invalidated by vector
    resizing anymore.

commit 7784829b3adf3ec102133c8d1b48c9ad161aeac3
Author: David Neto <dneto@google.com>
Date:   Wed Aug 10 10:40:59 2016 -0400

    Update CHANGES to say issue 288 is fixed

commit 38c9471a0ed4edd9d31126f5d6f2c8797136c10d
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Wed Aug 10 09:45:15 2016 -0400

    Fixed the build for MSVC.
    
    assembly_builder was missing an include for cstdint.

commit 485f513a29058e3fecb05e41593d13204bb7c9e5
Author: Lei Zhang <antiagainst@google.com>
Date:   Tue Aug 9 16:57:36 2016 -0400

    Manually create move the constructor/assignment for Instruction.
    
    This is because some old visual studio versions (e.g., 2013) do
    not support automatically generating move constructors/assignments.

commit 677ae7fbe8c0cb5843254eece121162ff558fc66
Author: David Neto <dneto@google.com>
Date:   Tue Aug 9 18:23:40 2016 -0400

    Fix compilation. My bad
    
    The API changed, and I forgot to submit this patch.

commit 489204cf0351bdbf78bc7ac77a637e8cf2d0e9ec
Author: Umar Arshad <umar@arrayfire.com>
Date:   Sat Aug 6 13:40:01 2016 -0400

    Check dominance of OpPhi parent and variable pairs

commit 8ea1268f849197d3551d65fbce3069136b075b67
Author: Umar Arshad <umar@arrayfire.com>
Date:   Tue Aug 9 14:05:03 2016 -0400

    Removed dead code/const_casts/lists

commit 60461428f4f49cc1b4cd6464e9346c4691448e74
Author: qining <qining@google.com>
Date:   Tue Aug 9 16:02:21 2016 -0400

    Separate pass.h from passes.h
    
    Future pass implementations should only need to include pass.h

commit 190b0d3162004e359605cec57dfcb6af75ca86ca
Author: Lei Zhang <antiagainst@google.com>
Date:   Sun Aug 7 22:49:00 2016 -0400

    Use NEW behavior for policy CMP0054.
    
    The NEW behavior is to not dereference variables or interpret keywords
    that have been quoted or bracketed.
    
    For more information, see
    https://cmake.org/cmake/help/v3.1/policy/CMP0054.html.
    
    This is to suppress a warning when using CMake 3.1.3+.

commit 816f29805b9c66bc6143f8506cb0976224d43336
Author: Umar Arshad <umar@arrayfire.com>
Date:   Sat Aug 6 13:29:33 2016 -0400

    Refactor Id -> Instruction

commit d49928f0cc9bc56a3f46ecf452a069e0512b2af5
Author: qining <qining@google.com>
Date:   Tue Aug 9 12:09:53 2016 -0400

    Fix minor mistakes in the tests of dead-const-elim

commit a90fc84779238de0263bb6c065e8306fb94986e9
Author: qining <qining@google.com>
Date:   Mon Aug 8 17:09:30 2016 -0400

    Print the shader when module building failed

commit 51a2484b368a687a8810e206ba5709abed89ed2a
Author: qining <qining@google.com>
Date:   Fri Jul 29 11:35:58 2016 -0400

    Dead constant elimination
    
    A pass to remove dead constants, including both front-end constants and spec
    constants.
    
    This pass does not handle dead variables and types.

commit fd965c9e7ebf6c825537f24eb49b46b5e5345d5c
Author: Umar Arshad <umar@arrayfire.com>
Date:   Sat Aug 6 13:25:02 2016 -0400

    Remove unnecessary headers

commit ffa42994fdcf001c1fe03ad9505dc4aaed7b6069
Author: Umar Arshad <umar@arrayfire.com>
Date:   Sat Aug 6 12:24:19 2016 -0400

    Remove needless copies. Delete copy constructor.
    
    * Deletes the ValidationState_t copy constructor
    * Removes needless copies of the copy constructor

commit c296701964d193939bc644c1ef9ba1b6e11c7411
Author: David Neto <dneto@google.com>
Date:   Fri Aug 5 18:19:30 2016 -0400

    Add target envs for OpenCL, OpenGL
    
    Covers: OpenCL 2.1, OpenCL 2.2
    Covers: OpenGL 4.0, OpenGL 4.1, OpenGL 4.2, OpenGL 4.3, OpenGL 4.5.
    The OpenGL environments assume the use of GL_ARB_gl_spirv, of course.

commit aa3031273f757041ee99d630bb3eb856f2de4a67
Author: David Neto <dneto@google.com>
Date:   Fri Aug 5 17:10:36 2016 -0400

    Start v2016.3-dev

commit 8e3ac3ca582291235b17523674d1fb14f254d29c
Author: David Neto <dneto@google.com>
Date:   Fri Aug 5 17:07:34 2016 -0400

    Finalize v2016.2
    
    Document recently fixed bugs.

commit e712f826b66bb3a361d165f6fe163ca5e0a56064
Author: David Neto <dneto@google.com>
Date:   Fri Aug 5 15:20:59 2016 -0400

    Hide implementations of BasicBlock::dominates,postdominates

commit 605847f15bc2f0bc5318a061176f7a1999eec6b5
Author: David Neto <dneto@google.com>
Date:   Fri Aug 5 16:05:44 2016 -0400

    Track a construct by its entry block.

commit b51b80980c57b61b061aa203a9d481e51af2c5cd
Author: David Neto <dneto@google.com>
Date:   Fri Aug 5 11:14:21 2016 -0400

    Validator cfg fixes
    
    - Find unreachable continue targets.  Look for back edges
      with a DFS traversal separate from the dominance traversals,
      where we count the OpLoopMerge from the header to the continue
      target as an edge in the graph.
    
    - It's ok for a loop to have multiple back edges, provided
      they are all from the same block, and we call that the latch block.
      This may require a clarification/fix in the SPIR-V spec.
    
    - Compute postdominance correctly for infinite loop:
      Bias *predecessor* traversal root finding so that you use
      a later block in the original list.  This ensures that
      for certain simple infinite loops in the CFG where neither
      block branches to a node without successors, that we'll
      compute the loop header as dominating the latch block, and the
      latch block as postdominating the loop header.

commit 3bf4dc102f4ffa2262b9a8d678d732ce66b08f81
Author: David Neto <dneto@google.com>
Date:   Fri Jul 29 11:24:57 2016 -0400

    Add BasicBlock methods: dominates postdominates

commit bb4c0b1af6787da57b95219599f7abf473f7d820
Author: David Neto <dneto@google.com>
Date:   Tue Jul 26 14:59:40 2016 -0400

    Rename a variable so it's consistent with spec
    
    In the spec "continue block" is a block with a branch
    to the Continue Target.  It's not the Continue Target.

commit 71fac5a29c28c8cc44df9427e8fe1e131b8ad380
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Aug 5 13:46:45 2016 -0400

    Check configuration and gmock existence when adding unit tests.

commit 3184687714d76d920224e761a05c9598de64ad7f
Author: David Neto <dneto@google.com>
Date:   Fri Aug 5 10:09:06 2016 -0400

    Fix dominance calculation
    
    Fixes dominance calculation when there is a forward arc from an
    unreachable block A to a reachable block B.  Before this fix, we would
    say that B is not dominated by the graph entry node, and instead say
    that the immediate dominator of B is the psuedo-entry node of the
    augmented CFG.
    
    The fix:
    
    - Dominance is defined in terms of a traversal from the entry block
      of the CFG.  So the forward DFS should start from the function
      entry block, not the pseudo-entry-block.
    
    - When following edges backward during dominance calculations, only go to
      nodes that are actually reachable in the forward traversal.
      Important: the sense of reachability flips around when computing
      post-dominance.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/297

commit 5be1ee173f3496b3a4209663f56580c61fd9742c
Author: qining <qining@google.com>
Date:   Fri Aug 5 09:51:29 2016 -0400

    Add blurbs for freeze-spec-const pass

commit 0d8ddd0b759481945c87e9006f73b333158a06dd
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Aug 4 18:26:22 2016 -0400

    Create directory first if not existing and always refresh.

commit c6465fb220f5a6a9daae84774903b64ade352b57
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Aug 4 18:25:42 2016 -0400

    Avoid redefining builtin dir.

commit d37ecb924a99379aa72056f90a09fd1e378aabb8
Author: qining <qining@google.com>
Date:   Tue Aug 2 12:08:40 2016 -0400

    Simple Assembly code builder for test uses
    
    AssemblyBuilder contains boilplates.
    Adds OpName instructions for all added defining instructions.
    Adds OpDecorate SpecId for all spec constants added with OpSpecConstant,
    OpSpecConstantTrue and OpSpecConstantFalse instructions.

commit 621fa3961f332e02b53b6bf70d6614bbe36b2f81
Author: David Neto <dneto@google.com>
Date:   Thu Aug 4 14:57:09 2016 -0400

    Only check def dominance of reachable uses
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/295

commit 50707a1257cd8fbb10f350032c4562c566b2e2dc
Author: David Neto <dneto@google.com>
Date:   Tue Aug 2 17:48:16 2016 -0400

    Update CHANGES to reflect INotEqual update

commit 256c56db89eb206cc23983fe995088d5565801ee
Author: qining <qining@google.com>
Date:   Tue Jul 26 17:52:06 2016 -0400

    Allow OpINotEqual in OpSpecConstantOp inst
    
    Pendding for now until the spec is fixed.

commit 9acc0f1401548ae1973d7758fe263ba2b13fa0ff
Author: David Neto <dneto@google.com>
Date:   Tue Aug 2 11:59:10 2016 -0400

    Never generate % for a friendly disassembled Id
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/290

commit e7a9e007384db16bc39dae01fadf4b73e754ab7e
Author: David Neto <dneto@google.com>
Date:   Fri Jul 29 18:05:02 2016 -0400

    Add disabled test for phi variable def-use check
    
    Disabled because doing a proper check requires much more
    code, and it can wait.

commit 1408aea260d6675fb78ea66db18785055cdcc3d9
Author: David Neto <dneto@google.com>
Date:   Fri Jul 29 17:53:46 2016 -0400

    Avoid checking def-use dominance for OpPhi value operands
    
    The def-use dominance checker doesn't have enough info to know
    that a particular use is in an OpPhi, so skip tracking those uses
    for now.  Add a TODO to do a proper OpPhi variable-argument check
    in the future.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/286

commit 64ff3c6dc1596f94d8d0e047b3211c2831838268
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Jul 27 17:37:04 2016 -0400

    Optimization: Add def use analysis.

commit 1db4cb456bafb85559df1ca7d01fc2d7bc754a3f
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Jul 28 09:09:00 2016 -0400

    Use default copy/move constructors/assignments for Instruction.

commit dcf28bf6cea35f38265f6ea3093de57705bfc4a7
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Jul 27 17:31:23 2016 -0400

    Allow missing memory model instructions in modules.

commit c978b72477c068ab93830d9913d4f32b93164c52
Author: David Neto <dneto@google.com>
Date:   Wed Jul 27 17:02:22 2016 -0400

    Fix infinite loop in dominance calculation.
    
    Ensure the dominance calculation visits all nodes in the CFG.
    The successor list of the pseudo-entry node is augmented with
    a single node in each cycle that otherwise would not be visited.
    Similarly, the predecssors list of the pseduo-exit node is augmented
    with the a single node in each cycle that otherwise would not
    be visited.
    
    Pulls DepthFirstSearch out so it's accessible outside of the dominator
    calculation.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/279

commit 74eb532a1db51a0e4eaeff6c971872587510e90e
Merge: a2450626 47508959
Author: Qining <lqn.anthony@gmail.com>
Date:   Thu Jul 28 15:33:16 2016 -0400

    Merge pull request #284 from Qining/fix-freeze-spec-const-pass-test
    
    Fix a test failure in pass manager test

commit 4750895943841278c8aef316be4a81b56a6ad3d8
Author: qining <qining@google.com>
Date:   Thu Jul 28 15:30:37 2016 -0400

    Fix a test failure in pass manager test
    
    Change "Null" to "null" in pass manager test

commit a24506266bbdb849785678402d247c43acd234e7
Author: qining <qining@google.com>
Date:   Tue Jul 26 12:11:03 2016 -0400

    Freeze spec constants to their default values
    
    Add a pass to freeze spec constants to their default values. This pass does
    not fold the frozen spec constants and does not handle SpecConstantOp
    instructions and SpecConstantComposite instructions.

commit ac46512b05cc859b87634c8413e785fefd181263
Author: qining <qining@google.com>
Date:   Wed Jul 27 17:22:45 2016 -0400

    Add an utility: in-place string replacement

commit d503d75cc3f1c9d81e7a7bf97a33a1b5b8e8863f
Author: qining <qining@google.com>
Date:   Wed Jul 27 10:19:39 2016 -0400

    Use friendly disassembly output

commit efc782d743372b374796d5df3cb233291b686d52
Author: Umar Arshad <umar@arrayfire.com>
Date:   Wed Jul 13 18:57:52 2016 -0400

    Check definitions appear in dominator of use
    
    Also address use and def of ID in same instruction

commit 66c94928a324efd7d3c2d10817e8fb599096302b
Author: Umar Arshad <umar@arrayfire.com>
Date:   Fri Jul 8 09:44:10 2016 -0400

    Refactor IDs definition and use tracking
    
    * Creates an ID class which manages definition and use of IDs
    * Moved tracking code from validate.cpp to validate_id.cpp
    * Rename and combine SsaPass and ProcessIds into IdPass
    * Remove module dependency in Function

commit 6c61bf2dfadf70ab5fe1b0fb918ba03b7afa2396
Author: Umar Arshad <umar@arrayfire.com>
Date:   Fri Jul 22 16:27:21 2016 -0400

    Fixes segfault for loops without back-edges
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/270

commit 45af1dd83dda6e7c7ec262a44c98a842ec795c69
Author: Lei Zhang <antiagainst@google.com>
Date:   Tue Jul 19 15:04:43 2016 -0400

    Start v2016.2.

commit 1e7c5cbe90877ffbaec5f56173d755ad06de6207
Author: Lei Zhang <antiagainst@google.com>
Date:   Tue Jul 19 15:03:52 2016 -0400

    Finalize v2016.1.

commit 0bdcc23f7e851c309327e7330a80651e058050c2
Author: David Neto <dneto@google.com>
Date:   Fri Jul 8 14:29:52 2016 -0400

    Disassembling: map IDs to friendly names.
    
    Add a FriendlyNameMapper to deduce friendly names for IDs based on
    OpName, type structure, etc.

commit 1a9385bbd0e6eae188c14302cf37c415ecc8b698
Author: Lei Zhang <antiagainst@google.com>
Date:   Mon Jul 18 11:01:36 2016 -0400

    Track changes in SPIRV-Headers for SPIR-V 1.1 rev 2.
    
    * The `Input` StorageClass doesn't require the `Shader` capability
      anymore.
    * The `Sampled1D` and `SampledBuffer` capabilities don't require
      the `Shader` capability anymore. So they do not indirectly
      depend on the `Matrix` capability. So are the `Image1D` and
      `ImageBuffer` capabilities, which depend on `Sampled1D` and
      `SampledBuffer`.
    
    A new GLSL grammar file is uploaded for SPIR-V 1.1, but it's the
    same as the existing one for SPIR-V 1.0.
    
    Now tracking commit 3814effb879ab5a98a7b9288a4b4c7849d2bc8ac in
    SPIRV-Headers.

commit 06581f5ce6cb636ed1c6611da371656c26a1d871
Author: David Neto <dneto@google.com>
Date:   Thu Jul 7 17:03:22 2016 -0400

    Turn off ClipDistance CullDistance cap checks for Vulkan
    
    Turn them off until resolution of the debate over how they should be checked.
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/261

commit cbdba0323cb034111bd50d2df9f67b890b5fc1c7
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Jul 7 15:04:06 2016 -0400

    Mention the steps to pull dependencies when building in README.

commit e59007320e4fa8a3b4a06f8eccf25271d2e65e23
Author: David Neto <dneto@google.com>
Date:   Tue Jul 5 10:21:21 2016 -0400

    Test v1.1 loop dependency support
    
    For DependencyInfinite and DependencyLength, test
    that they don't require a capability to be turned on.
    Also, that they are assembled, binary parsed, and disassembled
    correctly.

commit ce7ced138f325a855323601249b3a485879b2f5c
Author: David Neto <dneto@google.com>
Date:   Mon Jul 4 15:13:08 2016 -0400

    Start v2016.1-dev

commit 84058939b031108574ccf0b083b3e6b192d974f0
Author: David Neto <dneto@google.com>
Date:   Thu Jun 2 15:29:13 2016 -0400

    Finalize v2016.0

commit 23a3c2f762891c0214f9f789a1722e7e5d352909
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Jun 30 15:44:36 2016 -0400

    DRY file writing code in tools.

commit 7fd27e737ae1aae6ba2152a64eadc8a463d93cea
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Jun 30 14:24:04 2016 -0400

    DRY file reading code in tools.

commit 2f84ffc99c06457da1e1366875d1294a14926f61
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Jun 30 13:56:34 2016 -0400

    Rework CMake configuration for tools.

commit 310bc84cf7b01f61b1926f50ece3dae3f46ceb54
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Jun 29 16:16:03 2016 -0400

    Add the spirv-opt command line tool.

commit 2c4c73cf37b9315c9b96c53694c81e3a3b122ddf
Author: Lei Zhang <antiagainst@google.com>
Date:   Tue Jun 28 14:58:17 2016 -0400

    Add Pass, PassManager, and StripDebugInfoPass.

commit e461cbe2681170476abbf8b28ef663dda1bfa3c1
Author: David Neto <dneto@google.com>
Date:   Tue Jun 28 17:25:28 2016 -0400

    Avoid capability checks on ID values. They are not literals
    
    Works around issue 248 by weakening the test:
    https://github.com/KhronosGroup/SPIRV-Tools/issues/248
    
    The validator should try to track (32-bit) constant values, and then
    for capability checks on IDs, check the referenced value, not the
    raw ID number.

commit f760d115b90face4f804f22e53d76b5db20ff16b
Author: Lei Zhang <antiagainst@google.com>
Date:   Tue Jun 28 13:24:10 2016 -0400

    Add tests for the cpp interface.

commit abf8f6413c96d9fcc13e9828929d618a27e70edc
Author: Lei Zhang <antiagainst@google.com>
Date:   Tue Jun 28 10:23:13 2016 -0400

    Promote ir namespace and create draft libspirv.{h|c}pp.

commit 8590f9cc810f5f4f29f43fc8755d756b8f7d4667
Author: Lei Zhang <antiagainst@google.com>
Date:   Sun May 22 14:17:39 2016 -0400

    Add IrBuilder for constructing SPIR-V in-memory representation.

commit 200e89788775ebaa1b23d261dc6ce96badff4b16
Author: Lei Zhang <antiagainst@google.com>
Date:   Mon Jun 27 15:06:41 2016 -0400

    Add an option to spvBinaryToText() to ignore header output.

commit 886dd352d5b0fc100978003c258ab43646dc4e92
Author: Umar Arshad <umar@arrayfire.com>
Date:   Fri Jun 24 23:45:25 2016 -0400

    Fix several violations of the style guide

commit 3df8f7cebd5b15071535a8c29be458d14dcb8939
Author: Lei Zhang <antiagainst@google.com>
Date:   Sun May 22 14:11:24 2016 -0400

    Add classes for representing SPIR-V language constructs in memory.

commit df3765333388acd218ceae7f043247226e3fe48c
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Jun 24 15:48:34 2016 -0400

    Travis CI: bump OS X and XCode version.

commit 50652277481d5b858c6c5e4de8ddbcc741451c1d
Author: David Neto <dneto@google.com>
Date:   Fri Jun 24 02:14:16 2016 -0400

    Use pseudo entry and pseudo exit blocks for dominance.
    
    For dominance calculations we use an "augmented" CFG
    where we always add a pseudo-entry node that is the predecessor
    in the augmented CFG to any nodes that have no predecessors in the
    regular CFG.  Similarly, we add a pseudo-exit node that is the
    predecessor in the augmented CFG that is a successor to any
    node that has no successors in the regular CFG.
    
    Pseudo entry and exit blocks live in the Function object.
    
    Fixes a subtle problem where we were implicitly creating
    the block_details for the pseudo-exit node since it didn't
    appear in the idoms map, and yet we referenced it.  In such a case the
    contents of the block details could be garbage, or zero-initialized.
    That sometimes caused incorrect calculation of immediate dominators
    and post-dominators.  For example, on a debug build where the details
    could be zero-initialized, the dominator of an unreachable block would
    be given as the pseudo-exit node.  Bizarre.
    
    Also, enforce the rule that you must have an OpFunctionEnd to close off
    the last function.

commit 1a050b10692e07e5efd4892d968df904791baaaa
Author: Lei Zhang <antiagainst@google.com>
Date:   Tue Jun 21 18:29:36 2016 -0400

    Use arguments for add_spvtools_unittest.

commit 18a263e7634a97abf09f53c1e681ddec06b6ce62
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Jun 22 10:53:41 2016 -0400

    Appveyor: Pull SPIRV-Headers for building and update README link.

commit f61db0bcc6717b4b60a7e38e7c3c58ad02110aa8
Author: Umar Arshad <umar@arrayfire.com>
Date:   Fri Jun 3 21:24:24 2016 -0400

    Validator structured flow checks: back-edge, constructs
    
    Skip structured control flow chekcs for non-shader capability.
    
    Fix infinite loop in dominator algorithm when there's an
    unreachable block.

commit 7cdf39c8f1802b493053b7c04dde924b61248a8e
Author: Lei Zhang <antiagainst@google.com>
Date:   Tue Jun 21 17:27:27 2016 -0400

    Ignore Vim swap files.

commit 1a18739650fffa25a786bc35caeb34d4e82aad9f
Author: David Neto <dneto@google.com>
Date:   Tue Jun 14 16:41:27 2016 -0400

    Fix ExtInst parsing: no IdRef* at end
    
    The operands following the extended instruction literal
    number are determined by the extended instruction itself.
    So drop the zero-or-more IdRef pattern at the end of OpExtInst.
    
    It's arguable whether this should actually be a grammar fix.  I've
    chosen to patch this in SPIRV-Tools instead of in the grammar file.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/233
    
    Also fix two test cases for OpenCL extended instructions.  These
    errors of supplying too many operands are now detected.

commit 37e4600c3efad7b1cfdc1df70a977be82eb3c811
Author: David Neto <dneto@google.com>
Date:   Tue Jun 14 11:45:35 2016 -0400

    Fix OpenCL pow and pown arguments
    
    Spec fix appeared in SPIR-V 1.0 Rev 2:
    https://www.khronos.org/registry/spir-v/specs/1.0/OpenCL.ExtendedInstructionSet.100.html#_changes_from_version_1_0_revision_1
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/143

commit 3ed641df39c26c47dc06bd1f3044b9a32b5b9af5
Author: David Neto <dneto@google.com>
Date:   Mon Jun 13 17:26:09 2016 -0400

    In physical addressing, functions can return pointers
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/229

commit 10dba9178197c96074bcae7d747761c45e5ab9cc
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Apr 14 14:05:53 2016 -0400

    Use SPIR-V headers from the KhronosGroup/SPIRV-Headers repo.

commit 6fff41a6db27c42f7811229f1fd252f017548f68
Author: David Neto <dneto@google.com>
Date:   Fri Jun 10 08:43:12 2016 -0400

    std::function needs <functional>. Fixes Android build

commit 9ddd54d16d19dedcfcd0020f47d089c587775eb9
Author: David Neto <dneto@google.com>
Date:   Fri Jun 10 06:41:20 2016 -0400

    Avoid copy of work list argument: make it const ref

commit e3dcaf56100289db449eb4e8cc226f7185bcfcaf
Author: Umar Arshad <umar@arrayfire.com>
Date:   Fri Jun 3 21:14:22 2016 -0400

    Refactor depth first traversal to be more generic
    
    Refactor the way the post order vector is created. This new method
    will allow for the extraction of backedges and create the post order
    vector in one pass.

commit 11437165d603ae6ab28b4a02e349748632785eea
Author: Umar Arshad <umar@arrayfire.com>
Date:   Thu Jun 9 15:51:39 2016 -0400

    Fix diagnostic message for layout errors

commit 90a4252aae7f912345918b48e8b90c03e4c945d4
Author: Umar Arshad <umar@arrayfire.com>
Date:   Thu Jun 2 18:51:05 2016 -0400

    Split validate_types file into multiple classes
    
    Creates separate files for the ValidationState, Function and
    BasicBlock classes.

commit 00b72c2995736f80c9e14a5a98a9dc613a87c582
Author: Umar Arshad <umar@arrayfire.com>
Date:   Wed Jun 1 18:22:57 2016 -0400

    Remove redundant in_block function from Function
    
    Same test can be done through the get_current_block function

commit c5fe6d9dc90c4539c76085d020ff526fd847b83b
Author: Dejan Mircevski <deki@google.com>
Date:   Fri Jun 3 21:46:19 2016 -0400

    Avoid accessing invalid iterator.

commit f9903c8d36eda4ee683790c844982892c9d37dd6
Author: Umar Arshad <umar@arrayfire.com>
Date:   Wed Jun 1 18:05:28 2016 -0400

    Additional CFG tests
    
    * Empty function
    * Single block loops
    * Nested loops
    * Nested selection

commit 87125a19c6211659c0b6534ca74a8ab7fd28d1e0
Author: David Neto <dneto@google.com>
Date:   Thu Jun 2 15:32:28 2016 -0400

    Fix CHANGES file version parsing. -dev is optional

commit 812fb7d798cc18f833502176e5769f2d66f61f26
Author: Dejan Mircevski <deki@google.com>
Date:   Thu Jun 2 13:13:04 2016 -0400

    Make googletest regexes portable.
    
    On Windows, test::MatchesRegex() doesn't support brackets.  On Linux, \d
    doesn't work. :(

commit 0b9fd50d3122c7fe999d793912cc9df5368e942d
Author: Umar Arshad <umar@arrayfire.com>
Date:   Wed Mar 16 17:20:02 2016 -0400

    Control Flow Graph Validation

commit 2ea7449c9c14e392c37694736d65957821657d81
Author: Lei Zhang <antiagainst@google.com>
Date:   Sun May 22 13:48:08 2016 -0400

    Create a function for adding unittests in CMake.
    
    Also remove unnecessary main() function for unittests.

commit 6a1e1ac7b99e4447b89932279d03f8435675207c
Author: Lei Zhang <antiagainst@gmail.com>
Date:   Wed May 25 21:01:54 2016 -0400

    Travis CI: Use ctest to run all the tests.

commit c7551e1f0784f7c5096bf34bb005eee1491ab47f
Author: Lei Zhang <antiagainst@google.com>
Date:   Tue May 17 09:02:45 2016 -0400

    Add Appveyor configuration for Windows build.

commit 0d512bbef58dfcdb1a6bcde7fe17fcc4a33a1aa7
Author: Dejan Mircevski <deki@google.com>
Date:   Thu May 12 22:06:28 2016 -0400

    Test ABGR in both 1.0 and 1.1.

commit 7fdf56cbdc928fbe665f7552f920e3189b8ad7ee
Author: Dejan Mircevski <deki@google.com>
Date:   Wed May 11 15:21:10 2016 -0400

    Remove needless include dir for spirv-dis.

commit faad7fea3de15b0f9e196fe94a049fb2d657da0a
Author: Dejan Mircevski <deki@google.com>
Date:   Wed May 11 13:12:59 2016 -0400

    Test ABGR image channel order.
    
    Update include/spirv/spirv.h from SPIRV-Headers.

commit 6520ba93acbdf6f4631e5aab71f8ba816dca898b
Author: Dejan Mircevski <deki@google.com>
Date:   Wed May 11 12:40:59 2016 -0400

    Test OpModuleProcessed.

commit 10f10205601912a4241096aed8c9d21dbc06a913
Author: Dejan Mircevski <deki@google.com>
Date:   Wed May 11 10:34:27 2016 -0400

    Remove done TODOs in OpNameTest.
    
    Simplify the instantiation by using Values() instead of ValuesIn().
    
    Run clang-format.

commit a7c1265c382f72a6709f11a1f78e1393428bab52
Author: Dejan Mircevski <deki@google.com>
Date:   Tue May 10 17:02:41 2016 -0400

    Test SpecId validation.

commit 2703039b44dd3bbf0284ea098c79b7349f0da862
Author: Dejan Mircevski <deki@google.com>
Date:   Wed May 11 09:48:52 2016 -0400

    Add --target-env.
    
    commit 7648187c344cfc7847607acb2a6fa5606a3d10c1
    Author: Dejan Mircevski <deki@google.com>
    Date:   Thu Apr 21 15:44:07 2016 -0400
    
        Turn --vulkan into --target-env.

commit 4376856b1ac539c571180271ce9596ad970e5817
Author: Dejan Mircevski <deki@google.com>
Date:   Mon May 9 23:15:46 2016 -0400

    Add tests for MaxByteOffset.

commit dc4c2ba7dc2c8b8c3bae0b46fb3d67b482102cd0
Author: Jamie Madill <jmadill@chromium.org>
Date:   Fri Apr 29 14:36:00 2016 -0400

    Add PipeStorage tests.

commit 34cb0035fd6d29a68daa5c042c109690774ea85e
Author: Jamie Madill <jmadill@chromium.org>
Date:   Fri Apr 29 14:36:00 2016 -0400

    Fix several warnings exposed in MSVS 2015.
    
    diagnostic.cpp:
    - unreachable code
    
    operand.cpp
    - conversion between int and uint32_t
    - unreachable code
    
    hex_float.h:
    - conversion from 'const int' to 'unsigned int'
    - unreachable code
    
    validate_id.cpp
    - forcing value to bool 'true' or 'false'
    
    validate_types.cpp:
    - forcing value to bool 'true' or 'false'

commit 66fcb456c1cb3c793c4095b6d7b5ee78a12dc4b4
Author: Florian Ziesche <florian.ziesche@gmail.com>
Date:   Wed Mar 2 22:17:54 2016 +0100

    bitcast fixes
    
     * ValidationState_t and idUsage now store the addressing model and memory model of the SPIR-V module (this is necessary for certain instructions that need different checks depending on if the logical or physical addressing model is used)
     * removed SpvOpPtrAccessChain and SpvOpInBoundsPtrAccessChain from spvOpcodeIsPointer again as these are disallowed in logical addressing mode and only allowed in physical addressing mode (which doesn't use/need spvOpcodeIsPointer in the first place)
     * added SpvOpImageTexelPointer and SpvOpCopyObject to spvOpcodeIsPointer
     * OpLoad/OpStore now only check if the used pointer operand originated from a valid pointer producing opcode in logical addressing mode (as per 2.16.1)
     * moved bitcast pointer tests to the kernel / physical addressing model part (+cleanup)
     * renamed spvOpcodeIsPointer to spvOpcodeReturnsLogicalPointer to clarify this function is only meant to be used with the logical addressing model

commit 13877a3b0e9d9e3217f726178f6d26f1bf1867cc
Author: Dejan Mircevski <deki@google.com>
Date:   Wed Apr 27 16:22:15 2016 -0400

    Add v1.1 tests for OpLoopMerge.

commit 3732d6cc2146e8e1f1201aa6688c9efc997d42cf
Author: Dejan Mircevski <deki@google.com>
Date:   Fri Apr 29 13:40:01 2016 -0400

    Add v1.1 capabilities validation.
    
    Refactor the ValidateCapability test fixture.
    
    Explain the meaning of test parameters.  Factor out methods for
    convenience and readability.  DRY v1.0 and v1.1 tests.

commit af701f8f6a7324b916c99714e73cf0c61d3fbafe
Author: Dejan Mircevski <deki@google.com>
Date:   Wed Apr 27 17:04:37 2016 -0400

    Add basic Initializer/Finalizer tests.

commit ca1bf94c90697fcbc53310f6a991646e73f3181c
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Apr 27 16:47:13 2016 -0400

    Use a single definition of ARRAY_SIZE to simplify code.

commit 45d391b7b17fcd2643f05d5505512c9e3c9ea06f
Author: Dejan Mircevski <deki@google.com>
Date:   Wed Apr 27 15:41:58 2016 -0400

    Add OpSizeOf tests.

commit da8222ee4e45b74ac447e55951f8ae0b1fc0ff5a
Author: Dejan Mircevski <deki@google.com>
Date:   Tue Apr 26 13:03:28 2016 -0400

    Refactor OpExecutionModeTest and apply it on v1.1.
    
    Previously v1.1 testing was dead.

commit 27d6008889af20674845648075f28702ca30f71a
Author: Dejan Mircevski <deki@google.com>
Date:   Tue Apr 26 12:16:00 2016 -0400

    Refactor v1.1 tests and turn them on.
    
    Previously, the "V11" text fixture was empty.

commit 9166854ac93ef81b026e943ccd230fed6c8b8d3c
Author: David Neto <dneto@google.com>
Date:   Thu Apr 21 20:50:11 2016 -0400

    Add CHANGES file with high level software history
    
    Add a high level version number for SPIRV-Tools, beginning
    with v2016.0-dev.  The README describes the format of the
    version number.
    
    The high level version number is extracted from the CHANGES
    file.  That works around:
     - stale-bait for when we don't add tags to the repository
     - our inability to add tags to the repository
    
    Option --version causes spirv-as, spirv-dis, and spirv-val to
    show the high level version number.
    
    Add spvSoftwareVersionString to return the C-string for
    the high level version number.
    
    Add spvSoftwareVersionDetailsString() so that clients can get
    more information if they want to.
    Also allows us to clean up the uses in the tool executables files,
    so now only one file includes build-version.inc.
    
    Move the update-build-version logic to the only
    CMakeLists file that needs it.
    
    The update build version script takes a new argument
    to name the output file.

commit 776029fb717075295928342b911bf5ed68f5f5a2
Author: Dejan Mircevski <deki@google.com>
Date:   Fri Apr 22 14:56:07 2016 -0400

    Make grammar-generation fail if over 64 capabilities.

commit a9f36d014382e2841f9f10294118ea4ed030234a
Author: Dejan Mircevski <deki@google.com>
Date:   Fri Apr 22 14:05:55 2016 -0400

    Eliminate kCapabilitiesMin/Max.

commit 59436bb6b7d911ddf0908ba3cf4012e8ea3f440e
Author: Dejan Mircevski <deki@google.com>
Date:   Fri Apr 22 13:35:15 2016 -0400

    Turn module_capabilities_ into a spv_capability_mask_t.

commit 549d78f77f6c5a13332f660c0ff9d5e0fd13ead8
Author: Dejan Mircevski <deki@google.com>
Date:   Thu Apr 21 17:16:32 2016 -0400

    Bump kCapabilitiesMaxValue for v1.1.

commit d3da705a225c0adf40f1b496316cad09e7bddb87
Author: Dejan Mircevski <deki@google.com>
Date:   Thu Apr 21 17:12:47 2016 -0400

    Fix Windows build.
    
    Replace `#ifdef 0` with comment inside a macro call.

commit f2cf719f504a018942503f95c1a4be0f42837c09
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Apr 21 15:50:23 2016 -0400

    Avoid going out of bound in advanceLine() and refine comments.

commit 2ea54f5d1b735a2bf173e07cebb9d40534260347
Author: Dejan Mircevski <deki@google.com>
Date:   Thu Apr 21 15:46:08 2016 -0400

    Add tests for SubgroupDispatch.
    
    Introduced in v1.1, SubgroupDispatch adds the following:
    - two new execution modes
    - one new capability
    - two new opcodes
    
    Extend ValidateBase methods to take a spv_target_env.  Replace the
    context_ member with ScopedContext inside the said methods.  Give
    ScopedContext wider visibility by moving it outside
    TextToBinaryTestBase.

commit 2d975d54aec92385b2095930eed94fbe051b453b
Author: Dejan Mircevski <deki@google.com>
Date:   Tue Apr 19 16:53:47 2016 -0400

    Mention 1.1 support in the README.

commit 7b33485f6e57a3020e66b9aadacf784739c5fec4
Author: Dejan Mircevski <deki@google.com>
Date:   Mon Apr 18 22:25:35 2016 -0400

    First tests for SPIR-V v1.1.
    
    Add test for named-barrier instructions and capability.
    
    Add spv_target_env as an optional argument to CompileSuccessfully() and
    CompileFailure().  Currently defaults to UNIVERSAL_1_0, though that
    could change in the future.
    
    Make spv_context a local variable in test methods instead of a
    TextToBinaryTestBase member.  Introduce ScopedContext to make temp
    contexts easier.

commit d12a10d2dd0cc4236ef227707c11f991b9c0d544
Author: Lei Zhang <antiagainst@google.com>
Date:   Mon Apr 18 16:48:33 2016 -0400

    Fix wrong grammar .inc file dependency introduced by copy-paste.

commit e94d6d18ddc839b8a622a46fb60ecb0b1bc1ab42
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Apr 15 12:51:55 2016 -0400

    Rework CMake rules for building grammar tables.
    
    Use add_custom_command() to generate all .inc files and manage
    dependency with set_source_files_properties().

commit 009c4358b5a1c93203166b3ed60a548f63522e81
Author: Derek Sollenberger <djsollen@google.com>
Date:   Mon Apr 18 10:59:47 2016 -0400

    Update cmake files to support Android as a build target.
    
    This enables cross-compiling to Android using scripts like
    cmake-android that update the system name to reflect the build
    target.

commit 552d31996213a0060cfd45207eb2448cb301e4d2
Author: David Neto <dneto@google.com>
Date:   Mon Apr 18 10:32:49 2016 -0400

    Make directories more safely.
    
    Avoid a race on check-for-dir vs. make-dir
    when running the inc-file generation script concurrently.

commit cb3c49ef82b2878f15d55573c2620b71bcf87d0f
Author: Dejan Mircevski <deki@google.com>
Date:   Thu Apr 7 14:41:34 2016 -0400

    Add SPIR-V 1.1 grammar.
    
    Switch to SPIR-V 1.1 as default.
    Introduce SPV_ENV_UNIVERSAL_1_1.
    Add "1_0" to the internal variable names.
    Add spv_target_env to spv*GetTable().

commit e26fdc6bd18cdd1d5150ad4914b1fda818dcfbaa
Author: Dejan Mircevski <deki@google.com>
Date:   Thu Apr 7 14:09:48 2016 -0400

    Mark SPIR-V grammar files as 1.0.
    
    Factor the CMake generate_grammar_tables invocation into a function
    parameterized on the version.

commit 77d4e30edad86c0dd3c2774139450850050fecb0
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Apr 14 18:35:14 2016 -0400

    GLSL grammar update.
    
    * Add names to operands.
    * Fix capability requirements for UnpackDouble2x32.
    * Fix operands list error for NClamp.

commit 27d98e2954ff175ecdc6cb8de98b436c5a7f90ac
Merge: 48978646 29ca6f98
Author: John Kessenich <johnkslang@users.noreply.github.com>
Date:   Thu Apr 14 13:09:09 2016 -0600

    Merge pull request #181 from antiagainst/readme
    
    Use footnotes for links in README.md.

commit 29ca6f98946ff2db6cfc3d68509e2b2de4e48423
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Apr 14 14:10:35 2016 -0400

    Use footnotes for links in README.md.

commit 489786465a4b9ded808682f7d39c74e2d41f29b6
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Apr 13 11:50:27 2016 -0400

    Grammar update: OpPhi now uses PairIdRefIdRef as the last operand.

commit 11636fb1006d0df64f529a91dd49b14b0a4fa597
Author: Lei Zhang <antiagainst@google.com>
Date:   Tue Apr 12 14:51:50 2016 -0400

    Update the core grammar.
    
    * IdType is renamed to IdResultType.
    * version is splitted into major_version and minor_version.
    * Seperate Scope and IdScope operand kinds. Same for MemorySemantics.

commit 469f0e8fd53b527ad410c46bf18eee327c9256a3
Author: David Neto <dneto@google.com>
Date:   Tue Apr 12 16:09:13 2016 -0400

    Make paths to grammar output files
    
    The directory for a grammar output file will be created if
    it doesn't already exist.
    
    This is required to make the Android.mk build work.

commit 8ba7c92a9429ba2b50a5032c8b12f39332569f7f
Author: Dejan Mircevski <deki@google.com>
Date:   Mon Apr 11 15:31:00 2016 -0400

    Remove revision from SPV_ENV_*.
    
    Revisions proliferate quickly and we don't promise to retain extra
    grammar copies for every historical one.

commit 670c0ac831c104de8e07e7083e4a3e6d5fa9aca3
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Apr 8 10:31:51 2016 -0400

    Allow to only build certain grammar tables.

commit 051e067f2583ebc9884fd9ed750e844fa899abbe
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Apr 7 15:09:31 2016 -0400

    Remove the outdated patch file.
    
    Now we use the JSON grammar and the generate_grammar_tables.py
    script to maintain various info tables. That patch file will not
    be needed anymore.

commit 7649c7362d9b7622399fa0ead24de836b0c7540e
Author: Dejan Mircevski <deki@google.com>
Date:   Mon Apr 4 16:05:31 2016 -0400

    Fix MSVC error C2797.

commit 80e416ce9174cb294c76eef09a71647277a95ccf
Author: Lei Zhang <antiagainst@google.com>
Date:   Mon Apr 4 14:30:56 2016 -0400

    Use JSON grammar files to generate extended instruction sets.

commit 9ca2d6dcd2f1356895533a4aedc0f1cf765f2963
Author: Lei Zhang <antiagainst@google.com>
Date:   Mon Apr 4 14:03:35 2016 -0400

    Rname grammar.json to spirv.core.grammar.json and add version info.

commit 3fb2676d235026ac55f4d08d3edc0a96704ac71d
Author: Dejan Mircevski <deki@google.com>
Date:   Mon Apr 4 15:55:05 2016 -0400

    Fix validation of array length.

commit 6fa3f8aad99931a69d5c1f20077076e22b479f5f
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Mar 31 17:26:31 2016 -0400

    Remove dependency on SPIR-V headers in libspirv.h.
    
    For fulfilling this purpose, the |opcode| field in the
    |spv_parsed_instruction_t| struct is changed to of type uint16_t.
    
    Also add functions to query the information of a given SPIR-V
    target environment.

commit d03c0a11533310e8b5ade72568588c53d7fb243f
Author: Chris Forbes <chrisforbes@google.com>
Date:   Mon Apr 4 10:21:35 2016 +1200

    Enable linking against libSPIRV-Tools from linux shared libraries
    
    Required for linking against libSPIRV-Tools from LVL's
    libVkLayer_core_validation.so.
    
    Signed-off-by: Chris Forbes <chrisforbes@google.com>

commit c9b2285bfcf102ef4aae32cbe00a855016737835
Author: Eric Engestrom <eric@engestrom.ch>
Date:   Sat Apr 2 22:54:59 2016 +0100

    Fix spelling mistakes

commit 4f293b7139002bd417d7153d886b2fae22d6b7ed
Author: Lei Zhang <antiagainst@google.com>
Date:   Mon Mar 21 16:36:14 2016 -0400

    Use the JSON grammar file to generate various info tables.
    
    This patch uses a Python script to parse the JSON grammar file to
    generate the opcode table and operand kind tables.
    
    Now we don't need to do the post-processing (from OperandClass
    to spv_operand_type_t) and copying of the opcode info table is
    not required anymore!

commit a1de2b37c7dfb77c75112414e436dbfe9736d788
Author: Dejan Mircevski <deki@google.com>
Date:   Fri Apr 1 00:47:02 2016 -0400

    Handle CRLF in assembly text.

commit 3d27da4bc7780da2538c12368362a2ffdf342760
Author: Dejan Mircevski <deki@google.com>
Date:   Thu Mar 31 12:16:51 2016 -0400

    Add a target environment to spvContextCreate().
    
    Run clang-format.

commit 6836e17f243eebfc4a2950faee49ed3a0015b20b
Author: David Neto <dneto@google.com>
Date:   Tue Mar 29 14:49:05 2016 -0400

    OpExecutionMode only takes a single ExecutionMode
    
    Previously, the grammar allowed many execution modes for a single
    OpExecutionMode instruction.
    
    Removes the variable- and optional- execution mode operand type
    enum values.
    
    Issue found by antiagainst@

commit 452914634e144f94f69abd08431ec360846ae6fb
Author: Lei Zhang <antiagainst@google.com>
Date:   Tue Mar 29 09:47:23 2016 -0400

    Capability fix: ImageReadWrite & ImageMipmap require ImageBasic.

commit 4c657bfa8fb1c0595a5c020af5b7c1d3eb3c1394
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Fri Mar 18 14:13:16 2016 -0400

    Make everything compile cleanly with -Wpedantic.
    
    This makes SPIRV_WARN_EVERYTHING compile cleanly.

commit e04b9355995d5c6120d8c51911b465c161118533
Author: David Neto <dneto@google.com>
Date:   Thu Mar 17 14:04:32 2016 -0400

    Support both -h, --help on spirv-as, spirv-val
    
    The spirv-dis command already supports both.

commit d0f80fabbc213552faf31e40d3990bd721dc1152
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Mar 17 15:20:22 2016 -0400

    Travis CI: update test binary location and return correct status.

commit eb6fc51d350aca568a02a4bbdee0a545ed4fe891
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Mar 16 22:43:31 2016 -0400

    Split CMakeLists.txt into smaller ones.

commit 02141e53a765f2c0c9b28b1cc869f72b06d40243
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Mar 16 14:05:37 2016 -0400

    Travis CI: add configuration for testing on Mac OS X.

commit 7c58c1d59e05d369386eae81e3b95e8cc0a2b53f
Author: David Neto <dneto@google.com>
Date:   Mon Feb 29 01:01:04 2016 -0500

    Support Linux-to-Windows cross comiple via MinGW
    
    For MinGW compile, statically link the C++ runtime
    
    Change-Id: Ic58d1e47a814a265fd91edd7082e938ffc87f0c9

commit 6032b98c53f5654d936997d7112ab154c82b5778
Author: Lei Zhang <antiagainst@google.com>
Date:   Tue Mar 15 16:52:40 2016 -0400

    Change the interface for getWord().
    
    * It's redundant to provide two mutable spv_position to getWord().
    * getWord() should take string pointer by the style guide.

commit de4a7c7f405c80d3b03cbd64ac9557bfc2ccfbb3
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Mar 16 14:54:47 2016 -0400

    Travis CI: use Ubuntu 14.04 (Trusty) as the Linux environment.

commit 755eb6dcfca680a23e1d7abab8d78ee0ed17f498
Author: Dejan Mircevski <deki@google.com>
Date:   Tue Mar 15 15:16:40 2016 -0400

    Remove AssemblyContext::getWord().
    
    Fixes #152.

commit c31d7cb00a4c3ab7c722dd7c63a70d642ff09e35
Author: Daniel Robertson <dan.robertson@anidata.org>
Date:   Mon Mar 14 08:41:32 2016 -0400

    Add patchlevel to CMake requirement

commit 476989e7b715529aa8063016dc44e31bbf3e08bc
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Mar 11 15:24:41 2016 -0500

    Return str in describe() as said by the blurb.

commit 9149a66ca406d86967b104cac209bad309fd2c33
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Mar 11 15:03:04 2016 -0500

    Fix the corner case in version generation script.
    
    When the given directory is not inside the SPIRV-Tools project,
    describe() returns a str instance instead of bytes instance
    in Python3, which will case problem when calling decode() on it.

commit 9dd1cd7f31779dc60ac49d550ec4c164b2fd7be4
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Mon Mar 7 15:55:44 2016 -0500

    Fixed float->int16 conversion warnings in VS2013.

commit f7e63786a919040cb2e0e572d960a0650f2c2881
Author: Lei Zhang <antiagainst@google.com>
Date:   Mon Mar 7 13:44:09 2016 -0500

    Add comments to explain why calling decode().

commit c15683906c68f2714c72b5cf20e2321544bca006
Author: Lei Zhang <antiagainst@google.com>
Date:   Sun Mar 6 13:00:58 2016 -0500

    Run pyformat with -s 4 --force_quote_type=single.

commit 703b0f7ab403890a7d03e29b3d3a6051a082bacf
Author: Lei Zhang <antiagainst@google.com>
Date:   Sun Mar 6 11:44:21 2016 -0500

     Imporve compatibility with Python3.
    
     * Use print_function from __future__ to tackle the print syntax
       change.
     * In Python3 str and bytes are no longer the same thing. Need
       proper decode.

commit 680f9b7ef1ced648c2633fad71bfc404d70ee606
Author: Florian Ziesche <florian.ziesche@gmail.com>
Date:   Tue Mar 1 19:56:14 2016 +0100

    Don't check kernel entry-point signatures.
    
    Recognize SpvOpInBoundsPtrAccessChain and SpvOpPtrAccessChain as opcodes
    returning a pointer.
    
     * spvOpcodeIsPointer: recognize SpvOpInBoundsPtrAccessChain and SpvOpPtrAccessChain as opcodes returning a pointer
    
     * isValid<SpvOpEntryPoint>: don't check kernel function signatures (these don't have to be 'void main(void)')
    
     * added tests for kernel OpEntryPoint, OpInBoundsPtrAccessChain and OpPtrAccessChain, as well as facilities to actually test kernel/OpenCL SPIR-V
    
     * fixed pow and pown specification (both should take 2 parameters), spec bug reported at https://www.khronos.org/bugzilla/show_bug.cgi?id=1469
    
     * use ASSERT_TRUE instead of ASSERT_EQ
    
     * added pow and pown test (pow(val, 2.0f) and pown(val, 3))
    
    Revert " * fixed pow and pown specification (both should take 2 parameters), spec bug reported at https://www.khronos.org/bugzilla/show_bug.cgi?id=1469"
    
    This reverts commit c3d5a87e73334b25aa4278964eea6d1c7625cd81.
    
    Revert " * added pow and pown test (pow(val, 2.0f) and pown(val, 3))"
    
    This reverts commit 7624aec720a51dc212704dc92eff6ae3634d2d6c.

commit c31a31942b3697f2f71148555e5ffa298a572dbd
Author: Dejan Mircevski <deki@google.com>
Date:   Tue Mar 1 10:17:18 2016 -0500

    Make libspirv.h more C friendly.
    
    In C, `#include <stdbool.h>` so `bool` is recognized.
    
    Add a `typedef` for `spv_context_t`.

commit 292380631457fb8770b0d3041c503b7d7bfb65bb
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Feb 26 15:38:42 2016 -0500

    Remove stale code.

commit 712bed022720d0109d477ba4d67def075b5be793
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Feb 25 16:11:16 2016 -0500

    Fix issues reported by cppcheck.
    
    Remove code not being used, add explicit to constructors, and
    add missing fields in constructors.

commit 96c80a1b5a054134c447aa3f2b583d9cea759803
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Wed Feb 24 15:26:05 2016 -0500

    Added missing <cstdint> in bitutils.
    
    This was breaking MSVC2013.

commit 3deecefde5e522599adb762aa5189a2c4d6aa450
Author: David Neto <dneto@google.com>
Date:   Wed Feb 24 12:41:29 2016 -0500

    If no tag in the repo, then show the commit hash

commit 1d52555f933defc9bad251c865bcb1d9ec5e2631
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Wed Feb 24 10:11:07 2016 -0500

    Actually find the python executable before use.
    
    Also change PYTHON_EXE to PYTHON_EXECUTABLE to match what
    the cmake documentation says.

commit b38ac4bae60b361ee6e7708fe89f93ccb535d1bc
Author: David Neto <dneto@google.com>
Date:   Tue Feb 23 17:58:31 2016 -0500

    Use subprocess.Popen, hoping for Windows portability
    
    Replaces use of subprocess.check_output

commit b6ccd0d89114d94026871edd31cf886280dad20a
Author: Lei Zhang <antiagainst@google.com>
Date:   Mon Feb 22 15:25:50 2016 -0500

    Remove spv_validate_options_t and change tests accrodingly.
    
    Users always want to run all the checks. The spv_validate_options_t
    mechanism, which provides little benefits to users, complicates the
    internal implementation and also makes the tests exercise different
    paths as users do.
    
    Right now the tests are more like integration tests instead of
    unit tests, which should be our next refactoring aim.

commit 4e797f82365c7cc9098e84e227b0324477c02cee
Author: qining <qining@google.com>
Date:   Mon Feb 22 16:07:19 2016 -0500

    Implement --version for spirv-tools
    
    'spirv-as --version', 'spirv-dis --version' and 'spirv-val --version'
    will display version information.

commit 9413fbbf587b23541c4339943325a474641cd605
Author: Lei Zhang <antiagainst@google.com>
Date:   Mon Feb 22 17:17:25 2016 -0500

    getWord() should not go beyond the end of the source text.
    
    This addresses Bug #126 where EOL is missing at the end of
    source file.

commit d1f64c6394d3d62d2e3612dadcd81e740734e0f8
Author: David Neto <dneto@google.com>
Date:   Mon Feb 22 16:43:53 2016 -0500

    spirv-val help says it's a work in progress.

commit c9783ded752c86ae431ece1eef687d4ae45d8a1d
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Feb 19 10:15:17 2016 -0500

    Avoid closing stdin and stdout.

commit c90a820a10411312ca7c18a69df0a727fe052f25
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Feb 18 18:04:11 2016 -0500

    Fix command line option errors in val.
    
    * There is no -capability.
    * -rules is missing.
    * -id by default is turned off.
    * Add -all.

commit d5bdd9dced6c4d89e5700b2fbb82774cbdca1012
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Feb 18 17:43:23 2016 -0500

    Support outputting to stdout in the as tool.

commit eb6ae976c6742849c80bea1726890fed53573f5e
Author: Eric Engestrom <eric@engestrom.ch>
Date:   Thu Feb 18 23:41:16 2016 +0000

    Remove unnecessary null pointer checks
    
    Fixes #110

commit bd354d442a8b54e3ef007f0bbf1dad5623968e3b
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Feb 18 15:51:04 2016 -0500

    Document SPIR-V binary and assembly file naming convention.

commit 4a722d80a62b1b1965a0b46f97edde3abbd4d2dd
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Feb 18 14:38:12 2016 -0500

    Use unordered_map to store defs in UseDefTracker for fast lookup.

commit 6572ad725f848b98a52800d55054910b689b61ea
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Feb 18 13:40:56 2016 -0500

    Support using stdin to supply input in the val tool.
    
    This allows getting output from other utilities using pipe.

commit 53c30dd1bdf498dbb0dba49ead01e7a5b17224d0
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Feb 18 12:21:10 2016 -0500

    Support using stdin to supply input in the as tool.
    
    This allows getting output from other utilities using pipe.

commit 8e5479335fcf1512cbdae1242710cb63db4fbf60
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Feb 18 10:50:42 2016 -0500

    Reject unknown long-named command line options in dis.

commit e4853e850850e70d85d98cff26852f89e2edd465
Author: David Neto <dneto@google.com>
Date:   Wed Feb 17 22:27:46 2016 -0500

    Fix the source organization section in README.md
    
    It now reflects the new header file organization.
    It also tells API clients what to add to the search
    include path.

commit 4d2f2239bf896dc14127e25011f41ac79d687052
Author: David Neto <dneto@google.com>
Date:   Tue Feb 16 12:02:05 2016 -0500

    SPIR-V Tools fully supports SPIR-V 1.0 Rev3
    
    - Update version numbers in libspirv.h.
      Add a test for the relevant macros.
    - Update the README

commit 53075ea82b98695f7d56b1a164911f42dd228ea4
Author: David Neto <dneto@google.com>
Date:   Wed Feb 17 12:12:45 2016 -0500

    Add MultiViewport capability, new in 1.0.3
    
    Fix typos in previous tests with MultiViewport.

commit 5a70335bf1c858b8cf6a22e35dcc41090496c3c1
Author: David Neto <dneto@google.com>
Date:   Wed Feb 17 14:44:00 2016 -0500

    Rearrange headers
    
    Now we have public headers arranged as follows:
    $SPIRV_TOOLS_ROOT/include/spirv-tools/libspirv.h
    $SPIRV_TOOLS_ROOT/include/spirv/spirv.h
    $SPIRV_TOOLS_ROOT/include/spirv/GLSL.std.450.h
    $SPIRV_TOOLS_ROOT/include/spirv/OpenCL.std.h
    
    A project should use -I$SPIRV_TOOLS_ROOT/include
    and then #include "spirv-tools/libspirv.h"
    
    The headers from the SPIR-V Registry can be accessed as "spirv/spirv."
    for example.
    
    The install target should also install the headers from the SPIR-V
    Registry.  The libspirv.h header is broken otherwise.
    
    The SPIRV-Tools library depends on the headers from the SPIR-V Registry.
    
    The util/bitutils.h and util/hex_float.h are pulled into the internal
    source tree.  Those are not part of the public API to SPIRV-Tools.

commit d1bb51dbb07be54666c074922670e618105e1046
Author: David Neto <dneto@google.com>
Date:   Wed Feb 17 12:17:04 2016 -0500

    Some GLSL extended instructions depend on capabilities.

commit 58c4e1d57af8c2cf83cb1f6b0a58c0b960d5fa15
Author: David Neto <dneto@google.com>
Date:   Tue Feb 16 19:26:13 2016 -0500

    Add GLSL instructions NMin, NMax, NClamp
    
    These appear first in GLSL.std.450 in 1.0 Rev3

commit 1d9a876f959ddd7d1c1d39047f021a635cd58f87
Author: David Neto <dneto@google.com>
Date:   Mon Feb 15 14:20:01 2016 -0500

    Test OpImageSparseRead
    
    Also tweak the image operands test with OpImageFetch so the input assembly
    more closely matches the expected output.  But don't make it a round
    trip test since we want to check the assembler's ability to read the
    image operand mask with out-of-order mask names.
    
    The OpImageSparseRead assembly test is also a round trip disassembler
    test.

commit 4ddb431b16e7cba311e30cf79032ef00fe969d17
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Wed Feb 17 13:00:23 2016 -0500

    Fixed internal compiler error in gcc-4.9.
    
    This showed up in mips and mips64 builds. A combination of templates
    and the error reporting were causing gcc to crash. This splits up the
    functionality in a way that now successfully compiles.

commit 2732f57ed236f671df64d595b33ea347777346cb
Author: David Neto <dneto@google.com>
Date:   Wed Feb 17 12:39:41 2016 -0500

    Remove remaining float overflow value tests
    
    Should fix tests on Windows.

commit 2889a0c21ced7aa9f83ec04b180e85d0b57bc88a
Author: David Neto <dneto@google.com>
Date:   Mon Feb 15 13:50:00 2016 -0500

    Use syntax tables for SPIR-V 1.0 Rev3
    
    - The SPIR-V spec generator has changed how it represents optional
      operands.  Now it tracks a separate boolean flag indicating optionality.
      However, SPIRV-Tools still wants to represent both operand class
      and optionality in the same enums space (SPV_OPERAND_TYPE_*).
      So there's extra work in the patch.
    
    - In the spec generator, OperandImage is now OperandImageOperands.
      This affects enum translation in opcode.cpp.
    
    - In the spec generator, image operands are explicitly followed by
      Id, and VariableIds.  However, SPIRV-Tools uses the bits set
      in the image operand bitmask to control the number and meaning
      of the Ids that follow.  So in writing the opcode.inc syntax
      table, drop all operands after OperandImageOperands.
    
    - Some enums are now more explicitly represented in the generated
      opcode.inc:
        - AccessQualifier (e.g. on OpTypeImage), in both required and
          optional flavours.
        - MemoryAccess (e.g. on loads and stores)
    
    - Add SPV_OPERAND_TYPE_OPTIONAL_ACCESS_QUALIFIER
    
    - Add tests for the optional AccessQualifier operand on OpTypeImage.
    
    - Update the AccessQualifier test for OpTypeImage so it's a round
      trip test through the disassembler as well.

commit dd8a661b7007e1044fff5c2a3d97c8850a351f0e
Author: David Neto <dneto@google.com>
Date:   Sun Feb 14 13:55:50 2016 -0500

    Update capabilities for 1.0 Rev3

commit 0c0a07f0aa9e63950d01319a6ce581b8f22ab24d
Author: David Neto <dneto@google.com>
Date:   Tue Feb 16 12:13:51 2016 -0500

    Don't promise particular values when float parsing fails.
    
    This should address problems on Windows:
    https://github.com/KhronosGroup/SPIRV-Tools/issues/104

commit 31c08703678168a48733b875d877f9b3f5e0b1d3
Author: David Neto <dneto@google.com>
Date:   Mon Feb 15 09:36:20 2016 -0500

    Configure gmock locally only if not already configured.
    
    Allows an enclosing project to have already configured gmock, even
    if the developer has placed the googletest sources under this
    project's external/googletest directory.
    
    Describe how to enable the tests in the two essential scenarios:
    where SPIR-V Tools is standalone, or where SPIR-V Tools is configured
    as a part of a larger project.

commit 77b48b5c6d81250ffaee66b4b148e7d0f4db23b8
Author: David Neto <dneto@google.com>
Date:   Sun Feb 14 13:42:17 2016 -0500

    Use SPIR-V headers for 1.0 Rev3
    
    Refresh from the SPIR-V registry.

commit c7a9a909a820927da52c2a2af2e7793771556156
Author: David Neto <dneto@google.com>
Date:   Sat Feb 6 13:48:05 2016 -0500

    Parse overflow for fp16  like for 32- and 64-bit
    
    In that case, set the stream fail bit, and set the maximum normal
    value or lowest normal value, depending on the sign of the original
    value.

commit 6bad02c320fa539ae70268b869e0d4080a3c4664
Author: David Neto <dneto@google.com>
Date:   Sat Feb 6 13:48:05 2016 -0500

    Float literal parsing fixes
    
    - For 32- and 64-bit floats, overflow is a parse error
    
      This works around a difference between Xcode's istringstream
      and other platforms.  Xcode's runtime library will happlily
      "round up" overflow values to infinity.  We want to make it fail.
    
    - When parsing a float fails due to bad syntax, follow C++11
      behaviour for operator>> and set the value to zero.
    
    - When parsing a 32-bit or 64-bit float overflows, follow C++11
      behaviour for operator>> and set the value to the nearest
      normal value: either max or lowest finite value for the type.
    
    - Add FloatProxy<T>::max() and ::lowest()
    
    - Make 16-bit overflow behaviour more consistent: we always get a
      16-bit infinity of the right sign, whether the original string
      is a normal value for 32-bit or an overflow value for 32-bit.
      That matches our earlier intent.
      Added TODO's to make 16-bit overflow always an error, just like
      for 32-bit and 64-bit.
    
    - Simplify normal parsing of Float16 values by delegating to
      normal parsing of 32-bit floats.

commit 000cad9cc6ba4d81f11893f25f676471e5e9fe86
Author: David Neto <dneto@google.com>
Date:   Wed Feb 10 11:46:05 2016 -0500

    Reject float literals with two leading signs
    
    E.g. --1 should be rejected.

commit feda995c84167df47271ce9f838323da59a8d046
Author: David Neto <dneto@google.com>
Date:   Mon Feb 8 14:33:41 2016 -0500

    More parsing tests for literals with leading minus
    
    Also checks some hex literal cases.
    
    This addresses part of
    https://github.com/KhronosGroup/SPIRV-Tools/issues/45
    by removing the parseNumber case for "-0" on unsigned
    integers.  We don't care about that platform difference
    at the level of std::istringstream, since we reject it
    at a higher parsing level.

commit 7ef6da7b7f9175da509b4d71a881c0a04e0b701b
Author: Dejan Mircevski <deki@google.com>
Date:   Wed Feb 3 17:16:27 2016 -0500

    Make IsTypeNullable a transitive check.

commit 4038195d81088c8af1a2efe30c130be06cdda764
Author: Dejan Mircevski <deki@google.com>
Date:   Wed Feb 3 12:34:52 2016 -0500

    Eliminate parameter-order check from ID-validation.

commit 10fa696af77287ab87c6bf5115af93ffeb36594d
Author: Dejan Mircevski <deki@google.com>
Date:   Wed Feb 3 10:26:59 2016 -0500

    Allow Op[No]Line between OpFunctionParameters.
    
    Also ensure we don't get thrown off by too many parameters.

commit 6428933408c7e5e2effbe5c99cf55f4164018333
Author: Dejan Mircevski <deki@google.com>
Date:   Tue Feb 2 14:41:35 2016 -0500

    Enable ctest.

commit adb8725900a4bddc80dfc6892de1f1a8603e888e
Author: David Neto <dneto@google.com>
Date:   Tue Feb 2 12:12:48 2016 -0500

    Validation of mask operand capabilities is more data driven
    
    Use spvOperandIsConcreteMask to determine if an operand is
    a bitmask.  Check its individual bits in a generic way.

commit b5267569d1d390143fff82000cd2e606d38dfc49
Author: David Neto <dneto@google.com>
Date:   Tue Feb 2 12:05:34 2016 -0500

    Add spvOperandIsConcreteMask

commit 0c8bdfe163df0d118ef68cfa41e777e42339d412
Author: Dejan Mircevski <deki@google.com>
Date:   Sat Jan 30 23:32:09 2016 -0500

    Use AssemblyGrammar for capability validation.
    
    Also:
    - ForEach() for spv_capability_mask_t.
    - Add capability min/max constants.
    - Move max definition from validate_types.cpp to spirv_definition.h.

commit 5f99fc33cd96d1425ebadd34529735f7ac5f2d94
Author: Dejan Mircevski <deki@google.com>
Date:   Fri Jan 29 16:49:40 2016 -0500

    Forbid Generic variables.

commit 7dbfdda60962f5df77c9d13d85766cefaef3a02f
Author: qining <qining@google.com>
Date:   Fri Jan 29 12:09:34 2016 -0500

    Fix validator mem overflow when tracking capabilities

commit 8177fbea060e05f3fbe8024fd7844c60e73ce5d1
Author: Dejan Mircevski <deki@google.com>
Date:   Thu Jan 28 22:20:28 2016 -0500

    Fix in-function storage class validation.
    
    Move tests into a fixture that properly turns on the relevant passes.

commit 8db38e547b71bb2efd3d6113ea75ca2250f45fbc
Author: Dejan Mircevski <deki@google.com>
Date:   Thu Jan 28 13:18:00 2016 -0500

    Initialize vector<string>s on first use, not statically.

commit 1e157bc2e8a1735ff9fc711c693fddf090798b92
Author: Dejan Mircevski <deki@google.com>
Date:   Fri Jan 22 16:52:40 2016 -0500

    Fix validation of return value.

commit a4342f3f442178e79e79a8c7bbbfba0c8ca851a7
Author: Dejan Mircevski <deki@google.com>
Date:   Fri Jan 22 14:27:00 2016 -0500

    Remove spvOpcodeIsObject().
    
    Also
    - Add type_id to spv_id_info_t.
    - Use spv_id_info_t::type_id instead of words[1].
      Triggered some asserts on tests, where the code incorrectly assumed
      words[1] had a type.  Remove the asserts and handle gracefully.
    - Add tests for OpStore of a label, a void, and a function.

commit 61a627586b7f47d39b0e19caabc9bd880aa3832a
Author: Umar Arshad <umar@arrayfire.com>
Date:   Sat Jan 23 14:14:32 2016 -0500

    Initial capability implementation and unit tests
    
    * Register capabilility and checks
    * Add validate storage class capabilities checks and tests
    * Instruction pass refactor
      - More generic form of capability checking by checking operands
        instead of instructions
    * Execution Model capabilities checks
    * Decorate BuiltIn capability checks
    * Addressing Model capability checks
    * Memory Model capability checks
    * Execution Mode capability checks
    * Dim capability checks
    * SamplerAddressingMode capability checks

commit 3fade33c06a0740bf719473956745bfcb25b9c1a
Author: Lei Zhang <antiagainst@google.com>
Date:   Tue Jan 26 18:04:55 2016 -0500

    Qualify CMake function names with "spvtools" to avoid conflictions.
    
    If a third-party project defines a CMake function with the same
    name, by importing that project's CMake configuration, we may end
    up overwriting our own copy. Qualify all defined functions to
    reduce that probability.

commit 276a724b2580dc66936b5235f672c03241937cff
Author: Dejan Mircevski <deki@google.com>
Date:   Thu Jan 21 15:55:43 2016 -0500

    Fix spvOpcodeIsScalarType() to include Boolean.
    
    Remove redundant validations of OpConstant and OpConstantComposite.
    Binary parser already performs these checks, so the validations can
    never be triggered.
    
    Enable bad-constant tests.

commit 0846e1745f838d3daa0165d35acf7a7961b789b1
Author: Dejan Mircevski <deki@google.com>
Date:   Thu Jan 21 09:03:58 2016 -0500

    Don't fail validation in unimplemented cases.

commit 58852aa012462a0a6da8391374943fd89bfc4151
Author: Dejan Mircevski <deki@google.com>
Date:   Thu Jan 21 09:00:15 2016 -0500

    Fix OpLoad pointee type validation.

commit c62f41e28191d880b57ff6be2f7b90b73711be55
Author: David Neto <dneto@google.com>
Date:   Mon Jan 18 15:29:15 2016 -0500

    Add disassembler option to show byte offset
    
    The option is disabled by default.
    
    The offset is printed in hex, as a comment after each instruction.

commit 961f5dc54408b1516b9e4d85ee1fb4891b903f61
Author: Dejan Mircevski <deki@google.com>
Date:   Fri Jan 15 11:25:11 2016 -0500

    Track uses and defs during parsing.
    
    Replace two other, imperfect mechanisms for use-def tracking.
    
    Use ValidationState_t::entry_points to track entry points.
    
    Concentrate undefined-ID diagnostics in a single place.
    
    Move validate_types.h content into validate.h due to increased
    inter-dependency.
    
    Track uses of all IDs: TYPE_ID, SCOPE_ID, ...
    
    Also update some blurbs.
    
    Fix entry-point accumulation and move it outside ProcessIds().
    
    Remove validate_types.h from CMakeLists.txt.
    
    Blurb for spvIsIdType.
    
    Remove redundant diagnostics for undefined IDs.
    
    Join "can not" and reformat.

commit 383c83729e608c3ce815d7d19f44fc5b729092c5
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Tue Jan 19 16:13:45 2016 -0500

    Since g++-4.9 has an ICE occasionally in travis add a retry.
    
    Try to re-run the build with ninja -j 1 if the build fails,
    this should reduce the number of build failures we see.

commit 2a790fbc6d5ddbb3859ad0f55331f930036d23e7
Author: Umar Arshad <umar@arrayfire.com>
Date:   Mon Jan 18 13:41:52 2016 -0500

    Fix missing OpNoLine layout checks

commit e8b1d12c2ffd34f145d82a747946d1f3ce21e174
Author: David Neto <dneto@google.com>
Date:   Fri Jan 15 10:43:39 2016 -0500

    Disable warnings C4503 on MSVC for test code
    
    C4503 is "decorated name length exceeded", triggered
    by some heavily templated types.

commit 1ddeb246eb7884443124a1ac2f2868df6ff857a8
Author: Umar Arshad <umar@arrayfire.com>
Date:   Wed Jan 13 23:25:11 2016 -0500

    Validation refactor
    
    * Organize passes into seperate files
    * Remove module layout logic from Cfg pass
    * Remove module layout logic from Functions class
    * Refactor ModuleLayoutPass for readability
    * Adapt consistent naming of layout sections (Stage/Section -> Section)

commit 866b6ab9daa9933bcb9aa95f99f595c6bff6d9b6
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Jan 6 23:55:16 2016 -0500

    Add configuration for Travis CI.

commit fa3b8781190e4d38df90008fae8fccab57f5acb0
Author: Umar Arshad <umar@arrayfire.com>
Date:   Thu Jan 14 09:48:29 2016 -0500

    Add missing branch instructions in SSA tests

commit 74a731add43fc37322f776f27640f237202f0caa
Author: Umar Arshad <umar@arrayfire.com>
Date:   Sat Jan 9 17:25:36 2016 -0500

    Remove static vector from GetModuleOrder

commit b345135990b6444da92835752ce82c85e16a2a11
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Wed Jan 13 10:44:05 2016 -0500

    Fixed warning in VS2013 build.
    
    Signed/Unsigned mismatch in progressToNextLayoutStageOrder().

commit 32197bdcd7fe5268355a0449e0e05fe059c6d953
Author: Norbert Nopper <norbert@nopper.tv>
Date:   Wed Jan 13 10:35:44 2016 +0100

    Fix, that spirv-tools did not build, as two casts are not present.

commit 433285626e24ef9a39d37e2271fb8b990d90e570
Author: Dejan Mircevski <deki@google.com>
Date:   Wed Jan 13 09:52:23 2016 -0500

    Fix build by renaming ValidationState_t constructor argument.
    
    The `diag` argument shadows the `diag` method, so the strict build fails.

commit c74138597608777738c0aa956ae803feefba6cf3
Author: Umar Arshad <umar@arrayfire.com>
Date:   Tue Dec 15 21:44:21 2015 -0500

    Function and block layout checks. very basic CFG.
    
    This adds function and block layout checks to the validator. Very
    basic CFG code has been added to make sure labels and branches
    are correctly ordered.
    
    Also:
    * MemoryModel and Variable instruction checks/tests
    * Use spvCheckReturn instead of CHECK_RESULT
    * Fix invalid SSA tests
    * Created libspirv::spvResultToString in diagnostic.h
    * Documented various functions and classes
    * Fixed error messages
    * Fixed using declaration for FunctionDecl enum class

commit ca50510ad4c7de3667289f3ea2d18a1b7f210976
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Tue Jan 12 14:47:24 2016 -0500

    Fixed use-after-free in isStartOfNewInst() tests.

commit 7ffd8ffeb2abb2314dd2666353ae4efed276e8fc
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Mon Jan 11 16:22:34 2016 -0500

    Minor fixes to remove warnings in VS2013.
    
    Also fixes VS2015 build due to missing #include <iterator>

commit 5d30edb36d8ee92ea0e37d0c21e4a46b7b5f4607
Author: David Neto <dneto@google.com>
Date:   Mon Jan 11 12:28:19 2016 -0500

    spvDiagnosticDestroy is safe to call on nullptr
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/62

commit 3b69d05086b991eefd585a6032659194e5c63000
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Mon Jan 11 13:54:30 2016 -0500

    Fix endian-ness conversion in the binary parser.
    
    When we were swapping endian-ness in the binary parser, we would
    write outside of the bounds of our vector.

commit 7a354735739b28327c5ce065e1fae67fd9484d9a
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Mon Jan 11 10:54:20 2016 -0500

    Made compilation with gcc and clang more strict.
    
    Added additional compilation flags to gcc and clang builds.
    Adds -Wall -Wextra -Wno-long-long -Wshadow -Wundef -Wconversion
    -WNo-sign-conversion and -Wno-missing-field-initializers
    where appropriate.
    
    Does not add -Wundef to tests, because GTEST tests undefined
    macros all over the place.

commit 43401d2ed0e4f815fcb19b8ec224c73749f44bf1
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Fri Jan 8 09:54:42 2016 -0500

    Support 16-bit float in assembler and disassembler
    
    This adds half-precision constants to spirv-tools.
    16-bit floats are always disassembled into hex-float format,
    but can be assembled from floating point or hex-float inputs.

commit b6fe02fc3912755ab200e4bc40e3edd47ed16a54
Author: Dejan Mircevski <deki@google.com>
Date:   Thu Jan 7 13:44:22 2016 -0500

    Extend copyright to 2016.

commit 3e6b2dfa699b13987657298ab2a7652a0a577ca9
Author: Dejan Mircevski <deki@google.com>
Date:   Thu Jan 7 11:00:38 2016 -0500

    Undefine a macro after use.

commit ae7d707fdb913759fd08ac19c39b358c43049a12
Author: David Neto <dneto@google.com>
Date:   Wed Jan 6 14:43:55 2016 -0500

    Fix shadowing warnings reported by GCC

commit ba73a7cee5e125bddb76919bc74e04d9717d7083
Author: David Neto <dneto@google.com>
Date:   Wed Jan 6 13:08:39 2016 -0500

    Fix conversion warnings reported by GCC.

commit 066bd524a242de7c7a842b753295f3b6f463cbce
Author: David Neto <dneto@google.com>
Date:   Tue Jan 5 14:57:58 2016 -0500

    Explicitly convert to narrower type.
    
    Fixes a strict Clang warning.

commit 677e0c7b499d74a90470133924ec25310e45dc8a
Author: David Neto <dneto@google.com>
Date:   Tue Jan 5 14:56:02 2016 -0500

    Avoid variable shadowing

commit 095a41aca8fecd02d1db7dc3d4f3aafee31e175b
Author: David Neto <dneto@google.com>
Date:   Tue Jan 5 14:49:08 2016 -0500

    Avoid warning for implicit conversion of char array to bool.
    
    Clang complains about assert("unhandled") but not
    assert(false && "unhandled").

commit f80b51fa9b9d92bcdff8ce28ba71bda8761a4d34
Author: David Neto <dneto@google.com>
Date:   Tue Jan 5 11:25:11 2016 -0500

    Fix var shadowing and width mismatches in hex_float.h

commit d47f8b3fd8222c5105e9b2730789c16371499ecf
Author: David Neto <dneto@google.com>
Date:   Mon Jan 4 17:27:34 2016 -0500

    Avoid parameter shadowing in source/diagnostic.h
    
    Change the offending class to more closely follow Google C++ style:
    - Member names have a trailing underscore.
    - Use an accessor method for the stream_ member.

commit 969ce4b3236a46a5264c7e003cfb029a1b32d559
Author: David Neto <dneto@google.com>
Date:   Tue Jan 5 18:22:22 2016 -0500

    Fix list of opcodes allowed for OpSpecConstantOp
    
    Was missing BitcastXor, GenericCastToPtr.
    Remove duplicate of SLessThanEqual

commit d0de19643993fb0b9767851300e2e4832530b113
Author: David Neto <dneto@google.com>
Date:   Tue Jan 5 12:45:54 2016 -0500

    operator<< on FloatProxy preserves float and fill
    
    Fixes formatting of disassembler output after printing
    a hex float, e.g. for a NaN or subnormal.

commit 3664bd5670d95cde15a04b58cc1c4ab96f5b6e47
Author: David Neto <dneto@google.com>
Date:   Wed Dec 23 13:21:43 2015 -0500

    Fix parser assert failure for a bad OpSwitch
    
    Emit a diagnostic if the OpSwitch selector refers to an ID that
    is valid but has no type.
    
    Discovered by afl-fuzz.

commit 1a3734d265b7f6ca5e0de8dc672a9b2986cf46d0
Author: David Neto <dneto@google.com>
Date:   Tue Dec 22 15:15:46 2015 -0500

    Avoid relative path in #include
    
    Adds CMAKE_CURRENT_SOURCE_DIR to the include path for UnitSPIRV

commit 4c21571728f9e5057d3c93f0b12006173a7cdfc3
Author: David Neto <dneto@google.com>
Date:   Tue Dec 22 15:08:41 2015 -0500

    Rename endian.h to spirv_endian.h
    
    If we later add a source/ as an -I include directory,
    then avoid confusing other headers that want to include the
    standard "endian.h" from /usr/include.
    
    Also rename source/endian.cpp to source/spirv_endian.cpp

commit 224348faf0616b5bea635141f4b28ee0faab3002
Author: David Neto <dneto@google.com>
Date:   Mon Dec 7 13:54:20 2015 -0500

    Add spirv.py from the SPIR-V 1.0.2 registry

commit a3d0d3c719771e9b81bcd69a739c3d08af37469b
Author: Umar Arshad <umar@arrayfire.com>
Date:   Tue Dec 15 14:50:05 2015 -0500

    Initial logical layout validation
    
    * Validates module level instructions for logical layout
      conformance
    * Does not validate:
      1. Function logical layout
      2. Minor cases with OpVariable
      3. Missing MemoryModel instruction in module
      4. Order of function definition and function declaration
    * 782 unit tests for logical layout
    
    Addressed feedback

commit 6d37e3c5f330ae4dbdad6c140ee84af94f941489
Author: Umar Arshad <umar@arrayfire.com>
Date:   Mon Dec 14 08:21:08 2015 -0500

    Refactor validation types into another file

commit 532af9c09c8e58b9c3d68f65a2d1206d9ec71b66
Author: Umar Arshad <umar@arrayfire.com>
Date:   Mon Dec 14 10:57:15 2015 -0500

    Fix tests which rely on OpName;Use EXPECT_THAT
    
    All OpName calls should appear before annotation and type
    declarations.

commit b9ad418c955d77af6ef835742496ba40b93229c0
Author: Umar Arshad <umar@arrayfire.com>
Date:   Thu Dec 10 11:56:34 2015 -0500

    Fix warnings with Apple clang++
    
    * Unused private member
    * Overflow error when subtracting num_fraction_bits for HF16 and HF

commit 411de16386787c3e0326f631037402310e132071
Author: David Neto <dneto@google.com>
Date:   Wed Dec 9 11:40:56 2015 -0500

    Fix setting of off-by-default cmake options
    
    An enclosing CMake project should be able to set the
    off-by-default CMake options in SPIRV-Tools by just doing:
      set(SPIRV_SKIP_EXECUTABLES ON)
    instead of
      set(SPIRV_SKIP_EXECUTABLES ON CACHE BOOL "" FORCE)
    
    Also, fix the SPIRV_WARN_EVERYTHING so it understands which options
    to send to Clang vs. GCC.
    
    Note: With SPIRV_WARN_EVERYTHING enabled, the code doesn't
    compil with either Clang or GCC.

commit f76e0f5231302e4f0ae45910f728eaa9c3c76b65
Author: Umar Arshad <umar@arrayfire.com>
Date:   Wed Nov 18 15:43:43 2015 -0500

    Basic SSA Validation
    
    Most uses of an ID must occur after the definition
    of the ID.  Forward references are allowed for
    things like OpName, OpDecorate, and various cases
    of control-flow instructions such as OpBranch, OpPhi,
    and OpFunctionCall.
    
    TODO: Use CFG analysis for SSA checks.  In particular,
    an ID defined inside a function body is only usable inside
    that function body.  Also, use dominator info to catch
    some failing cases.
    
    Also:
    * Validator test cases use (standard) assignment form.
    * Update style to more closely follow the Google C++ style guide
    * Remove color-diagnostics flag.
      This is enabled by default on terminals with color. Prints
      hidden ASCII for terminals that can't handle color(Emacs)
    * Pass functors to SSAPass to check if the
      operand can be forward referenced based on its index value
    * Return SPV_ERROR_INVALID_ID for ID related errors
      spvBinaryParse returned SPV_ERROR_INVALID_BINARY for all types of
      errors. Since spvBinaryParse does some ID validation, this was
      returning inappropriate error codes for some tests.
    * Common fixture for validation tests.
      It only runs certian validation passes.
    * Add a SPV_VALIDATE_SSA_BIT for testing purposes
    * Fixtures now return error codes
    * Add OpName support in diag message and unit tests
    * Binary parsing can fail with invalid ID or invalid binary error code
    
    Tests include:
    * OpDecorate
    * OpName
    * OpMemberName
    * OpBranchConditional
    * OpSelectionMerge
    * OpMemberDecorate
    * OpGroupDecorate
    * OpDeviceEnqueue
    * Enable several tests failing in ID validation.

commit 4e5bc928c0430b6015bd7836c598113f7076af20
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Thu Dec 3 16:30:21 2015 -0500

    Added Float16, and HexFloat conversions

commit 4b6a98fe16613dbd36b31e723597412669ac1f7c
Author: David Neto <dneto@google.com>
Date:   Wed Dec 2 11:55:35 2015 -0500

    Fix namespace on PrintTo

commit 590ff131ac4c98f30ce50c9da3778a5c99db6b79
Author: David Neto <dneto@google.com>
Date:   Mon Nov 30 18:10:13 2015 -0500

    PrintTo on WordVector should preserve the fill char

commit 5947c404832bc4e1347071f5e03d1374ed2c5a15
Author: David Neto <dneto@google.com>
Date:   Tue Dec 1 16:45:46 2015 -0500

    Stated word count is several more than expected
    
    These are extra binary parsing cases.

commit 66f649d50195cf7846b0a0b39224b08fab20898f
Author: David Neto <dneto@google.com>
Date:   Tue Dec 1 16:19:44 2015 -0500

    Use static_cast instead of constructor for uint32_t

commit 39fa148234b3ec0d3561fe653ac5b59c5044c70a
Author: David Neto <dneto@google.com>
Date:   Mon Nov 30 14:39:31 2015 -0500

    OpDecorate should not accept any number of literal operands.
    
    This is a grammar fix.  The Decoration operand of OpDecorate (and
    OpMemberDecorate) determines the remaining operands.  Don't just
    allow any number of literal numbers as operands.
    
    (The OperandVariableLiterals operand class as the last member
    of the OpDecorate and OpMemberDecorate entries in in opcode.inc is
    an artifact of how the spec generates the opcode descriptions. It's
    not suitable for parsing those instructions.)
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/34

commit 36909c05a5248a28029ad1d04e80fe059cee237b
Author: David Neto <dneto@google.com>
Date:   Mon Nov 30 13:45:20 2015 -0500

    binary parse test: extra words after string literal
    
    Covers the case where the string literal is the
    last operand.
    
    TODO: Case where one more operand is expected after
    the string literal.  Occurs only for the LinkageAttributes
    decoration.  To test that, we need to update the grammar
    as well.

commit 292acb5b41cef5442b0192bfb3a620383bdc0d7a
Author: David Neto <dneto@google.com>
Date:   Tue Dec 1 12:01:59 2015 -0500

    Don't add -frtti for tests. Use newer googletest.
    
    Using -frtti caused link failures when both of the following are
    in effect:
            -DDISABLE_EXCEPTIONS=ON
            -DDISABLE_RTTI=ON
    
    The correct fix is to use tip-of-tree googletest.
    Specifically, we need a version of googletest with the fix in
    https://github.com/google/googletest/pull/612
    In particular, it must be later than googletest 1.7.0.

commit bdc50b5d6239a7709b855312d644529dc273fb70
Author: David Neto <dneto@google.com>
Date:   Tue Dec 1 10:01:33 2015 -0500

    Add -frtti for tests that use mocking
    
    The tests now use mocked methods.  This requires runtime type
    information for those test classes.
    https://github.com/google/googletest/issues/610
    
    This has been fixed recently upstream in googletest.  Until we pick
    up that fix, add -frtti for the the test executable only.

commit 15aebef8a0bf531bc0d1ef8193dc4c4a8efcfead
Author: Dejan Mircevski <deki@google.com>
Date:   Mon Nov 30 18:05:21 2015 -0500

    Merge PR #32.
    
    Simplify binary parser tests using GoogleMock.

commit 7a3a459af5bbd1dbefa3e0bbbb11795c8f555b0a
Author: Dejan Mircevski <deki@google.com>
Date:   Mon Nov 30 11:21:09 2015 -0500

    Mention that ParsedInstruction owns its components.
    
    Also close a parenthesis in ParsedInstruction printout.

commit d9ad050a95c86b360ed3eb04030d917f50197661
Author: David Neto <dneto@google.com>
Date:   Tue Nov 24 18:37:24 2015 -0500

    spvBinaryParse: fix overruns, handle image format
    
    Add unit tests for all diagnostics issued by spvBinaryParse.
    
    Handle image format operands in the binary parser and the
    disassembler.
    
    Document that the callback function pointers can be null,
    in which case they are ignored.
    
    Detect exhaustion of input when parsing an operand,
    to avoid buffer overruns on some invalid input cases.
    
    Fix the description strings for some operand types.
    Make the diagnostic messages for those operand types
    consistent between the assembler and binary parser.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/29

commit ee8a007810ff150ea9207f51fc9c601277daa60b
Author: David Neto <dneto@google.com>
Date:   Tue Nov 24 16:23:08 2015 -0500

    Clarify the non-SPV_SUCCESS case parser callbacks.
    
    When a callback returns something other than SPV_SUCCESS,
    then no futher callbacks are issued (parsing terminates early),
    and no additional diagnostics are emitted.
    
    The unit tests already check this behaviour.

commit 750f205b63818b6234ceb7e9e1b42fc6c327cbd5
Author: David Neto <dneto@google.com>
Date:   Thu Nov 5 17:14:13 2015 -0500

    Several unit tests for spvBinaryParse
    
    Add a non-zero spv_result_t value SPV_REQUESTED_TERMINATION
    which should be used to signal an ok result, but signals
    early termination for a process, such as binary parsing.
    
    Tests include:
     - correct contents sent to header and instruction callbacks
     - non-zero status from a callback should terminate parsing,
       but the parser should not generate its own diagnostic.
    
    TODO: Check diagnostics generated by the parser itself.

commit c9e0845c7f4b55597349ed2d3de57646fa680aeb
Author: David Neto <dneto@google.com>
Date:   Mon Nov 23 15:15:41 2015 -0500

    Aliasing through a union member is valid.
    
    Take back my previous TODO.

commit 15afbf93728dddffd332a27352e86fbc7b487db0
Author: David Neto <dneto@google.com>
Date:   Mon Nov 23 14:17:35 2015 -0500

    Fix compilation of an assert.
    
    The asserts check the length of the endian-converted words
    vector with the reported number of words in the instruction.

commit 7bff3eb6f9abb1c126029d456b152429902dc1d8
Author: David Neto <dneto@google.com>
Date:   Fri Nov 20 14:21:10 2015 -0500

    spv_parsed_instruction_t cleanup
    
    Add members:
     - words: a pointer to an array of words in the instruction,
       in host native endianness.
     - num_words: sizes the words member
    
    Remove member:
     - offset
    
    This simplifies clients of spvBinaryParse, because they don't
    have to handle endianness translation.
    
    Also, it makes the binary parse API more composable, allowing
    for easy chaining of binary parse clients.  A binary parse client
    is handed the array of words directly instead of having to reference
    some external array of all the words in the SPIR-V binary.  It also
    allows a binary parse client to mutate the instruction stream before
    handing off to a downstream consumer.
    
    TODO(dneto): Still need to write the unit tests for spvBinaryParse
    
    Fixes: https://github.com/KhronosGroup/SPIRV-Tools/issues/1

commit 01c8d7a8fb7a6ec052a98beee0f6be71fa7ec07c
Author: Ben Vanik <ben.vanik@gmail.com>
Date:   Sun Nov 22 08:32:53 2015 -0800

    Merge pull request #23.
    
    Fixing some C++ conversion errors.
    * Implicit conversion from int to bool.
    * Implicit conversion from size_t to uint32_t.
    * Implicit conversion from char* to uint8_t.
    
    Adding no-op color operators so unhandled platforms can still link.

commit 01656363a7234030a9917c41c09a03ab29316469
Author: David Neto <dneto@google.com>
Date:   Fri Nov 20 10:44:41 2015 -0500

    Put DiagnosticStream and clr exports in libspirv namespace
    
    Each exported functions either has an "spv" prefix, or is inthe libspirv
    namespace.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/18

commit 9e53117061378fbfbf6c9f766839ac49e6aafacd
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Nov 20 09:44:13 2015 -0500

    Fix paths for binaries to match changes in CMake configuration.

commit 39a83291fc776b7d346e7664753b2b1163e66d43
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Nov 19 10:30:39 2015 -0500

    Use test fixture for a test.

commit 5b9fff7175d58eedb8fdfbb245894facdbeb99fe
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Thu Nov 19 10:12:44 2015 -0500

    Removed executable flag from HexFloat.cpp.

commit 3958c902770e97722bb5e193ff5464df7e7409ca
Author: David Neto <dneto@google.com>
Date:   Thu Nov 19 09:38:05 2015 -0500

    Updated spirv.h header. Fixes SPV_VERSION macro
    
    The SPV_VERSION macro value was updated to be 0x10000.
    Previously it was missing the "0x" prefix, which caused
    confusion.
    
    The value of the const unsigned int SpvVersion has always
    been 0x00010000.  That's what should appear as the version
    word in the SPIR-V header.
    
    The SPV_VERSION symbol is to be used in preprocessor directives.

commit 3a4bc7e61a76c101bdc660641ba5eff3e1b808e4
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Thu Nov 19 09:22:53 2015 -0500

    Turned warnings-as-errors on by default.
    
    Fixed a few warnings that appear in builds on VS2013 and VS2015.

commit 8bd75d650e3564ee185536920d888aaed8734db4
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Nov 18 09:22:10 2015 -0500

    Clean up CMake configuration and address compiler warnings.
    
    - Removed dead configuration in CMakeLists.txt.
    - Used target_compile_options() instead of CMAKE_{C|CXX}_FLAGS.
    - Turned on warnings on tests.
    - Fixed various warnings for comparing signed with unsigned values.
    - Removed dead code exposed by compiler warnings.

commit 64a9be97cac4056a807efe54b73e87d52ca5b41d
Author: David Neto <dneto@google.com>
Date:   Wed Nov 18 15:48:32 2015 -0500

    Remove old names for enums: memory semantics, scope ID

commit 8ddd4ec1022cb828dd40e22c32a45ff44a4bb1f6
Author: David Neto <dneto@google.com>
Date:   Tue Nov 17 16:37:10 2015 -0500

    Bottom byte of version header word should be 0
    
    The assembler should always make it 0.
    The disassembler should ignore it.
    
    Remove the macro support for supplying a value for it.
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/6

commit 01a3b9ce36f87f2f7bd5435ca626d9eb3d4a77ca
Author: Pierre Moreau <dev@pmoreau.org>
Date:   Tue Nov 17 23:27:35 2015 +0100

    CMake: Respect user-defined install path

commit 748d585a9a60723c4e7adfb28bca293d5637f76f
Author: David Neto <dneto@google.com>
Date:   Tue Nov 17 18:00:56 2015 -0500

    Object files should depend on spirv.h and friends
    
    Don't use SYSTEM attribute on include_directories directive
    for the SPIR-V standard header files.  When you do, object files
    are not considered dependent on those headers.
    
    Checked by looking at the dependency file source/disassemble.cpp.o.d,
    and by trying to compile after a trivial edit to spirv.h
    
    Fixes https://github.com/KhronosGroup/SPIRV-Tools/issues/7
    
    Also, use "" inclusion instead of <> inclusion for standard SPIR-V
    headers.

commit aa50c45e3b351c40ec821dd2a36db7e5cc58e610
Author: Lei Zhang <antiagainst@google.com>
Date:   Tue Nov 17 16:46:55 2015 -0500

    Fix test: version number has changed.

commit 62fcaf1a7416ce3781f40013251b03362cb957c4
Author: Lei Zhang <antiagainst@google.com>
Date:   Tue Nov 17 16:00:53 2015 -0500

    Update external headers.
    
    Now use the headers published at
    https://www.khronos.org/registry/spir-v/api/1.0/.

commit af9906e4e5c851b5bc25a2130ef3f1a7f4aab3fc
Author: Lei Zhang <antiagainst@google.com>
Date:   Mon Nov 16 10:48:43 2015 -0500

    Use Google comment style and fix typos.

commit 287cfc1dd7be98ab1f78bbfc82d4f12c1c844a39
Author: David Neto <dneto@google.com>
Date:   Sat Nov 14 08:23:03 2015 -0600

    Fix grammar: "The SPIR-V Tools project provides"

commit 2266ba10611432ecdfa59e25c2a9a08cc0cda180
Author: David Neto <dneto@google.com>
Date:   Fri Nov 13 12:03:28 2015 -0600

    Register Glslang tool

commit acf7287c426a9094ad56116fa82472261d6a4f37
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Nov 13 11:00:10 2015 -0500

    Fix many typos.

commit 56fb3f016b20eaf401d4e0cb8ed2b2b003de6e98
Author: David Neto <dneto@google.com>
Date:   Thu Nov 12 20:42:16 2015 -0500

    Revamp the README for public release.
    
    Reorganize the README, and update its contents to more accurately
    reflect the public release.
    Remove the incremental "Changes" section.
    
    Rename readme.md to README.md
    Rename license.txt to LICENSE
    
    Update the assembler tool to support -h, and make its help look
    more consistent with the disassembler.
    
    Change the target and library name to SPIRV-Tools.  To better
    match the GitHub repo name.  Also, it's not SHOUTING.

commit 3d348a8440d1d67bab43d5e92c472c2f9174a57f
Author: David Neto <dneto@google.com>
Date:   Thu Nov 12 19:40:21 2015 -0500

    The version header word has 3 byte-size components.
    
    Bits 24-31: 0
    Bits 16-23: SPIR-V major number (1)
    Bits  8-15: SPIR-V minor number (0)
    Bits   0-7: SPIR-V minor number (2)
    
    The assembler will construct the word appropriately,
    and the disassemble will print it in major.minor.revision form.

commit 14b93e49ed7638c2ac6dc17a3a95aeb4d7d9506b
Author: David Neto <dneto@google.com>
Date:   Thu Nov 12 18:33:47 2015 -0500

    Generator word now has two 16-bit components
    
    The high 16-bits are a registered generator tool.
    These are registered at
    https://www.khronos.org/registry/spir-v/api/spir-v.xml
    
    The low 16-bits are tool-specific.  It might be a version number,
    for example, but is not constrained by the spec or by the registration
    process.
    
    The disassembler prints the tool name when we know it.
    If we don't, print "Unknown" and then the numeric tool number
    in parentheses.
    In all cases, the disassembler prints lower 16-bit number on the
    same line but after the tool name.
    
    Also add newly registered generators:
      6: Khronos LLVM/SPIR-V Translator
      7: Khronos SPIR-V Tools Assembler

commit 5f7ed91e18472f3508734dd09f0f4e75551fe52d
Author: David Neto <dneto@google.com>
Date:   Thu Nov 12 15:44:25 2015 -0500

    Support capabilities StorageImageReadWithoutFormat
    
    Also add capability StorageImageWriteWithoutFormat.
    
    They only affect validation rules.

commit df3ea3c5de98ab6098521f79269a3a96688660cc
Author: David Neto <dneto@google.com>
Date:   Thu Nov 12 11:57:41 2015 -0500

    Disassembler can read the binary from stdin.
    
    Read from stdin if:
     - no input filename specified
     - the input filename is "-"
    
    Also, output goes to stdout if the output filename (argument to -o)
    is "-".

commit 12511c8a4ffd8ee04f3a2cb407e618259081fdbd
Author: David Neto <dneto@google.com>
Date:   Thu Nov 12 15:30:28 2015 -0500

    Add GeometryStreams capability
    
    Decoration Stream depends on it.
    GeometryStreams depends on Geometry capability.
    
    Spot check dependence of OpEmitStreamVertex on GeometryStreams.
    (Opcode dependencies on capabilities are automatically generated from
    opcode.inc)

commit 0c6cf8cdff4f697159f60b4612faec7c8e6ab70c
Author: David Neto <dneto@google.com>
Date:   Wed Nov 11 16:36:42 2015 -0500

    Support OpImage
    
    It's already in the syntax table.  Just test it.

commit 972788bf239daff45ed0d2bb878e608c4106939c
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Nov 12 13:48:30 2015 -0500

    Use opaque context object to hold SPIR-V info tables.
    
    Previously the opcode table is declared as an global array and we
    have spvOpcodeTableInitialize() modifying it. That can result in
    race condition. Now spvOpcodeTabelGet() copies the whole underlying
    array.

commit 321c3e206b3fa8713cc6f20e8821572354882599
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Nov 12 14:42:03 2015 -0500

    Remove an obselete and redundant text.

commit e7c426ac8dd557ef4f249a121f3b6cb7ee17b471
Author: David Neto <dneto@google.com>
Date:   Thu Nov 12 13:53:27 2015 -0500

    Disassembler tool indents to 15 by default
    
    The assigned-to result Id appears to the left of the 15th column.
    
    Add --no-indent option.
    
    The API form of the disassembler does not indent by default.

commit 9a5ac08bcfea12b2826c751534b1097675150c99
Author: David Neto <dneto@google.com>
Date:   Thu Nov 12 11:44:42 2015 -0500

    spirv-dis prints to stdout by default.
    
    Color printing is enabled only for printing to stdout.
    Add --no-color to turn off color printing.

commit 39b01b99885d9a6072380d15893a53f67063f31b
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Nov 12 10:45:36 2015 -0500

    Simplify some tests

commit 4ac601a2c353c9160c77e7d30c821fd7eab738b6
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Nov 11 17:29:23 2015 -0500

    libspirv.h doesn't depend on spirv_operands.hpp anymore.
    
    Also change spirv_operands.hpp to a C header since we only have
    an enum inside it, and move it to source/.

commit a23a73671acb8107bf90b0f1760ba119c25750c5
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Nov 11 16:59:31 2015 -0500

    Moves parser interface to libspirv.h.

commit 8984f6f31f1ed2c9bba94e1ebe10c651a44a68c1
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Nov 11 16:50:55 2015 -0500

    Move internal macros/structs for SPIR-V to a separate header.

commit d02f68ae790d50644b0e5c02897b04575cf8afa7
Author: David Neto <dneto@google.com>
Date:   Wed Nov 11 12:32:21 2015 -0500

    Update to 1.0 Rev 2 work-in-progress headers
    
    Updated readme.
    
    Note: The header advertises itself as Rev 1, but contains
    many (all?) the updates intended for Rev 2.  We might need
    to update one more time before SPIR-V 1.0 Rev2 is published.
    
    Regenerated syntax tables for 1.0.
    
    Changed names:
      InputTriangles -> Triangles
      InputQuads -> Quads
      InputIsolines -> Isolines
      WorkgroupLocal -> Workgroup
      WorkgroupGlobal -> CrossWorkgroup
      PrivateGlobal -> Private
      (Dim) InputTarget -> SubpassData
      WorkgroupLocalMemoryMask -> WorkgroupMemoryMask
      WorkgroupGlobalMemoryMask -> CrossWorkgroupMemoryMask
      AsyncGroupCopy -> GroupAsyncCopy
      WaitGroupEvents -> GroupWaitEvents
    
    Remove:
      IndependentForwardProgress capability
      Smooth decoration
      FragColor BuiltIn
      WorkgroupLinearId in favour of LocalInvocationId
      ImageSRGBWrite capability
      Special OpenCL image instructions
    
    Add:
      image channel data type UnormInt101010_2
      AcquireReleaseMask
    
    InputTargetIndex updates:
      InputTargetIndex -> InputAttachmentIndex
      InputAttachmentIndex depends on InputAttachment capability,
      and it takes a literal number argument.
    
    Capability StorageImageExtendedFormats updates:
      Enum value changed from 26 to 49. (Changes position in tables).
      Replaces AdvancedImageFormat capability.
    
    OpenCL source language -> OpenCL_C, OpenCL_CPP

commit aa056cd8c7292c63ea4f9d8fe6a5df59f07af1c2
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Nov 11 14:24:04 2015 -0500

    Move SPIR-V constants/limits to a separate header.

commit 16f3ddfbb81a76a389d575a96bd72cc6f7ea5b5e
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Nov 11 15:37:01 2015 -0500

    Use std::string instead of a huge array for storing literal strings.

commit 2a0b773b2723b40f0493b60beba2228965568e14
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Nov 11 13:57:43 2015 -0500

    Add missing copyright.

commit 923f6c13fc371b7bfce6153e52163be79e9c3382
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Nov 11 12:45:23 2015 -0500

    Use quotation for libspirv.h and sort headers.

commit 7a222e4abf61cc73fffee551391ebdbefad38e05
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Nov 11 12:40:25 2015 -0500

    Move info table related structs into table.h.

commit 04736e7878d73073b1bbcd2980811a8490637b82
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Nov 11 12:14:36 2015 -0500

    Move spv*TableGet() functions out of libspirv.h.
    
    This is a part of the effort to clean up libspirv.h.

commit df920ecb7186c32a87b1498756fe073a62ef17bd
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Nov 11 11:33:26 2015 -0500

    Remove table parameters from API functions.
    
    Opcode, operand, and external instruction tables are no longer
    passed in as parameters to spvTextToBinary(), spvBinaryToText(),
    and spvValidate().

commit ec691fba2a3d31b4fd1dd951d4f8cdd2ee9a089a
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Wed Nov 11 12:06:46 2015 -0500

    Fixed permissions

commit 55ecc2e097405a6ab38d53e0a4f6046447e45c05
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Wed Nov 11 11:05:07 2015 -0500

    Fixed warnings on windows and constness of spv_binary.
    
    Replaced uint64_t with size_t in the places that make sense and
    added spv_const_binary{,_t} to allow the interface to accept non
    modifiable spirv where appropriate.

commit 9049bb48771cc74dcf72b8aa754d845eb51cf18a
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Nov 11 10:17:16 2015 -0500

    Get magic number and version from spirv.h.
    
    This is a part of the effort to clean up libspirv.h.

commit 21196947753cfeaac3eda776b9fffb1c24b28c06
Author: David Neto <dneto@google.com>
Date:   Wed Nov 11 02:45:45 2015 -0500

    Disassembler support for OpSpecConstantOp
    
    Document the fact that we use names for extended instructions
    and OpSpecConstantOp opcode operands.

commit 0f166be68d4b6624a10d6bf312679505d391ec22
Author: David Neto <dneto@google.com>
Date:   Wed Nov 11 01:56:49 2015 -0500

    Assembler support for OpSpecConstantOp
    
    Adds SPV_OPERAND_TYPE_SPEC_CONSTANT_OP_NUMBER.

commit ce9cef71ac288f8b1c53ba7b8be600cb756329d4
Author: David Neto <dneto@google.com>
Date:   Wed Nov 11 09:44:23 2015 -0500

    Fix Windows build errors.
    
    - uint64_t != size_t sometimes
    - don't use C99 runtime sized arrays

commit f2529850591e26f50d6510ee20243c8148d491ef
Author: David Neto <dneto@google.com>
Date:   Tue Nov 10 16:04:30 2015 -0500

    Fix description of NaN encoding.

commit 003e288c35c3ab40d1d652c1f3992b8385b51e01
Author: David Neto <dneto@google.com>
Date:   Tue Nov 10 15:43:12 2015 -0500

    Enable round trip tests for OpSwitch

commit aa3cd5abb9f647d3b258799723fb2ecc3c6d2309
Author: Lei Zhang <antiagainst@google.com>
Date:   Tue Nov 10 14:29:35 2015 -0500

    Optional typed literal number should be concrete in BinaryParser.

commit 0db3721675b13aff4f7d62831f4879bc8b5b7a37
Author: David Neto <dneto@google.com>
Date:   Tue Nov 10 14:14:21 2015 -0500

    Update readme: binary parser refactor; non-32-bit literals

commit 7c3ca6d05a3d7a51e68aceb1773748306c02eb1c
Author: David Neto <dneto@google.com>
Date:   Tue Nov 10 14:46:35 2015 -0500

    syntax.md: Describe hex floats and their use.

commit 2ae4a68fe8f459a745cff0f8ec6414807259e723
Author: David Neto <dneto@google.com>
Date:   Mon Nov 9 18:55:42 2015 -0500

    Fix handling of OpExtInstImport
    
    The assembler tracks mapping of extended instruction import Id
    to extended instruction type.
    
    Adds a few new ways to fail.

commit 9e545d79680b310451aaa0ccca9a70588a808b64
Author: David Neto <dneto@google.com>
Date:   Fri Nov 6 18:08:49 2015 -0500

    Assembler supports hex float constants.
    
    The bit pattern for a hex float is preserved through
    assembly and disassembly.
    
    You can use a hex float to express Inf and any kind of NaN
    in a portable way.

commit 229b90f6f4e2756748a6dcac2c5f5fb7375210bc
Author: David Neto <dneto@google.com>
Date:   Fri Nov 6 11:23:57 2015 -0500

    Print OpConstant values according to type.
    
    Zero and normal floating point values are printed with enough
    enough digits to reproduce all the bits exactly.
    Other float values (subnormal, infinity, and NaN) are printed
    as hex floats.
    
    Fix a binary parse bug: Count partially filled words in a
    typed literal number operand.
    
    TODO: Assembler support for hex numbers, and therefore reading
    infinities and NaNs.

commit 0c00eb2cdf1ccbdfb10b1400a68792945c521388
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Nov 6 10:10:28 2015 -0500

    Remove canonical assembly format in syntax.md.

commit 8f6ba14b58b4922384bfd931b11224f76496cf09
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Nov 6 15:09:04 2015 -0500

    advance() should check current string index is in bound.

commit 9042f40f7cc4ccad3e23da1f6106086a0aebc01b
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Nov 5 17:45:09 2015 -0500

    Remove support for canonical assembly syntax format.

commit 201caf70010d643af65a2459fa6d14e9bdb2ac6b
Author: David Neto <dneto@google.com>
Date:   Wed Nov 4 17:38:17 2015 -0500

    spv_operand_type_t cleanup.
    
    - Concrete operand types are never optional.
      Split them to make this so, e.g. add SPV_OPERAND_TYPE_IMAGE
      since there was SPV_OPERAND_TYPE_OPTIONAL_IMAGE.
      Similarly for SPV_OPERAND_TYPE_MEMORY_ACCESS.
      This entails duplicating two operand table entries.
    
    - The above, plus some rearranging of enums, allows us to define
      first and last optional operand types, and first and last
      variable operand types.
      This lets us simplify the code for spvOperandIsOptional, and
      spvOperandIsVariable.
    
    - Replace SPV_OPERAND_TYPE_MULTIWORD_LITERAL_NUMBER with the
      more accurately named SPV_OPERAND_TYPE_TYPED_LITERAL_NUMBER.
      Its special characteristic is that the type of the literal
      number is determined by some previous operand in the instruction.
      This is used for literals in OpSwitch, OpConstant, and OpSpecConstant.
      This lets us refactor operand parsing cases in the assembler.
    
    - Remove the special required-thing-in-optional-tuple in favour of
      the corresponding concrete operand type:
            SPV_OPERAND_TYPE_ID_IN_OPTIONAL_TUPLE
        --> SPV_OPERAND_TYPE_ID
            SPV_OPERAND_TYPE_INTEGER_LITERAL_IN_OPTIONAL_TUPLE
        --> SPV_OPERAND_TYPE_INTEGER_LITERAL
    
    - Constrain spvOpeandTypeStr to only have to work for non-variable
      operand types.  Add a test for this.

commit 97e4a5d83d6b5d067c840e4a1682c0cf5f06668b
Author: David Neto <dneto@google.com>
Date:   Thu Nov 5 17:37:48 2015 -0500

    Remove TODO: Strings are always little-endian
    
    SPIR-V strings are UTF-8 encoded, and always byte-addressed.

commit 0ca6b59bfd568d34273ac41e09ee33da65f3d962
Author: David Neto <dneto@google.com>
Date:   Fri Oct 30 16:06:15 2015 -0400

    Refactor the binary parser.
    
    The binary parser has a C API, described in binary.h.
    Eventually we will make it public in libspirv.h.
    The API is event-driven in the sense that a callback is called
    when a valid header is parsed, and for each parsed instruction.
    
    Classify some operand types as "concrete".  The binary parser uses
    only concrete operand types to describe parsed instructions.
    
    The old disassembler APIs are moved into disassemble.cpp
    
    TODO: Add unit tests for spvBinaryParse.

commit 0981b1514efb7eb89d27acfd481374c5d99e494a
Author: Dejan Mircevski <deki@google.com>
Date:   Tue Nov 3 13:52:41 2015 -0500

    Slay "undeflow."

commit fc10eac86851fa523277e617268e457d3cf84944
Author: Dejan Mircevski <deki@google.com>
Date:   Tue Nov 3 12:02:07 2015 -0500

    Refactor EncodeTestHelper() and DecodeTestHelper().

commit a010444b79f64f76eba507e9892672ff334f8b6b
Author: David Neto <dneto@google.com>
Date:   Tue Nov 3 11:26:15 2015 -0500

    Consts before the type, not after

commit e4945def956bb0415a646d92dfa1defd0353a083
Author: David Neto <dneto@google.com>
Date:   Wed Oct 28 13:50:32 2015 -0400

    A spv_binary_t points to const code words.

commit ea324e4a2385661942a684f6fc1d726c863b66ab
Author: David Neto <dneto@google.com>
Date:   Tue Oct 27 16:56:14 2015 -0400

    Move spvBinaryToText into new disassembler file.
    
    This begins the refactoring of the disassembler into
    two parts: A binary decoder in binary.cpp, and an
    event-driven converter to text in disassemble.cpp

commit 1bcd3d16a380750c768c84d0f0ce6d2d11123f49
Author: David Neto <dneto@google.com>
Date:   Mon Nov 2 16:03:12 2015 -0500

    Use the syntax table for opcode to name mappings.
    
    This method is more reliably complete.

commit b3ae4b942205cb0f6d30e61a353fe39c03842a53
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Mon Nov 2 15:45:29 2015 -0500

    Updated comment in SetBits.
    
    It now mentions that it will fail if you try to set a bit that
    does not exist.

commit bae885111101d78094a99cef15d7fad006f0a956
Author: David Neto <dneto@google.com>
Date:   Wed Oct 28 13:16:56 2015 -0400

    DiagnosticStream keeps a copy of the position.
    
    Don't store the pointer, as the underlying storage
    could disappear.  This a bit more flexible and robust.

commit 758b347983564da4924d8fcd1bdf0a21523ce5b2
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Mon Nov 2 15:19:18 2015 -0500

    Added double tests to HexFloat

commit ea633a6427e05f2f5c266b19a239b3306887b78d
Author: David Neto <dneto@google.com>
Date:   Mon Nov 2 11:40:59 2015 -0500

    Empty assembly text compiles to no instructions.
    
    But it's still a valid module.

commit aef608c40d65d24bc30cfaac8039e3b5403ff16c
Author: David Neto <dneto@google.com>
Date:   Mon Nov 2 14:59:02 2015 -0500

    Consolidate: spvOpcodeIsType into spvOpcodeGeneratesType
    
    And fix the spvOpcodeGeneratesType: OpTypeForwardPointer
    does not generate a new type.

commit 1a0334edee58912afa5bba8796540cdc528fba79
Author: Lei Zhang <antiagainst@google.com>
Date:   Mon Nov 2 09:41:20 2015 -0500

    Run clang-format to enforce Google style globally.
    
    Note that we are more strict than Google style for one aspect:
    pointer/reference indicators are adjacent to their types, not
    their variables.
    
    find . -name "*.h" -exec clang-format -i {} \;
    find . -name "*.cpp" -exec clang-format -i {} \;

commit 0170752763493e056423c8369de02f8e5b6f7ab2
Author: David Neto <dneto@google.com>
Date:   Mon Nov 2 09:44:20 2015 -0500

    Update readme: fix utf-8 tests, use spirv.h

commit 6dfd4186f599d11e79870e043d4d1a57c2606ac8
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Mon Nov 2 11:45:38 2015 -0500

    Updated HexFloat parsing for windows.
    
    It is valid for float values to be modified on copy if they are NaN,
    so long as they remain the correct NaN. What this means is that
    we can not rely on the float data-type for storing float values
    if we want to retain bit patterns.
    
    Added FloatProxy which stores data in an unsigned integer, and updated
    the HexFloat template to deal with FloatProxy values instead.

commit 0b61c593a2fa793e7765544d58b662fbe2b0a0a1
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Fri Oct 23 13:26:02 2015 -0400

    Added HexFloat reading to HexFloat.
    
    This allows reading of hex-encoded floats.

commit c2887f98bc6d20f1116f17b7b4e684b6b8d33e98
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Fri Oct 23 13:23:19 2015 -0400

    Added HexFloat helper class to print out floating point numbers.
    
    TODO Add double tests before we actually use this.

commit b78d2d31c5945937a802491f1770741c3360c102
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Thu Oct 29 09:57:24 2015 -0400

    Changed SetBits to index from LSB and take a size.

commit b36e704a4761cf42a645578bbe408135130106eb
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Oct 28 13:40:52 2015 -0400

    Use spirv.h instead of spirv.hpp.
    
    This is a part of the effort to make libspirv.h C-compatible.

commit 9f79d789ec321a6135618a3cf0945af0381a2075
Author: David Neto <dneto@google.com>
Date:   Tue Oct 27 16:27:05 2015 -0400

    Inclusion guards follow Google C++ style
    
    Follow the scheme in
    http://google-styleguide.googlecode.com/svn/trunk/cppguide.html#The__define_Guard
    except:
     - 'include/' is dropped from the guard token
     - 'source/' is dropped from the guard token

commit db901b622ef3c68261aac61da4ad2a68325a6150
Author: David Neto <dneto@google.com>
Date:   Tue Oct 27 16:14:40 2015 -0400

    Move endian utilities to their own file.

commit 0b9816813b99c6621da095d8e633d3a25835143d
Author: David Neto <dneto@google.com>
Date:   Tue Oct 27 15:51:34 2015 -0400

    Hide spvBinaryHeaderSet with its only client.
    
    Also rename it to SetHeader since it's not part of the "binary"
    API.

commit fcc7d5835398adfd51bba4b86015cfea92abb985
Author: David Neto <dneto@google.com>
Date:   Tue Oct 27 15:31:10 2015 -0400

    Move AssemblyGrammar into its own source files

commit e5e99b57ccdbd1a0d6eeba1ae79ab963b91e836f
Author: David Neto <dneto@google.com>
Date:   Fri Oct 16 14:26:40 2015 -0400

    Add DISABLED failing test for ext inst import confusion
    
    Currently, the assembler does not track external import
    IDs when there are two or more.
    
    TODO(dneto): Fix this functionality.

commit b6a43383e7253121539165e3642b73c0a0f2a667
Author: David Neto <dneto@google.com>
Date:   Tue Oct 27 11:10:29 2015 -0400

    Use basic_string<char> for the UTF-8 test string
    
    This is an attempt to fix the unit tests on DeveloperStudio 2013.
    Currently, the size of the earth_africa string is reported as 2
    on Windows.  But I think that may be 2 16-bit characters.

commit 1780fc4fcf6aa7ed6a979b866d7d5055c073b18e
Author: David Neto <dneto@google.com>
Date:   Mon Oct 26 15:43:12 2015 -0400

    Update to latest registered generator enums
    
    The registry is at:
    https://www.khronos.org/registry/spir-v/api/spir-v.xml

commit f731cbf6c4112a9f5a4328e8469ff3a0867ce56b
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Fri Oct 23 09:53:58 2015 -0400

    Added set_bits<> to bitutils.
    
    This allows us to get a constant with the given bits set at
    compile-time. This is needed for a future patch for HexFloat.

commit e169a7cd861892b07652586ba0cb1b9d41dafe92
Author: David Neto <dneto@google.com>
Date:   Thu Oct 22 13:24:41 2015 -0400

    Test cleanup: remove useless std::string constructor

commit b998c813158b3b498d11857bfd6e22beb40449e4
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Oct 21 10:22:05 2015 -0400

    Use typedef instead of using in libspirv.h.
    
    The header file should be compatible with pre-C++11 code.

commit 913e31f442bd97cba4121836d4bb3471ff0a4a71
Merge: 31e482cd 486a8d0a
Author: Kenneth Benzie <k.benzie@codeplay.com>
Date:   Tue Oct 27 06:14:44 2015 -0400

    Merge branch 'google-asm-dis-oct-25' into 'master'
    
    Google assembler disassembler catchup to oct 25
    
    Catches up with the google branch through 2015-10-25:
    
    * SPIR-V 0.99 Rev32
       * Core instructions, enumerants, and capabilities
    * GLSL std450 extended instructions supported
    * OpenCL extended instruction supported, version 1.0 Revision 1
    
    See readme.md for missing features and known bugs, e.g.
    * Fix disassembler support for non-32 bit numeric literals
    * Fix: Assembler can't use extended instructions from two different imports
      in the same module
    * TODO: 16-bit floating point literals
    
    See merge request !10

commit 486a8d0a2bd402bc7ffc67a09cff9cbfa1a067d5
Author: David Neto <dneto@google.com>
Date:   Mon Oct 26 12:57:40 2015 -0400

    Fix readme: this is not the 'google' branch

commit d846247fd2d1cb01a009f57f81800aa882657ecd
Author: Dejan Mircevski <deki@google.com>
Date:   Wed Oct 21 09:26:54 2015 -0400

    Fix GMOCK directory in CMakeLists.txt.

commit fe6527fd80518b680c193230f10bd1c7dd3ef7fb
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Tue Oct 20 10:32:09 2015 -0400

    Fixed typo in utf8 string literal

commit 4274f9306517843e6a30f9fd9b2def9236ccb5b7
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Tue Oct 20 09:12:32 2015 -0400

    Fixed UTF-8 encoding issues on windows.
    
    Also cleaned up some warnings related to implicit size_t/uint64_t
    conversions.

commit 157e41bf5764b2931b4a1f7b11c9f608790ce61b
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Fri Oct 16 15:11:00 2015 -0400

    Added type tracking to the disassembler.
    
    TODO: Actually use the tracked types to make sure that we print out
    values correctly.

commit d16ee3b42891f630b4bb07c7c8f7c737014ab660
Author: David Neto <dneto@google.com>
Date:   Fri Oct 16 14:44:40 2015 -0400

    Update readme: Support OpenCL, UTF-8 literal strings

commit 4942a318f4dce6b19c03effd9f161aaac9af4c7f
Author: David Neto <dneto@google.com>
Date:   Thu Oct 15 14:15:34 2015 -0400

    Remaining tests for OpenCL extended instructions.

commit 445ce4401d2a2ad8873981266be06848f420db12
Author: David Neto <dneto@google.com>
Date:   Thu Oct 15 15:22:06 2015 -0400

    Add operand type for extension instruction number
    
    This is required to support extended instructions that
    have literal numbers as operands.  An example is OpenCL's
    vloadn.
    
    The previous code in the assembler assumed that *any* literal
    number argument in any part of an OpExtInst must be the name
    of the extended instruction.  That's true only for the first
    literal number argument.

commit 1bb8b70341f390c29be49d7e844020e44f542e49
Author: David Neto <dneto@google.com>
Date:   Fri Oct 16 14:16:00 2015 -0400

    Use literal integers for OpenCL extended instructions.

commit 21c4ad4b2243d92614aa5a1abc7401ef4bfd9bd4
Author: David Neto <dneto@google.com>
Date:   Wed Oct 14 17:02:11 2015 -0400

    Add OpenCL extended instructions.
    
    Versions 1.2, 2.0, and 2.1 all use the same
    extended instruction list.
    
    Updated the source code patch for the SPIR-V doc generator,
    so it can both generate the core syntax table, and also the
    OpenCL extended instructions table.
    
    Tested the Math and Common functions.
    TODO: test the remaining entries.

commit ccc210b4cc0c01c96184aab044986095bf9ea2d2
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Fri Oct 16 10:23:42 2015 -0400

    Some minor clean-ups to binary.{h,cpp}.
    
    Removed spvBinaryDecodeOpcode and spvBinaryDecodeOperand from the public
    interface since they were only ever used in binary.cpp.
    
    Replaced the usage of spv_operand_table_t and it's ilk with the
    AssemblyGrammar to reduce the number of passed parameters.
    
    Fixed typo in comment.

commit 6483bd7132400d75c73ad1efe8c163f5fb4d25e8
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Oct 14 17:02:39 2015 -0400

    Enforce suitable literal number operands to be unsigned integers.
    
    Except for OpConstant and OpSpecConstant, all other literal number
    operands are indeed unsigned integers. So,
    
    * Rename all *LITERAL_NUMBER* operand types to *LITERAL_INTEGER*.
    * Expect unsigned integers for *LITERAL_INTEGER* operands.
    * Keep MULITPLE_WORD_LITERAL untouched since it is only used by
      OpConstant and OpSpecConstant.
    
    And we want to provide the capability to specify floating-point
    numbers after !<integer> in the alternate parsing mode. So,
    OPTIONAL_LITERAL_NUMBER is reserved for OPTIONAL_CIV.

commit 5d65ea726c15b51c63480cf97c5013a717ff6b10
Author: David Neto <dneto@google.com>
Date:   Fri Oct 16 11:15:04 2015 -0400

    Git ignore compile_commands.json in root directory.
    
    Useful for standalone development of SPIR-V Tools with
    Ninja and YouCompleteMe.

commit 62f92cdae6f2c4d4c75fa00d9afa004b82049a55
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Oct 16 10:05:46 2015 -0400

    Use normal string instead of raw string for simple strings.

commit 4c2db8347ec71afca48b90cc4ad0f740bccedbc3
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Oct 15 15:20:45 2015 -0400

    Simplify methods for compilation failure in test framework.
    
    Remove  CompileWithFormatFailure() and make CompileFailure() accept
    a default argument.

commit 005a11a4ac03a6d709c42fbad2421587b08c1179
Author: David Neto <dneto@google.com>
Date:   Thu Oct 15 16:43:14 2015 -0400

    Use SPIRV_PERF=1 when performance tuning.
    
    It tells the compiler to keep frame pointers, so you have good
    call stacks in your profiles.

commit 980b7cb95ea6ccc3475df5b368ae36f9fe1d17ee
Author: David Neto <dneto@google.com>
Date:   Thu Oct 15 16:40:04 2015 -0400

    Avoid strlen in a loop, for speed.

commit 9e11c7d301ed18d4fb6c24edfb0ea5fcb49a9056
Author: David Neto <dneto@google.com>
Date:   Thu Oct 15 14:34:07 2015 -0400

    Fix Android build: use std::numeric_limits<T>::max and friends
    
    UINT32_MAX and friends are not available.

commit 470405e0ed2015d419951384f722a43b322ce989
Author: David Neto <dneto@google.com>
Date:   Wed Oct 14 14:40:24 2015 -0400

    Add disabled tests for disassembler literal emission
    
    Currently, negative numbers are printed as if they were
    first statically cast to unsigned.

commit e59e6b72f948bb6b74134ef98b0d095452ff15ea
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Wed Oct 14 14:18:43 2015 -0400

    Added proper string escaping to the disassembler.
    
    The disassembler now generates correct string when encountering
    quotes and slashes.

commit 51013d15ee86360489309ca0d9c385f8b4e9f871
Author: David Neto <dneto@google.com>
Date:   Wed Oct 14 11:31:51 2015 -0400

    SPV_FAILED_MATCH error mutes DiagnosticStream.
    
    The DiagnosticStream will not emit the accumulated message
    text if the error is SPV_FAILED_MATCH.
    
    Change various interfaces to accept the intended error
    code instead of a boolean "is_optional".  This allows
    us to avoid repeating the following type of logic deep
    inside helper methods:
    
      if (is_optional) return SPV_FAILED_MATCH;
      return diagnostic() << " message text ";

commit f08c679e9798c7ab3e5ab5d225a3c0e911ccaaf6
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Wed Oct 14 13:21:50 2015 -0400

    Removed un-needed comments and fixed merge issue.

commit 3e69cd1b9fd6f41c256294a72ef7ba0ee951d5f3
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Wed Oct 14 12:44:19 2015 -0400

    Updated string escaping in the assembler.
    
    Strings are now escaped correctly when assembling.
    TODO dissassembler support for strange strings (newlines for example).

commit daf493b2027ba5b807de974a9a33303a7483f9d1
Author: David Neto <dneto@google.com>
Date:   Wed Oct 14 12:18:41 2015 -0400

    Update readme. Long instructions, literal number encoding

commit 497b226c68cf5feb546151f3932db50b28b3c89c
Author: Dejan Mircevski <deki@google.com>
Date:   Tue Oct 13 17:35:15 2015 -0400

    Add negative-coverage location to operand-class-test-coverage.csv.

commit 78e677b5cd57815ab7f9e7a391aa7f47aceb8b1b
Author: David Neto <dneto@google.com>
Date:   Mon Oct 5 13:28:46 2015 -0400

    Parse and encode literal integers to the right width
    
    Affects OpConstant, and OpSwitch.
    
    Adds constant libspirv::kUnknownType for readability.
    
    Adds tests for hexadecimal number parsing.
    
    Updates syntax.md to describe hex parsing, including
    sign extension.

commit 6274120eb9f4c4f53f5d5f6637916eea1da0d5af
Author: David Neto <dneto@google.com>
Date:   Tue Oct 13 15:51:12 2015 -0400

    Add AssemblyContext::parseNumber
    
    It parses a text string for a value of a given target type.

commit ac508b0d80087582f9c32b54e467f539d5ab04c8
Author: David Neto <dneto@google.com>
Date:   Fri Oct 9 15:48:09 2015 -0400

    DiagnosticStream can convert to a stored error code
    
    Use this to shorten error return code in the assembler.
    
    For example, change this:
    
       if (error = something()) {
          diagnostic() << " Bad integer literal " << value;
          return SPV_ERROR_INVALID_VALUE;
       }
    
    to this:
    
       if (error = something())
          return diagnostic() << " Bad integer literal " << value;
    
    Also shorten code due to the fact that binaryEncodeU32 and
    binaryCodeU64 can't fail (short of failure to expand a std::vector).

commit cc936dc61321abe51e285bc1bf21d8b017ebd8ff
Author: Dejan Mircevski <deki@google.com>
Date:   Tue Oct 13 16:00:01 2015 -0400

    Negative test for FunctionControl.

commit 2fc334c7014d886ec71b652b12babe06c954fc03
Author: Dejan Mircevski <deki@google.com>
Date:   Tue Oct 13 15:53:46 2015 -0400

    Negative test for LoopControl.

commit 8386c57d0c99b62a747751ce5831a812b4d747e0
Author: Dejan Mircevski <deki@google.com>
Date:   Tue Oct 13 15:49:53 2015 -0400

    Negative test for SelectionControl.

commit c002213d957a6b302b7e4a7f60d6c22d8d1d7484
Author: Dejan Mircevski <deki@google.com>
Date:   Tue Oct 13 16:32:38 2015 -0400

    Negative test for GroupOperation.

commit 9d0c8135476f4c5421d357dea9b268cf647c2286
Author: Dejan Mircevski <deki@google.com>
Date:   Tue Oct 13 15:22:01 2015 -0400

    Negative test for LinkageType.

commit d7b0f83bd1c770470c6d33d229b786892064cb9a
Author: Dejan Mircevski <deki@google.com>
Date:   Tue Oct 13 15:39:38 2015 -0400

    Negative test for BuiltIn.

commit 10fa49cd4b53f8c2dd137b70e047b3223af754a4
Author: Dejan Mircevski <deki@google.com>
Date:   Tue Oct 13 15:25:31 2015 -0400

    Negative test for AccessQualifier.

commit 212ba355a688f21aaf26c7570f7cb4b3da36e9d3
Author: Dejan Mircevski <deki@google.com>
Date:   Tue Oct 13 15:30:18 2015 -0400

    Negative test for FuncParamAttr.

commit 374616d98f826da670832f216668657dc783500b
Author: Dejan Mircevski <deki@google.com>
Date:   Tue Oct 13 15:35:49 2015 -0400

    Negative test for Decoration.

commit c0eb22504443b1a7cf51605b815affd11bf898ab
Author: Dejan Mircevski <deki@google.com>
Date:   Tue Oct 13 15:15:54 2015 -0400

    Negative test for FPRoundingMode.

commit 355cc0c67856cc6cd3cd20623d9d4c7fab3625c6
Author: Dejan Mircevski <deki@google.com>
Date:   Tue Oct 13 15:02:03 2015 -0400

    Negative test for FPFastMathMode.

commit 971b344150fa9e70eb8b6561dc6cd2a4106af099
Author: Dejan Mircevski <deki@google.com>
Date:   Tue Oct 13 12:54:47 2015 -0400

    Negative test for ImageFormat.

commit d062f8b09720c4b437a31202b4367e3de6e2698d
Author: Dejan Mircevski <deki@google.com>
Date:   Tue Oct 13 12:46:13 2015 -0400

    Make compilation input strings const.
    
    Also rerun clang-format.

commit 57c4398759ccc48b33aeb61b114fc02deeebec4a
Author: Dejan Mircevski <deki@google.com>
Date:   Tue Oct 13 12:38:20 2015 -0400

    Negative test for SamplerFilterMode.

commit 1e128260cbb792db4202af15fe20d3b0f1885c28
Author: Dejan Mircevski <deki@google.com>
Date:   Tue Oct 13 11:51:11 2015 -0400

    Negative test for SamplerAddressingMode.

commit f8e091af3db02800f0667777fcf136e82304e2d1
Author: Dejan Mircevski <deki@google.com>
Date:   Tue Oct 13 14:41:31 2015 -0400

    Clarify handling of OperandImageOperands.

commit 63af6fd409de8a2be0004ebf815f62339a986413
Author: Dejan Mircevski <deki@google.com>
Date:   Tue Oct 13 14:47:22 2015 -0400

    Negative test for ImageOperands.

commit 2fd3792c3a3b50ee20274f013d133c837605de5b
Author: Dejan Mircevski <deki@google.com>
Date:   Tue Oct 13 11:46:09 2015 -0400

    Negative test for Dim.

commit 52ff534040b9ff9a10678401b0a8ef1334f81d93
Author: Dejan Mircevski <deki@google.com>
Date:   Fri Oct 9 16:48:28 2015 -0400

    Test OpTypeForwardPointer.

commit 537e77663d9a9196509f112d09c880fd5fa0bf5b
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Tue Sep 29 11:28:34 2015 -0400

    Added tracking to types and validated certain instructions.
    
    We need to know how to generate correct SPIRV for cases like
    OpConstant %int64 42 since the current parser will encode the 42 as a
    32-bit value incorrectly.
    
    This change is the first of a pair. This one tracks types, and makes
    sure that OpConstant and OpSpecConstant are only ever called with
    Integer or Float types, and OpSwitch is only called with integer
    generating values.

commit 9db3a538974fa14dcc3d480d5d4288820b42e4e6
Author: David Neto <dneto@google.com>
Date:   Wed Oct 7 16:58:38 2015 -0400

    Remove spv_opcode_flags_t and flags fields.
    
    The flags fields in both spv_opcode_desc_t and spv_operand_desc_t
    are redundant with the capabilities mask field in the same
    structure.

commit 725cc2a2dfa8416bdd294081dbc3a533c38d6852
Author: Dejan Mircevski <deki@google.com>
Date:   Fri Oct 9 14:29:07 2015 -0400

    Negative test for ExecutionMode.

commit 865034263daabbcf278447785dbcf7ee75075930
Author: Dejan Mircevski <deki@google.com>
Date:   Fri Oct 9 14:21:03 2015 -0400

    Negative test for AddressingModel, MemoryModel.

commit 2d6796d45de31538e7c3b13f64a117879853009a
Author: Dejan Mircevski <deki@google.com>
Date:   Fri Oct 9 13:44:22 2015 -0400

    Negative test for ExecutionModel.

commit d2c81cf34afd0372d13561d728132882900a49f2
Author: Dejan Mircevski <deki@google.com>
Date:   Fri Oct 9 11:06:10 2015 -0400

    Negative test for SourceLanguage.
    
    Also, use "class" instead of "type" in the coverage CSV.

commit f6b865110cf6f810ccf95ad4627c85f44ddca028
Author: David Neto <dneto@google.com>
Date:   Thu Oct 8 15:20:25 2015 -0400

    Accept long UTF-8 Literal Strings

commit b5dc8fcd5d1276d342c7dfc4452f46609b0cab7d
Author: David Neto <dneto@google.com>
Date:   Tue Oct 6 16:22:00 2015 -0400

    Support strings with up to 65535 chars, and null.
    
    Move the definition of spv_instruction_t to an internal
    header file, since it now depends on C++ and is not
    used by the external interface.
    
    Use a std::vector<uint32_t> in spv_instruction_t
    instead of a fixed size array.

commit ee5104286f317f390598859e17c24f061e51be78
Author: David Neto <dneto@google.com>
Date:   Wed Oct 7 10:11:39 2015 -0400

    Remove stale TODO. Fix use of OpCode to 'instruction'

commit 21aac5c6534c791578102a4c536228d124868e52
Author: David Neto <dneto@google.com>
Date:   Tue Oct 6 14:35:43 2015 -0400

    Update readme: capabilities are up to date

commit 8b19f27026332382a69a04ec66f9991ab5f33e75
Author: David Neto <dneto@google.com>
Date:   Fri Oct 2 16:09:43 2015 -0400

    Define spv_capability_mask_t for readability.

commit 1b9d70a31763be4c364be517a92b4d76cee256aa
Author: David Neto <dneto@google.com>
Date:   Mon Oct 5 09:55:23 2015 -0400

    Test capabilities for enums sections 3.21-3.31
    
    Fixes dependencies among capabilities.  (The table should store
    the mask of capabilites, not the capability enum.)
    
    Remove the old spot check test for capabilities of enums.

commit ddda85a5c519a8d9148cb153f73fb0316978b1fb
Author: David Neto <dneto@google.com>
Date:   Fri Oct 2 17:10:10 2015 -0400

    Fix capabilities for enums in Rev32, sec 3.3-3.20

commit 3d2bf532949bb0c38edf7fde0ef2464bbff48e17
Author: David Neto <dneto@google.com>
Date:   Thu Oct 1 16:58:17 2015 -0400

    Move AutoText and EnumCase into spvtest namespace
    
    Also fix using declaration order.
    Also put a few tests into the anonymous namespace.

commit 104da61432c17f0efe59553989c83f811c7df433
Author: David Neto <dneto@google.com>
Date:   Thu Oct 1 17:28:56 2015 -0400

    Update readme: Finish assembler !<integer> support
    
    Also internal cleanups and additional tests.

commit 78f6a4a64990947beeec7e6ce3401ba835d1a377
Author: Dejan Mircevski <deki@google.com>
Date:   Fri Oct 2 01:35:19 2015 -0400

    Test operand-table capabilities.

commit e3296f09459b315d6df93c757654ea7945433cf9
Author: David Neto <dneto@google.com>
Date:   Thu Oct 1 16:43:08 2015 -0400

    Add TODO for fixing endianness testing.
    
    Currently it uses a union, a write to one field, and read from
    another of a different type.
    
    Moves the endianness-determining macro close to the variable
    it references.

commit 287fdb0eb080d2a02b54543835edb78abf3b469e
Author: David Neto <dneto@google.com>
Date:   Thu Oct 1 13:46:38 2015 -0400

    Test SPV_CAPABILITY_AS_MASK macro

commit 0cd7352d7d4d10783639ea3ee069f1fdef8d44aa
Author: David Neto <dneto@google.com>
Date:   Thu Oct 1 11:24:11 2015 -0400

    Use 3-arg MakeInstruction to reduce logic in tests
    
    Avoids open-coded vector inserts and two variables in various
    tests.  Should improve readability.

commit 924997dc7f3669d14be9c53402c7d776ffed235f
Author: Dejan Mircevski <deki@google.com>
Date:   Thu Oct 1 09:43:05 2015 -0400

    Test opcode table capability entries.

commit 205408bae4f22c301ca9ce41bfd60c499583dd10
Author: Dejan Mircevski <deki@google.com>
Date:   Wed Sep 30 16:42:34 2015 -0400

    Make capabilities a bitfield in opcode/operand tables.

commit 4170ceca129b3791aa0619d24f88b72466acb44c
Author: Dejan Mircevski <deki@google.com>
Date:   Wed Sep 30 10:35:26 2015 -0400

    Create spv_language_capabilities_t and widen capabilities fields.
    
    If this is acceptable, I'll do a wholesale switch of operand and opcode
    definitions to capability bitfields.

commit ff5dce48a17d4b1b27f0edc9300418a96d01d143
Author: David Neto <dneto@google.com>
Date:   Wed Sep 30 11:44:34 2015 -0400

    Add assembler test for OpEnqueueKernel.
    
    Adds a form of spvtest::MakeInstruction which takes two vectors
    of operands.  That leads to simpler test code.
    We can clean up some other test code, in another CL.

commit 114206e0bc9686af69f9459fd2e9c9db99c4b39c
Author: Dejan Mircevski <deki@google.com>
Date:   Wed Sep 30 09:49:00 2015 -0400

    Clarify !<integer> parsing.
    
    Implement some outstanding feedback from
    Ic29c5a4a8178a62a5a1acad13d02f19cc1307097:
    
     - use "token" instead of "word" when referring to assembly text
    
     - specify how the numbers are parsed
    
    Add a test for negative numbers.

commit 97e2c8fc3d3aecc21709a6a4719aed26a5ecc34d
Author: Dejan Mircevski <deki@google.com>
Date:   Tue Sep 29 17:58:37 2015 -0400

    Try to fix the Android build.

commit 14c4b10d4441c6583d8e1d966df44c45e4540925
Author: Dejan Mircevski <deki@google.com>
Date:   Tue Sep 29 17:07:21 2015 -0400

    Detect overflow in !<integer>.

commit 8bed0cea131ec5e791b8a78ce1baf821aecdf0b2
Author: David Neto <dneto@google.com>
Date:   Tue Sep 29 14:22:02 2015 -0400

    Add a .csv showing test coverage for operand class
    
    It shows which spv::OperandClass values are used in
    the syntax table in source/opcode.inc, and what tests
    exercise those operand types.

commit 897bff924a713c4d36ffa1686bb6a0d14edeb674
Author: Dejan Mircevski <deki@google.com>
Date:   Tue Sep 29 10:38:18 2015 -0400

    Simplify (and test) the alternate-parsing pattern.

commit 42bfd4bfab1272c79983506a44922682577c7a51
Author: David Neto <dneto@google.com>
Date:   Mon Sep 28 15:02:21 2015 -0400

    Assembly test for OpSwitch
    
    Removes old weak and fragile tests for OpSwitch.
    
    Adds spvtest::TextToBinaryTest::CompileWithFormatFailure

commit e77a7dd821dc389004d7087b2a07301600c4b5e2
Author: David Neto <dneto@google.com>
Date:   Mon Sep 28 16:00:42 2015 -0400

    Assembly failure cases for OpMemoryBarrier
    
    Fully tests OperandMemorySemantics from the syntax table.

commit cb3db4327d4f80cad2a52306bfd59d33b1df62ea
Author: David Neto <dneto@google.com>
Date:   Mon Sep 28 16:14:28 2015 -0400

    Assembler failing cases for OpCapability

commit 7cefb23ddbdfaf780f491226d1510ac5c5dd85eb
Author: David Neto <dneto@google.com>
Date:   Mon Sep 28 15:33:49 2015 -0400

    Document non-use of certain operand types
    
    Operand class enum values not used in the syntax table:
    - Image channel order: only used to describe a return value
    - Image channel type: only used to describe a return value
    - "Image operands": used to make a section in the spec
      to describe values used to construct an optional image id,
      but does not itself appear in the syntax table.
    
    Removes some TODOs from opcode.cpp.

commit 71fc05587bc0288de2c183b246e722eb4f740964
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Thu Sep 24 10:26:51 2015 -0400

    Refactored dynamic and static state out of text processing.
    
    This reduces the number of arguments required to be passed
    to every single function. This is in preparation for adding
    id tracking.

commit 50babb2d00f4a71b37629b4847781e1c109f2a43
Author: Dejan Mircevski <deki@google.com>
Date:   Tue Sep 29 10:56:32 2015 -0400

    Run clang-format.

commit 903f9d6b704cc8e90f7f53d222223f54bee3da2d
Author: Dejan Mircevski <deki@google.com>
Date:   Mon Sep 28 17:04:39 2015 -0400

    Implement alternate-parsing mode for !<integer>.

commit e3940ab1666112bd109b3ef305d0b2485a06386b
Author: David Neto <dneto@google.com>
Date:   Mon Sep 28 16:47:21 2015 -0400

    Readme: capabilities for instructions are ok
    
    Capabilities for enumerants may be out of date.

commit 38acba2c3c02b166a7d58efe82567d385cda2b49
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Mon Sep 28 11:09:23 2015 -0400

    Updated syntax.md to remove references to % numerical ids.

commit 9672ad39cfafdcdf88ada2d2fd808b0530210d87
Author: Dejan Mircevski <deki@google.com>
Date:   Mon Sep 28 15:13:15 2015 -0400

    Remove isIdType(), which is now dead code.

commit c348d18486fcd82493929349cd1d39dbc3482afb
Author: David Neto <dneto@google.com>
Date:   Mon Sep 28 14:40:10 2015 -0400

    Test bad 2nd target to OpGroupMemberDecorate

commit 454f51fa4dc56ecaf0f8d35ca42729e9011ee616
Author: David Neto <dneto@google.com>
Date:   Mon Sep 28 14:09:29 2015 -0400

    Assembly test for OpGroupMemberDecorate
    
    Provides test coverage for OperandVariableIdLiteral
    from the syntax table in the file 'opcode.inc'.

commit 1b6f1960a8ffbee81210cfc5a88791401f18873a
Author: Dejan Mircevski <deki@google.com>
Date:   Mon Sep 28 11:51:32 2015 -0400

    Uncomment some !<integer> tests.

commit d83179af7ecaf138b40877b2bdb47a01f4a416cc
Author: David Neto <dneto@google.com>
Date:   Mon Sep 28 11:37:57 2015 -0400

    Cleanup: Use EnumCase in OpDecorateSimpleTest

commit ab778dc1dc7a08bcdcbdb2d99b0354bdb2bf8980
Author: David Neto <dneto@google.com>
Date:   Mon Sep 28 11:22:23 2015 -0400

    Cleanup: Use EnumCase for ExecutionMode test

commit 54b2ea1088b249aca6ed12c5098a00b412ea9ecd
Author: David Neto <dneto@google.com>
Date:   Mon Sep 28 10:56:16 2015 -0400

    Assembler test for optional operands of OpSource
    
    These are the first tests to cover OperandOptionalId
    and OperandOptionalLiteralString from the grammar in
    opcode.inc

commit 561dc4e975d16304d5cf55bbbbcf7fbc60c4c7a0
Author: David Neto <dneto@google.com>
Date:   Fri Sep 25 14:23:29 2015 -0400

    Remove SPV_OPERAND_TYPE_LITERAL
    
    All uses of OptionalLiteral by the SPIR-V spec are used
    for literal numbers.
    
    Also rename:
    - SPV_OPERAND_TYPE_OPTIONAL_LITERAL to
      SPV_OPERAND_TYPE_OPTIONAL_LITERAL_NUMBER.
    - SPV_OPERAND_TYPE_VARIABLE_LITERAL to
      SPV_OPERAND_TYPE_VARIABLE_LITERAL_NUMBER.
    - SPV_OPERAND_TYPE_VARIABLE_LITERAL_ID to
      SPV_OPERAND_TYPE_VARIABLE_LITERAL_NUMBER_ID.
    - SPV_OPERAND_TYPE_VARIABLE_ID_LITERAL to
      SPV_OPERAND_TYPE_VARIABLE_ID_LITERAL_NUMBER.
    - SPV_OPERAND_TYPE_LITERAL_IN_OPTIONAL_TUPLE to
      SPV_OPERAND_TYPE_LITERAL_NUMBER_IN_OPTIONAL_TUPLE.

commit f1b64716704d5d45605a4c5a26dda085d8111132
Author: David Neto <dneto@google.com>
Date:   Fri Sep 25 14:52:17 2015 -0400

    Dissasembler test showing reordering of masks

commit b14a727a30f69f47df96b2ade8859cbb0683f95b
Author: David Neto <dneto@google.com>
Date:   Fri Sep 25 13:56:09 2015 -0400

    Execution scope, memory semantics operands are IDs
    
    They shouldn't be parsed or printed as masks.

commit 619db2612e12186a665b33393e39d0f14049812a
Author: David Neto <dneto@google.com>
Date:   Fri Sep 25 12:43:37 2015 -0400

    Disassembler support for mask expressions.

commit e4eba63932bd99ed0f80efada0a2a6a72fc12275
Author: David Neto <dneto@google.com>
Date:   Thu Sep 24 10:47:08 2015 -0400

    Update Readme: Support Rev32; IDs never alias

commit bfa3d86f7bd018d866f47a8e6670ca39da1fcd67
Author: David Neto <dneto@google.com>
Date:   Fri Sep 25 10:30:27 2015 -0400

    Memory semantics Relaxed is a synonym for None
    
    The disassembler should prefer to print Relaxed,
    I think. (Untested.)

commit 212bafe4da1c1156aade5aca6ad4ad50339bf324
Author: David Neto <dneto@google.com>
Date:   Thu Sep 24 17:11:15 2015 -0400

    Assembler tests for remaining Debug instructions
    
    OpString, OpName, OpMemberName, OpLine, OpNoLine,
    OpSourceContinued.

commit e0890da60380d83fae86fdd59ff4f589290238fd
Author: David Neto <dneto@google.com>
Date:   Thu Sep 24 15:45:59 2015 -0400

    Update core instruction syntax to Rev32
    
    Many instructions added and a few changed structure.
    
    Workarounds:
    - Some operands can be enabled by either one of two
      capabilities.  The spv_operand_desc_t does not handle that
      now. For now just select the first one.
    
    Fixes to tests:
    - OpLoopMerge now takes a mandatory continue target.
    - OpTypePipe drops the type argument.  Pipes are opaque.
    - OpLine no longer takes a target ID argument.
    
    The ID validator was fixed the OpLine and OpTypePipe
    changes.  Those were the only ID validator tests affected.
    
    The patch to the spec doc generator was updated so it handles
    the two-capability case, even if in an hacky way.

commit 6b31ce4d5055b35449b1f58b5f33120302c9d00c
Author: David Neto <dneto@google.com>
Date:   Thu Sep 24 17:10:35 2015 -0400

    Assembler test TODOs for image instructions.

commit d768798d48b864f3a5bdfdd0531ef601b44b7647
Author: David Neto <dneto@google.com>
Date:   Wed Sep 23 14:59:27 2015 -0400

    Assembler supports new decorations in Rev32
    
    They are:
     - NoContraction
     - InputTargetIndex
     - Alignment

commit 863ddbeeaa1d66f24fa824b630a41776a8f753c5
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Sep 23 17:09:01 2015 -0400

    Rev32: Remove DepthAny and mark Xfb as requiring TransformFeedback.

commit d30b2331a380cf45fd1e4215cbda593fe0f753ad
Author: David Neto <dneto@google.com>
Date:   Wed Sep 23 16:04:24 2015 -0400

    Fix Capability dependencies on capabilities, Rev32

commit c66f5074e23a979ea2b2242f71c13b7068def43b
Author: David Neto <dneto@google.com>
Date:   Wed Sep 23 15:44:02 2015 -0400

    Assembler support for new capabilities in Rev32

commit 8576c9c327154f47e6112653d2da4ab78731f968
Author: David Neto <dneto@google.com>
Date:   Wed Sep 23 14:32:37 2015 -0400

    Support Image operand MinLod

commit 2d1b5e5bbabbcd43de762750a2fded17a4c29c1e
Author: David Neto <dneto@google.com>
Date:   Wed Sep 23 15:35:27 2015 -0400

    Assembler supports new builtins in Rev32
    
    They are VertexIndex and InstanceIndex.

commit 49c299b0944be6b7e96a2e4cc954ed07b145523b
Author: David Neto <dneto@google.com>
Date:   Wed Sep 23 15:38:59 2015 -0400

    Assembler support for Nontemporal memory access

commit 85c6f7908109bf1fd81cb27e18fc919bfe8bd526
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Sep 23 15:42:18 2015 -0400

    Define two macros to simplify code for ExecutionMode operands.

commit c09d3857ffa224b703642e8d2e388d7eac3f6aa0
Author: David Neto <dneto@google.com>
Date:   Wed Sep 23 16:57:05 2015 -0400

    Fix permissions on test/TextToBinary.Barrier.cpp

commit aa0c3a5c07a5f01d20987aa49ddbaf9664477734
Author: David Neto <dneto@google.com>
Date:   Wed Sep 23 10:30:06 2015 -0400

    Support Dim InputTarget

commit 9819adf4cb517fc8896895754cb99e1a3314ca33
Author: David Neto <dneto@google.com>
Date:   Wed Sep 23 10:19:57 2015 -0400

    Support StorageClass PushConstant

commit 3e52dd915da171ec38ae53ca66d00fdc5393a416
Author: David Neto <dneto@google.com>
Date:   Wed Sep 23 10:16:39 2015 -0400

    Support ExecutionMode IndependentForwardProgress

commit 16df562ad3e3105f2cacde62fb83b5210af66258
Author: David Neto <dneto@google.com>
Date:   Wed Sep 23 10:07:17 2015 -0400

    Assembler test for Memory Semantics enum
    
    Enables mask expression parsing for Memory Semantics arguments,
    e.g. on OpMemoryBarrier.

commit 13804e5d63acab8b0cd29a81e0a94a96ec0c8f85
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Tue Sep 22 15:50:33 2015 -0400

    All values now represent symbolic names instead of mixed with numeric.
    
    Also removed un-necessary heap-allocation of spv_named_id_table.
    This removed the necessity to expose a function to create/destroy it
    and simplified the interface.

commit a66952d38c99add8cbe82ced879fbdb293f9f994
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Sep 23 11:11:05 2015 -0400

    Remove executable file mode bits on source files.

commit dbaf40718a760a6e5b611d9828120162e24c1484
Author: David Neto <dneto@google.com>
Date:   Tue Sep 22 16:23:06 2015 -0400

    Update to Rev32 headers. Part 1.
    
    Just enough fixes to code make it build and pass tests.
    
    Core changes:
     - Fix spelling for: NoPerspective, NonWritable, NonReadable,
     - Remove NoStaticUse, RelaxedMask
    
    GLSL changes:
     - Fixed spelling for: InverseSqrt, FaceForward, MatrixInverse,
       SmoothStep, FindILsb, FindSMsb, FindUMsb
     - Replace Mix with IMix and FMix
     - Remove AddCarry, SubBorrow, MulExtended
    
    Replace header OpenCLLib.h with OpenCL.std.h
    
    TODO:
     - Regenerate the core instruction syntax table (source/opcode.inc)
     - Add test coverage for new enums and instructions.

commit e0d351b3ad78ee3dd323301cefbc5977d8d47c03
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Tue Sep 22 15:49:27 2015 -0400

    Switched VecTypeHint to take a LiteralNumber instead of an ID

commit fabeeb863b8d62b4bcc0044985fee37c7451d923
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Tue Sep 22 11:54:48 2015 -0400

    Removed duplicate code due to what looks like a merge issue

commit 74af05f012bf7cee9a9c1dc8672a52f0692d72a1
Author: David Neto <dneto@google.com>
Date:   Mon Sep 21 17:16:45 2015 -0400

    Cleanups for EnumCase
    
    Make it a class, since it has non-trivial behaviour for converting
    the enumerated value to a uint32_t value. (Comply with style guide.)
    
    Merge EnumCaseWithOperands into EnumCase.

commit 1b5fd4962ee3c9fedfe1bb0c7b2e9c2cba637218
Author: David Neto <dneto@google.com>
Date:   Mon Sep 21 11:36:44 2015 -0400

    Put the test fixture into spvtest namespace.
    
    All test utility code should go into the spvtest namespace.

commit 815cb952470cad8c0f333f6c6fbadb46840a8662
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Fri Sep 18 13:41:49 2015 -0400

    Fix MSVC build for boolean opeartions on enums.

commit cde47431bd303e1a2e7b4bb143baa4f2d89a4290
Author: David Neto <dneto@google.com>
Date:   Fri Sep 18 13:34:58 2015 -0400

    Fix the Supported Features section.

commit a570570e17ffbe50c2206ae76bfc209baf86b5f5
Author: David Neto <dneto@google.com>
Date:   Fri Sep 18 11:34:25 2015 -0400

    Readme: Assembler supports all of Rev31, for 32-bit code
    
    Also say that we have fixed problems building with MSVC 2013.
    Also document other recent changes.

commit d1dd2fbd7c9fc29f5744086c8e0b4bf9c0ed9c3c
Author: David Neto <dneto@google.com>
Date:   Fri Sep 18 12:08:36 2015 -0400

    Put const back on const char* in test case structs

commit f2d0775f1baa1e00df5ea63c8b651ae96488f67e
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Fri Sep 18 11:50:54 2015 -0400

    A bunch of small fixes to build in MSVC2013.
    
    Fixed an issue where some of the tests were testing
    the wrong word with the wrong operation. (| != ||).
    
    Coalesced the many versions of EnumCase into one.
    Added a get_value() to EnumCase to convert to a uint32_t.
    
    Replaces ASSERT_TRUE(pointer), with ASSERT_NE(nullptr, pointer),
    so that we do not do implicit pointer->bool conversion.
    
    Removed const from some test structs since gtest needs to be
    able to swap them.

commit ee1b3bb3bb6407ac2be848506061017455f9ab80
Author: David Neto <dneto@google.com>
Date:   Fri Sep 18 11:19:18 2015 -0400

    Assembler support for image operands from Rev31
    
    Rev32 and later add many more image operands, and
    rearrange their values.

commit 184c76dbafe22b61b5128664a7fffea826068d43
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Sep 17 18:24:53 2015 -0400

    Let EncodeAndDecodeSuccessfully remove preamble comments.

commit 6d41581c9301b1e433c125bafb525df4a5cbb15b
Author: Lei Zhang <antiagainst@google.com>
Date:   Tue Sep 15 13:36:21 2015 -0400

    Clean up code for encoding literal operands.

commit 3fca4cddee4b77f0f04bdcc1c79f3221679aa99d
Author: David Neto <dneto@google.com>
Date:   Thu Sep 17 17:39:45 2015 -0400

    Remove SPV_OPERAND_TYPE_VARIABLE_MEMORY_ACCESS
    
    If a memory mask operand is present, it is a mask.  The mask appears
    only once, so just use SPV_OPERAND_TYPE_OPTIONAL_MEMORY_MASK.
    
    The "variable literals" aspect comes into play as follows: if the
    Aligned bit is set in the mask, then the parser will be made to
    expect the alignment value as a literal number operand that follows
    the mask.  That is done through mask operand expansion.

commit 5bf88fcc95b996c34c14a58e6149368dd52669bb
Author: David Neto <dneto@google.com>
Date:   Thu Sep 17 17:06:10 2015 -0400

    Assembler: mask expressions where 1 bits imply operands
    
    Properly support a memory access mask with a combination
    of bits, including the Aligned bit. When the Aligned bit is
    set, the parser should expect an alignment value literal operand.

commit fbf5cf459175cdcb0a39d9e83342059759595380
Author: David Neto <dneto@google.com>
Date:   Thu Sep 17 14:02:11 2015 -0400

    Document the syntax of mask expressions

commit 36b0c0f6b3a350c73c9ca79244e420d424b670a2
Author: David Neto <dneto@google.com>
Date:   Wed Sep 16 18:32:54 2015 -0400

    Assembler support for simple mask expressions
    
    For example, support combining mask enums with "|",
    such as "NotNaN|AllowRecip" for the fast math mode.
    
    This is supported for mask values that don't modify the
    expected operand pattern:
     - fast math mode
     - function control
     - loop control
     - selection control
    
    TODO: disassembler support to print them as mask expressions.

commit 388c40d9c66983d9aa48dc9a69d6dcca441d3587
Author: David Neto <dneto@google.com>
Date:   Wed Sep 16 16:42:56 2015 -0400

    Generalize spvOperandTableNameLookup to take string length.
    
    This is preparation for parsing mask expressions.

commit e3a19c0d633bee53b873f8278d301b6bdc2076de
Author: Dejan Mircevski <deki@google.com>
Date:   Fri Sep 11 15:03:54 2015 -0400

    Forbid !<integer> preceding or succeeding '='.

commit b30a0c529bfc8c4d71ae536b4d014572c91e901a
Author: David Neto <dneto@google.com>
Date:   Wed Sep 16 15:56:43 2015 -0400

    Assembler test for Dim, ImageFormat enums.
    
    Adds SPV_OPERAND_TYPE_SAMPLER_IMAGE_FORMAT, and the
    translation tables for its values from the spv::ImageFormat values.

commit 8382de2670de2fed0599b1105066fe83e59409d5
Author: David Neto <dneto@google.com>
Date:   Wed Sep 16 16:16:22 2015 -0400

    Document inability to use names from 3.12, 1.13
    
    You can't use names from 3.12 Image Channel Order and
    3.13 Image Channel Data Type since in the intstruction grammar,
    they are only used as return values, but never named arguments
    to instructions.

commit f7ee0ca5da3ec8d5ecf13351ccac59a414fa0fd8
Author: David Neto <dneto@google.com>
Date:   Wed Sep 16 15:29:02 2015 -0400

    Use generalized EnumCase in AccessQualifier assembly tests
    
    This is in preparation for coming tests that will also
    use the templated EnumCase instead of making their
    own structs.
    
    Also reformat AccessQualifier test.

commit ba569fb1aa46a36f648d6717b1d3689e131a165d
Author: Dejan Mircevski <deki@google.com>
Date:   Fri Sep 11 16:34:49 2015 -0400

    Handle IDs among !<integer> operands.

commit 5f33d31d890bb1ac2b94460c87c556ba54d4e559
Author: David Neto <dneto@google.com>
Date:   Tue Sep 15 10:27:22 2015 -0400

    Assembler test for SamplerAddressingMode, SamplerFilterMode
    
    Uses OpConstantSampler instruction.

commit 5494dd43342b19a3f5760e1d809c482526426590
Author: David Neto <dneto@google.com>
Date:   Tue Sep 15 16:41:38 2015 -0400

    Assembler test for Storage Class enum values
    
    This covers the storage classes in SPIR-V Rev31.  Rev32 has more.

commit b41d150b7fefe5da4b4cbebd16bfa91ac0218a00
Author: Lei Zhang <antiagainst@google.com>
Date:   Mon Sep 14 15:22:23 2015 -0400

    Support multiple word literal numbers as constants.
    
    Add a new operand type SPV_OPERAND_TYPE_MULTIWORD_LITERAL_NUMBER
    to represent those operands that can expand into multiple words.
    Now only OpConstant and OpSpecConstant have such kind of operand.

commit cebad036f7ed60c69af057b72bbccea407e0ce4a
Author: David Neto <dneto@google.com>
Date:   Tue Sep 15 09:48:10 2015 -0400

    Update CHANGES and Future Work

commit fadbf6220e96501d2d0c48d89386bb3733da3cdd
Author: David Neto <dneto@google.com>
Date:   Mon Sep 14 17:07:11 2015 -0400

    Assembler test for ExecutionScope, with OpGroupIAdd
    
    Use spvOperandTypeStr to generalize the error message
    for failure to parse an ID.
    Extend spvOperandTypeStr to cover SPV_OPERAND_TYPE_EXECUTION_SCOPE.

commit abe51c414269b16d4b9cf89f239a44bc84efc8c0
Author: David Neto <dneto@google.com>
Date:   Fri Sep 11 22:35:04 2015 -0400

    Assembler test for OpTypePipe
    
    Covers all AccessQualifier enums.
    
    In Rev32, OpTypePipe no longer has a type argument.
    Added TODOs for this.

commit 4a29131dcddf89266cc0cfe23ddb3199d98d1631
Author: David Neto <dneto@google.com>
Date:   Mon Sep 14 15:08:48 2015 -0400

    Assembler test for single-valued Memory Access flag.

commit f4fde6c60d71a1974db05adbc019b1dcc8e4a9ed
Author: David Neto <dneto@google.com>
Date:   Mon Sep 14 14:50:37 2015 -0400

    Assembler test for single-valued FunctionControl mask
    
    Fixed name of "Inline" enumerant.
    
    Support for combinations of function control masks should come later.

commit 97afd5c03cab3f62dc3a94f0ef77254a2ed65879
Author: Lei Zhang <antiagainst@google.com>
Date:   Mon Sep 14 15:26:12 2015 -0400

    Remove useless variable.

commit c0b32ecb54388b4dcf69b7d08c85425c45b68713
Author: David Neto <dneto@google.com>
Date:   Mon Sep 14 14:33:08 2015 -0400

    Assembler test for single-valued LoopControl mask
    
    Support for combining masks should come later.

commit ad18c77ac9e9783ce5a571b313db367f6bfd87ad
Author: David Neto <dneto@google.com>
Date:   Mon Sep 14 14:28:33 2015 -0400

    Assembler test for single-valued SelectionControl mask
    
    Support for combining masks should come later.

commit d7aa15ff168e80d2ad23740fe79697ee51e2b3dd
Author: David Neto <dneto@google.com>
Date:   Mon Sep 14 13:56:45 2015 -0400

    Clarify the syntax. Some named enumerants are unusable
    
    You can't use a named enumerant if it's only meaningful
    in an operand supplied as an ID to a target instruction.
    The place where you'd use the name is something like an
    OpConstant, but there's not enough context to bring those
    names into scope, unless you're willing to tolerate
    potential collisions.
    
    Occurs for the names in:
    - 3.25 Memory Semantics
    - 3.27 Scope ID
    - 3.29 Kernel Enqueue Flags
    - 3.30 Kernel Profiling Info

commit 41bf0733c6dd7d39edf8ca1d8ebc572722239fba
Author: Lei Zhang <antiagainst@google.com>
Date:   Mon Sep 14 12:26:15 2015 -0400

    Simplify code for handling literals in disassembler.

commit 2136ff70cc524f164133d0ab57391a743bc761e9
Author: David Neto <dneto@google.com>
Date:   Mon Sep 14 13:05:53 2015 -0400

    Move the syntax description into its own file

commit c09932eb1ec91ec19bc590527c5f2fc567784736
Author: David Neto <dneto@google.com>
Date:   Mon Sep 14 12:09:17 2015 -0400

    Add patch for generating opcode.inc syntax table.

commit a94701db39775a54cbfef2fa49cc5b176bcd681c
Author: Lei Zhang <antiagainst@google.com>
Date:   Mon Sep 14 10:05:37 2015 -0400

    Run clang-format.

commit e8e3712c3b81fc2a2882feafae0d1cbfaf5ff115
Author: David Neto <dneto@google.com>
Date:   Fri Sep 11 13:55:57 2015 -0400

    Assembler test for OpExecutionMode

commit f6498bfc73d92f61092c71782cd2383afca1ca5b
Author: David Neto <dneto@google.com>
Date:   Fri Sep 11 13:36:02 2015 -0400

    Assembler test for OpEntryPoint

commit 58fc88e2eeaeb9c1fce3b68333c9c47b6eb97020
Author: Dejan Mircevski <deki@google.com>
Date:   Fri Sep 11 20:10:54 2015 -0400

    Simplify format indication in CompileSuccesfully().

commit 40056703632a700ba354190c558534c7d984fcbd
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Sep 11 14:31:27 2015 -0400

    Limit the use of spvCheck and spvCheckReturn to validator.
    
    spvCheck is indeed just an if-statement. Defining such a macro
    doesn't help much.

commit 7114ffea0615e4d3b30d1e57c7bbc41e8bf9da6c
Author: David Neto <dneto@google.com>
Date:   Fri Sep 11 15:16:43 2015 -0400

    Update readme with latest news.

commit 4e092d3ac391055d9150efebbb8741fb47a1e83b
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Sep 11 13:45:18 2015 -0400

    Move bitwisecast.h to source/ and add include guard.

commit a48678ab9280b5ee3ada48657689ff2e3e21ffd2
Author: David Neto <dneto@google.com>
Date:   Fri Sep 11 12:04:03 2015 -0400

    Fix an infinite loop during message generation.
    
    Rename getWord to spvGetWord and unit test it.

commit dbdf6e122c266df40c775844ef659fde5f5f1a4a
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Sep 11 11:56:09 2015 -0400

    Add option to change assembly syntax format in the dis tool.

commit f79519c92694a58759661140a39af4c513ce54f8
Author: Dejan Mircevski <deki@google.com>
Date:   Fri Sep 11 00:43:11 2015 -0400

    Handle operands when OpCode is !<integer>.

commit e994e2e283f6c9cd2880bb4a05916875a2d1c60c
Author: David Neto <dneto@google.com>
Date:   Fri Sep 11 12:15:58 2015 -0400

    Add TODO for capability dependencies for Rev32+

commit 4caa47c3d41645950c1dc96abd55c466dfe3cad7
Author: David Neto <dneto@google.com>
Date:   Fri Sep 11 11:28:27 2015 -0400

    Assembler test for OpMemoryModel

commit 29e667eb6cafb30099fa52dc92a2381f8301345b
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Sep 11 11:01:59 2015 -0400

    Add library function parameter to set assembly format for disassembler.

commit 65ae32577475f543476835f840b2c750360e7d9d
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Sep 10 17:42:41 2015 -0400

    Add option to change assembly syntax format in the as tool.

commit c6402d64f49a61cd39b7e0eaf1a79dc4717493e3
Author: David Neto <dneto@google.com>
Date:   Thu Sep 10 16:39:09 2015 -0400

    Assembler tests for OpCapability.
    
    Adds test file for instructions in the Mode-Setting section
    of the SPIR-V spec.

commit 55bdfcb0bc8dcf88724b847341af858ebb2df6cd
Author: David Neto <dneto@google.com>
Date:   Thu Sep 10 15:51:57 2015 -0400

    Assembler test for LinkageAttributes decorations

commit 37547b230483a4b7b514006b152ab9318ae5d125
Author: David Neto <dneto@google.com>
Date:   Thu Sep 10 13:23:11 2015 -0400

    Assembler tests for all decorations except Linkage attributes
    
    Fixes typos in various parser tables.
    
    Updates readme.md with the fixes.

commit e78a7c19ff42f204e04608fa0e80b5534be33c43
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Sep 10 17:07:21 2015 -0400

    Run clang-format.

commit 06efdc59e1412c07158dddca066b8342bcddcf46
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Sep 10 14:00:00 2015 -0400

    Add an API parameter to choose assembly syntax format for assembler.
    
    Added a new enum for supported assembly syntax formats:
    Canonical Assembly Format (CAF) and Assignment Assembly Format (AAF).
    
    Updated assembler interface functions to support choice of assembly
    syntax format.

commit 92a225b371fced37866800ea7b76785e6f7d606f
Author: Dejan Mircevski <deki@google.com>
Date:   Thu Sep 10 14:55:33 2015 -0400

    Simplify checking for !<integer> first word.

commit a08350a2c377c1236737e5d781a629ef1d72383a
Author: David Neto <dneto@google.com>
Date:   Wed Sep 9 18:10:01 2015 -0400

    Assembler test for OpSourceExtension.
    
    Add test utility function MakeVector(std::string) to encode
    a string as a vector of 32-bit words, as per the SPIR-V literal
    string encoding.

commit 4b4acded77900d18ce0b3aa2dc7571b4ccc458b6
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Thu Sep 10 10:28:22 2015 -0400

    Added missing diagnostic when disassembling empty file.
    
    Added diagnostic messages for what should be an internal failure
    that never happens. I figure if we return "failed" for something the
    user cannot control we should print a message for it.

commit 08d89bb7a550e4546ce891a63ef4b9b66fb10a18
Author: David Neto <dneto@google.com>
Date:   Wed Sep 9 10:58:02 2015 -0400

    Test assembly of OpSource using all language enums
    
    Adds a file to test assembly of instructions in the "Debug" section
    of the SPIR-V spec.

commit 09c2a4b3ecad5e00e1f32960467d56f7a532efbb
Author: David Neto <dneto@google.com>
Date:   Wed Sep 9 16:54:39 2015 -0400

    Update CHANGES in the readme.md

commit 43f0e819c4990af4774e7cd144e8950c38c45733
Author: David Neto <dneto@google.com>
Date:   Tue Sep 8 15:38:55 2015 -0400

    Avoid undefined pointer given to spvTextDestroy
    
    The undefined pointer might get through to the call
    to spvTextDestroy if the test fails on an earlier step.
    In that case I just want to see the test failure, and
    not a test failure followed by undefined behaviour.

commit 26b3b00887df09dd79f89e3220c0159ce9128745
Author: Pyry Haulos <phaulos@google.com>
Date:   Wed Sep 9 13:35:53 2015 -0700

    Fix build on MSC
    
    Visual C++ compiler doesn't allow ternary select where type depends on
    condition even if there is a user-defined conversion operator to a common
    type.

commit c88dcd6a72472f1b3855c983328c90fc1ac52a3b
Author: David Neto <dneto@google.com>
Date:   Tue Sep 8 17:11:40 2015 -0400

    Add OpNop, OpUndef tests for spvTextToBinary
    
    Add text_fixture::TextToBinaryTestBase::CompiledInstructions,
    to more easily just examine the generated instructions by skipping
    over the header.
    
    Add spvtest::MakeInstruction utility function to easily generate
    a vector containing an opcode and its operands.

commit 574352c7a9fdea71c15e101face04386112e4c1b
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Sep 9 15:44:32 2015 -0400

    Fix interface function calls to the new API.

commit 610c52586595398d4d8ebc47a81ba7e210c5005c
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Sep 9 10:36:48 2015 -0400

    Preserve float values during encoding and decoding roundtrip.

commit cfeac48a37744f161840833a5fcb221f589d2cd4
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Wed Sep 9 13:04:32 2015 -0400

    Removed the ambiguity in the API for cleaning input vs output data.
    
    Previous the api used spv_text_t and spv_binary_t for both input
    and output, but depending on the usage, you either MUST
    call spvBinaryDestroy or you MUST NOT call spvBinaryDestroy on the
    pointer.

commit cac38f92dd8dbba0d6ac8886aa5d9f9c9e583386
Author: David Neto <dneto@google.com>
Date:   Tue Sep 8 15:29:22 2015 -0400

    Simplify uses of spvBinaryDestroy in tests
    
    Always try to destroy the binary during common methods
    of test fixtures.  This is safe if no other code in the test
    attempted to destroy the binary.
    
    Take advantage of the fact spvBinaryDestroy is a no-op on a nullptr,
    by eliminating the null pointer check in the caller.

commit ac6f71b2de4872fa223293eb8992f58fd6c7e72b
Author: David Neto <dneto@google.com>
Date:   Tue Sep 8 15:34:26 2015 -0400

    spvTextDestroy is no-op on nullptr.

commit a71138372e9d09987c28e2391688376c078e93da
Author: David Neto <dneto@google.com>
Date:   Wed Sep 9 11:35:01 2015 -0400

    Fix spvBinaryDestroy test to use an API-created object

commit b6a8898fa580391694c59f7597d69fd575e188c0
Author: David Neto <dneto@google.com>
Date:   Tue Sep 8 09:55:52 2015 -0400

    Enable OpcodeMake test, by sampling values.
    
    The previous version of the test was disabled, presumably
    because it took to long to run.

commit f4fd780654d553a9a6687062f8d114376ecf9599
Author: David Neto <dneto@google.com>
Date:   Tue Sep 8 15:15:23 2015 -0400

    spvBinaryDestroy(nullptr) is a no-op.

commit c9b5152b4fed71b3a655ae9db788900fb5e00a06
Author: David Neto <dneto@google.com>
Date:   Tue Sep 8 14:59:57 2015 -0400

    Remove spvOpcodeIsVariable
    
    Nothing was using it.

commit a12c2240bc6f3ab567cf8ac8dd3619000e0f4ec6
Author: David Neto <dneto@google.com>
Date:   Tue Sep 8 11:51:54 2015 -0400

    Fix -p on disassembler.
    
    spvTextToBinary fails if printing option is on
    *and* you send in a non-null pointer-to-spv_text.

commit 1a3990233c5936532c98ecb621904797810338d9
Author: Dejan Mircevski <deki@google.com>
Date:   Tue Sep 8 14:20:12 2015 -0400

    Add hex-format tests for !<integer>.

commit ea5a2a5242b8d85e468bc3be2f117a138def96c4
Author: Dejan Mircevski <deki@google.com>
Date:   Tue Sep 8 14:17:14 2015 -0400

    Add invalid-operand tests for !<integer>.

commit a4b834e456a3c0630abdaacc053c721dbefe3990
Author: Dejan Mircevski <deki@google.com>
Date:   Tue Sep 8 12:14:07 2015 -0400

    Make all SpirvVectors const in ImmediateInt.cpp.

commit d8454a7967d36ebf47d5cc65d6dc0f6bd7d604df
Author: Dejan Mircevski <deki@google.com>
Date:   Tue Sep 8 11:41:36 2015 -0400

    Tests for parsing recognizable words after !<integer>.

commit f58d8c096598fb8f70402b3b4ad215a62077c898
Author: David Neto <dneto@google.com>
Date:   Fri Sep 4 14:55:28 2015 -0400

    Add disabled test to check float value parsing
    
    Disabled for now because float parsing is broken.

commit ec5f82082f8debf1c749e77278262b4e6e1dfc8e
Author: David Neto <dneto@google.com>
Date:   Tue Sep 1 10:01:53 2015 -0400

    Remove SPV_OPERAND_TYPE_ELLIPSIS

commit 46ba0f757440ec70a30592ea6d5811f0762cefb3
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Fri Sep 4 15:13:57 2015 -0400

    Added option to only compile spirv library instead of all binaries as well

commit c978643748f7579a32e21885c6882ebc96a71716
Author: David Neto <dneto@google.com>
Date:   Tue Sep 1 18:05:14 2015 -0400

    Print diagnostics at the beginning of input.
    
    A spv_diagnostic_t value knows if the source is textual rather
    than binary.

commit e75b3e769dfbd7376ec4d63eedd94c077e3e75a6
Author: Dejan Mircevski <deki@google.com>
Date:   Thu Sep 3 16:29:27 2015 -0400

    Avoid "operands" in the !<immediate> explanation.
    
    Also declare "!<integer> = OpCode" legal.

commit abeab6e51c2d2ce38ea3c60037c6a5b65bd19ea9
Author: David Neto <dneto@google.com>
Date:   Fri Sep 4 14:31:01 2015 -0400

    Document current support and known bugs.

commit d5769bf08ac3e0ff5462a4d31fb966966473278d
Author: Dejan Mircevski <deki@google.com>
Date:   Thu Sep 3 17:42:50 2015 -0400

    Test consecutive opcodes being !<integer>.

commit 78c3b4377469e7120c942aca3cb7312d85bfac11
Author: David Neto <dneto@google.com>
Date:   Thu Aug 27 13:03:52 2015 -0400

    Use opcode operand definitions from SPIR-V specification generator.
    
    The assembler and disassembler now use a dynamically adjusted
    sequence of expected operand types.  (Internally, it is a deque,
    for readability.)  Both parsers repeatedly pull an expected operand
    type from the left of this pattern list, and try to match the next
    input token against it.
    
    The expected pattern is adjusted during the parse to accommodate:
    - an extended instruction's expected operands, depending on the
      extended instruction's index.
    - when an operand itself has operands
    - to handle sequences of zero or more operands, or pairs of
      operands.  These are expanded lazily during the parse.
    
    Adds spv::OperandClass from the SPIR-V specification generator.
    
    Modifies spv_operand_desc_t:
     - adds hasResult, hasType, and operandClass array to the opcode
    description type.
     - "wordCount" is replaced with "numTypes", which counts the number
       of entries in operandTypes.  And each of those describes a
       *logical* operand, including the type id for the instruction,
       and the result id for the instruction.  A logical operand could be
       variable-width, such as a literal string.
    
    Adds opcode.inc, an automatically-generated table of operation
    descriptions, with one line to describe each core instruction.
    Externally, we have modified the SPIR-V spec doc generator to
    emit this file.
    (We have hacked this copy to use the old semantics for OpLine.)
    
    Inside the assembler, parsing an operand may fail with new
    error code SPV_FAIL_MATCH.  For an optional operand, this is not
    fatal, but should trigger backtracking at a higher level.
    
    The spvTextIsStartOfNewInst checks the case of the third letter
    of what might be an opcode.  So now, "OpenCL" does not look like
    an opcode name.
    
    In assembly, the EntryPoint name field is mandatory, but can be
    an empty string.
    
    Adjust tests for changes to:
    - OpSampedImage
    - OpTypeSampler

commit 6c03f87490e3d70504c2fc40386b6c322d36160d
Author: Dejan Mircevski <deki@google.com>
Date:   Fri Sep 4 08:51:52 2015 -0400

    Print failing assembly text in CompileSuccessfully().

commit b3669d13fe999a5ac523d64964fd98d530aba673
Author: David Neto <dneto@google.com>
Date:   Tue Sep 1 12:24:06 2015 -0400

    Remove unused struct "bin"

commit 741cdc482985d727a2f9e724e056ace9716a27fe
Author: Dejan Mircevski <deki@google.com>
Date:   Wed Sep 2 17:17:42 2015 -0400

    More !<integer> tests.

commit 5f45e596bd9e3031150bbbce3fe5c543ef28e5b8
Author: Dejan Mircevski <deki@google.com>
Date:   Thu Sep 3 14:28:41 2015 -0400

    Use spvOpcodeMake() in ImmediateInt tests.

commit d3ead501deb220f998123611a5427e4d1d8fa7de
Author: David Neto <dneto@google.com>
Date:   Tue Sep 1 14:56:09 2015 -0400

    Don't overload operators in std namespace.
    
    Use a spvtest::WordVector proxy object to easily print
    std::vector<uint32_t> and spv_binary_t values.

commit 0a8f219d1e2d49ba67cec02d57311aed914b19fe
Author: Dejan Mircevski <deki@google.com>
Date:   Wed Sep 2 14:48:33 2015 -0400

    Add a few unit tests for !<integer>. More to come.
    
    Start using GMock: modify CMakeLists, fix googletest URL in readme.
    
    Add useful utilities to the TestFixture class.  Also make it conform to
    go/gunit recommendations about setup/teardown.

commit 9fa9157c4d50e01fe28afc3955062dd995d56e4a
Author: David Neto <dneto@google.com>
Date:   Mon Aug 31 14:07:22 2015 -0400

    Add bin-to-text test for operand with operands

commit c9a23a6fd546afd632028b46538d1a589cf735fc
Author: David Neto <dneto@google.com>
Date:   Mon Aug 31 13:34:28 2015 -0400

    Add binary-to-text test for single instruction
    
    This is easier to debug!
    
    Binary-to-text testing needs more tests, and more
    specific tests.  That's for future work.

commit e7ee4c4476d843966bf8a19fa0efbb117ad8da69
Author: David Neto <dneto@google.com>
Date:   Tue Aug 25 14:21:13 2015 -0400

    Getting the next word respects quoting and escaping.
    
    Use double quotes (").  They can be interspersed with
    other whitespace characters, just like shell quoting.
    
    A backslash (\) always escapes the next character.
    
    The end of the stream always terminates the word.
    
    Add AutoText struct to unit test utilities, to easily
    make spv_text_t values and reference them as spv_text values.

commit 7951050a952efc464a16e34cbedf3af162655fa0
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Tue Sep 1 15:15:36 2015 -0400

    Had spriv-tools stay inside it's own directory.
    
    In order to facilitate having a project depend on spirv-tools,
    have spirv-tools not pollute any external builds.

commit f184109d7b34977451c36b2a797a6a812d7965ad
Author: Dejan Mircevski <deki@google.com>
Date:   Mon Aug 31 17:42:22 2015 -0400

    Move ImmediateInt tests into their own file.
    
    This is in preparation of adding many more tests in accordance with the
    evolved spec.
    
    Also sort the test-source lines in CMakeLists.

commit 95ec7284f7d12c999dcbb27c7f3d2f1bcc9090ae
Author: Dejan Mircevski <deki@google.com>
Date:   Mon Aug 31 16:19:07 2015 -0400

    Warn about !<integer> opcode in assignment format.

commit 73d7082245bc2920f3be0ffc573d44294589b45e
Author: Dejan Mircevski <deki@google.com>
Date:   Mon Aug 31 15:24:32 2015 -0400

    Put test classes in anonymous namespace.
    
    Put TestFixture.h classes in a namespace.
    
    Remove unused #includes.

commit ad7cefd80e82e4f89ca255311670190747f924e8
Author: Dejan Mircevski <deki@google.com>
Date:   Mon Aug 31 12:13:33 2015 -0400

    Clarify !<integer> behaviour in readme.md.

commit 574884cd7efa0fc8364d107e25e916d61d49e103
Author: David Neto <dneto@google.com>
Date:   Tue Aug 25 13:53:19 2015 -0400

    Getting the next word ends at a comment (;)

commit e3f70b9a857fc587979d2bbc9422ea465fe8122c
Author: David Neto <dneto@google.com>
Date:   Thu Aug 27 13:50:05 2015 -0400

    Combine parsing of ID and RESULT_ID operand types

commit 98290a243e7f80a7dc6f4918b8729b399b5e3103
Author: David Neto <dneto@google.com>
Date:   Mon Aug 24 16:27:02 2015 -0400

    String literals must be quoted.

commit affa696027caa296e8e242f668d8076668733341
Author: David Neto <dneto@google.com>
Date:   Mon Aug 24 15:33:14 2015 -0400

    Fix some bugs in parsing literals.
    
    - a single hyphen is a string, not a number.
    - a string with more than one period is a string, not a number
    - check for string overflow
    
    Add some unit tests

commit 225baf88bc1eb70deef5457a21c1b46f55c908f9
Author: David Neto <dneto@google.com>
Date:   Thu Aug 27 13:38:39 2015 -0400

    Add SPV_FAILED_MATCH status code
    
    This is for future use by the parser.

commit 8a3ce9b16b21e54a3bf2e48a354a804f5f6d8269
Author: David Neto <dneto@google.com>
Date:   Thu Aug 27 13:14:02 2015 -0400

    Add enum values for instructions added after Rev31

commit 5b73214223d6fe6e92cd6fb815d06833f86449c5
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Aug 27 14:20:19 2015 -0400

    Add GLSL std450 extended instruction 72-80.

commit afdbd2d30316148e5f1a35e11d70d04f64ef88f5
Author: Dejan Mircevski <deki@google.com>
Date:   Thu Aug 27 13:57:08 2015 -0400

    Add std450 instructions 53-64.

commit 3cb589639d4beebf4ca6a810b1ab898a2741c0b8
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Aug 27 13:44:31 2015 -0400

    Add GLSL std450 extended instruction 65-71.

commit 4799482787eb69fd2ca8c71b5ff9e2af62fdb0b0
Author: David Neto <dneto@google.com>
Date:   Thu Aug 27 13:11:01 2015 -0400

    Fix spelling of SPV_OPERAND_TYPE_KERNEL_PROFILING_INFO

commit 85d4d6d677b4ad0525d6e48b96dffd73239b0bbc
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Aug 27 11:15:49 2015 -0400

    Add test for Modf and ModfStruct.

commit 2d879b93345dab5565f4d95e8d14ec2035d6a70a
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Aug 27 11:22:14 2015 -0400

    Simplify macro names used for GLSL std450 extended instruction table.

commit c48fcce97840b94305186e16b9ab876a49d4bd48
Author: Dejan Mircevski <deki@google.com>
Date:   Thu Aug 27 11:23:54 2015 -0400

    Add std450 instructions 49-52.

commit dca65b3f8c4ae06a473e45f388153db638fb8a35
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Aug 27 10:00:16 2015 -0400

    Reformat GLSL std450 extended instruction table.
    
    Also add test for Smoothstep.

commit c4ba8821e75215ede9e3695ed92e418d868cf123
Author: Dejan Mircevski <deki@google.com>
Date:   Wed Aug 26 23:39:37 2015 -0400

    Add tests for Atan2 and Pow.
    
    Fix a typo in "ParameterizedExtInst."

commit 65bfc4d585173027152dc4b0b0eccd7aefd1973d
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Aug 26 17:23:35 2015 -0400

    Unify tests for GLSL std450 extended instructions.
    
    Previously we had two tests: one checks test to binary, the other
    checks round trip. This patch merges the check in the former to
    the latter.

commit e5ae7f677f29e9b02846f11dd3a13c48f6c2c59e
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Aug 26 10:28:42 2015 -0400

    Add GLSL std450 instructions 35-48.

commit 0e149d7cc463b8435e1f8369a9d920a8558bfb01
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Aug 26 10:52:19 2015 -0400

    Move tests for GLSL std450 instructions to a separate file.

commit a5c171544ba60b42fd2027f3f20f4d55981747ea
Author: Dejan Mircevski <deki@google.com>
Date:   Tue Aug 25 17:41:45 2015 -0400

    Add std450 instructions 25-34.

commit 902e5a8a52244d1a80b4e9e99ab8a0820c511947
Author: Lei Zhang <antiagainst@google.com>
Date:   Mon Aug 24 14:07:37 2015 -0400

    Update readme about the "<result-id> = <opcode> <operand>..." format.

commit 8a37520908e9e64b8a07cdd9e27dd3d81eb08bdc
Author: Lei Zhang <antiagainst@google.com>
Date:   Mon Aug 24 15:52:26 2015 -0400

    Disassemble in the format of "<result-id> = <opcode> <operand>..".

commit 31e482cdf5587b37a2bbae8b464ca260fd38e0d3
Merge: 579c45d4 abafd5e6
Author: Kenneth Benzie <k.benzie@codeplay.com>
Date:   Wed Sep 2 05:49:42 2015 -0400

    Merge branch 'google-catch-up' into 'master'
    
    Google changes during GitLab outage
    
    These are the changes made by Google during the GitLab outage last week.
    
    See merge request !9

commit 579c45d4a9f7377a203a2137d6dd8060fe58624f
Merge: 46c441c2 7e75158c
Author: Kenneth Benzie <k.benzie@codeplay.com>
Date:   Thu Aug 27 03:58:08 2015 -0400

    Merge branch 'capability-enumerant' into 'master'
    
    Capability enumerant
    
    See merge request !5

commit 46c441c2ee35d76eef163c488ec9c53a8c103dab
Merge: 67b649fa 01024f57
Author: Kenneth Benzie <k.benzie@codeplay.com>
Date:   Tue Aug 25 04:09:08 2015 -0400

    Merge branch 'fix-p-switch' into 'master'
    
    Fix the '-p' command-line switch
    
    (Fix for issue #1)
    
    The -p option of the SPIR-V disassembler does not print anything to stdout, contrarily to what the usage help says.
    
    See merge request !8

commit abafd5e6740a0ef3939195cbf27668270c7ee2f8
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Aug 21 11:52:29 2015 -0400

    Only use '%' as variable name prefix.
    
    Since now we can distinguish between def and use according to
    the variable's location, there is no need to keep two variable
    prefixes.
    
    Also reformat tests to use the value generating instruction
    format ("<result-id> = <opcode> <operand>..").

commit 977e9bcfc6b83df986c2b8e3fd9b1dabcd1ec352
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Aug 21 11:52:03 2015 -0400

    Bugfix: report the correct location for wrong opcode.
    
    Also add more tests for the "<result-id> = <opcode> <operand>.."
    format.

commit ee87cc2a1e04457a5e419cb27e0c18f5bd4f2e4f
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Aug 21 11:51:28 2015 -0400

    Fix TextAdvance() problems involving whitespace around comment lines.
    
    Fix the bug that TextAdvance() forgot to skip whitespace at the
    beginning of the next line after a comment line.
    
    Fix the bug that TextAdvanceLine() increase line number after going
    over a character.

commit 2facab2d084e750ee7648bbb9022668758ba45ab
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Fri Aug 21 15:40:02 2015 -0400

    Added stream operators for spv_binary_t and std::vector<uint32_t>

commit dfc50086a6d30487979fca2249b05a0f3bf43f75
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Aug 21 11:50:55 2015 -0400

    Support "<result-id> = <opcode> <operand>.." format.

commit 0d350b5992564e258550eb89126d431c3dbb0622
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Fri Aug 21 14:23:42 2015 -0400

    Make the disassembler print the Extended instruction name.
    
    This allows the disassembled output to more closely follow the
    original assembly.

commit 1d2a87ed1b711944e50da798ad481beb486e7296
Author: Andrew Woloszyn <awoloszyn@google.com>
Date:   Fri Aug 21 13:39:34 2015 -0400

    Added the initial set of glsl450 instructions.
    
    Also rewrote the extended-instruction tests so that they would actually
    make sure that the instruction actually appears in the output.

commit fb76d81aa01411be27be71767b13dae076d31974
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Aug 21 11:50:09 2015 -0400

    Move test fixture into a separate header file so it can be reused.

commit 01024f57cb18b5d47ee318e034a96644cd761963
Author: Christopher Gautier <christopher.gautier@arm.com>
Date:   Sun Jun 21 17:20:05 2015 +0200

    Fix the '-p' command-line switch

commit 7e75158c7fa5e222f5439bb736486cb767e12540
Author: Lei Zhang <antiagainst@google.com>
Date:   Tue Aug 18 09:49:04 2015 -0400

    Address new enumerants in enum Capability for rev 31.

commit 67b649fa0144e091577aa115d2efc6b1f03fd6db
Merge: b21da829 604e5cea
Author: Kenneth Benzie <k.benzie@codeplay.com>
Date:   Tue Aug 18 05:34:27 2015 -0400

    Merge branch 'update-header-to-rev31' into 'master'
    
    Update external headers to rev 31
    
    See merge request !3

commit b21da829993a1bc7d82ff161ff07fa3c5ed40456
Merge: 17f1bae3 f6184a8b
Author: Kenneth Benzie <k.benzie@codeplay.com>
Date:   Tue Aug 18 05:31:23 2015 -0400

    Merge branch 'bitshift-parens' into 'master'
    
    Bitshift parens
    
    Parenthesize SPV_BIT macro to avoid surprises.
    
    Adds LibspirvMacros.cpp unit test file.
    
    See merge request !4

commit f6184a8b3786c83fd4684b147d8e2b4d77e7305c
Author: David Neto <dneto@google.com>
Date:   Fri Aug 14 13:57:02 2015 -0400

    Parenthesize SPV_BIT macro to avoid surprises.

commit 604e5cea120d5eb97316aa9e8b0a3c2092bbb6a0
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Aug 14 14:46:43 2015 -0400

    Update spirv.h to revision 31.
    
    For enum Capability and enum Op, not all newly added enumerants are
    registered into capabilityInfoEntries and opcodeTableEntries yet.
    That will come in following commits.

commit 3b10fa8255719ea8228561ae1d2a7ebefc9403a7
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Aug 14 14:44:38 2015 -0400

    Update OpenCLLib.h to revision 31.

commit 884c83388910a7e3c9c1627dca5a693eb43c90db
Author: Lei Zhang <antiagainst@google.com>
Date:   Fri Aug 14 14:42:30 2015 -0400

    Substitute GLSL450Lib.h with GLSL.std.450.h of revision 31.

commit 17f1bae331c6020bf7c0a91f70da73d5a593e5ac
Merge: 67cdf9fb e3800df7
Author: Kenneth Benzie <k.benzie@codeplay.com>
Date:   Mon Aug 17 07:58:16 2015 -0400

    Merge branch 'avoid-cmake-target-conflicts' into 'master'
    
    Avoid cmake target conflicts
    
    This makes it easier to include spirv-tools into larger cmake-based
    projects, which may already include glslang or googletest. It is
    currently difficult to do this because of target clashes and a
    hardcoded googletest path.
    
    glslang defines a target named SPIRV, so rename ours to SPIRV-TOOLS.
    
    A googletest subdirectory may already be added somewhere else, so if
    the external/googletest directory does not exist, probe whether there
    is a gtest target defined already. This makes spirv-tools work
    out-of-the-box when plopped into a larger project already containing
    googletest; otherwise the README.md procedure still works as before.
    
    See merge request !1

commit 67cdf9fba61d4c6c8b29cc746b72865adae27b4b
Merge: 81d7d49a 3a731549
Author: Kenneth Benzie <k.benzie@codeplay.com>
Date:   Mon Aug 17 07:58:00 2015 -0400

    Merge branch 'fix-failing-test' into 'master'
    
    Fix failing test
    
    The generator number is set to `SPV_GENERATOR_KHRONOS` in the
    `spvBinaryHeaderSet` function, so tests should catch up.
    
    See merge request !2

commit 3a7315498ff573c043e687dfcd6306872f8b1a78
Author: Lei Zhang <antiagainst@google.com>
Date:   Thu Jul 30 10:30:28 2015 -0400

    Fix failing tests.
    
    The generator number is set to SPV_GENERATOR_KHRONOS in the
    spvBinaryHeaderSet function, so tests should catch up.

commit e3800df71c3a36ee5e1185b46034679fffdf58d6
Author: Lei Zhang <antiagainst@google.com>
Date:   Wed Jul 29 15:22:09 2015 -0400

    Avoid target conflicts with glslang and googletest.
    
    This makes it easier to include spirv-tools into larger cmake-based
    projects, which may already include glslang or googletest. It is
    currently difficult to do this because of target clashes and a
    hardcoded googletest path.
    
    glslang defines a target named SPIRV, so rename ours to SPIRV-TOOLS.
    
    A googletest subdirectory may already be added somewhere else, so if
    the external/googletest directory does not exist, probe whether there
    is a gtest target defined already. This makes spirv-tools work
    out-of-the-box when plopped into a larger project already containing
    googletest; otherwise the README.md procedure still works as before.

commit 81d7d49a205b27b72906c7a2634aca9c06786895
Author: Kenneth Benzie (Benie) <k.benzie@codeplay.com>
Date:   Mon Jun 1 09:50:46 2015 -0700

    Change binary header generator word to Khronos

commit 2c83666625a5519f6ea0ed3ebb676d6132078bd5
Author: Kenneth Benzie (Benie) <k.benzie@codeplay.com>
Date:   Tue May 26 10:40:58 2015 +0100

    Update readme file with repo maintainer.

commit 83e5a29b06e8e5b379b8fbc261d909457179c995
Author: Kenneth Benzie (Benie) <k.benzie@codeplay.com>
Date:   Fri May 22 18:26:19 2015 +0100

    Code drop of the Codeplay spirv-tools source.
    
    This commit contains the source for the SPIRV static library, spirv-as,
    spirv-dis, and spirv-val tools.
